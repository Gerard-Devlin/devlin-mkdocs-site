{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#instructions","title":"Instructions","text":"<ul> <li>A CS beginner guide</li> <li>Learn from basic  grammar to higher level Machine learning knowledge</li> </ul> Danger Bug <p>Tip</p>"},{"location":"#this-is-just-a-work-in-progress","title":"This is just a work in progress","text":""},{"location":"#testis-website-hoc-est-noli-mirari-si-cimices-incidas-et-sis-mitis-cum-hoc-loco","title":"Testis website hoc est, noli mirari si cimices incidas, et sis mitis cum hoc loco","text":""},{"location":"#all-the-functions-can-work-properly-now","title":"all the functions can work properly now","text":""},{"location":"C/1/","title":"1","text":"<ul> <li>1<ul> <li>1.1.2<ul> <li>\u7a0b\u5e8f\u7684\u6267\u884c<ul> <li>\u2460\u89e3\u91ca\uff1a</li> <li>\u2461\u7f16\u8bd1\uff1a</li> </ul> </li> </ul> </li> <li>1.2.1</li> <li>1.2.2</li> <li>1.2.3<ul> <li>C\u8bed\u8a00\u7528\u5728\uff1a</li> </ul> </li> <li>1.3.1<ul> <li>\u7b2c\u4e00\u4e2aC\u7a0b\u5e8f</li> </ul> </li> <li>1.3.2<ul> <li>\u6240\u6709\u7a0b\u5e8f\u90fd\u8981\u6709</li> </ul> </li> <li>1.3.3<ul> <li>\u70b9\u8ba1\u7b97</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/1/#1","title":"1","text":""},{"location":"C/1/#112","title":"1.1.2","text":""},{"location":"C/1/#_1","title":"\u7a0b\u5e8f\u7684\u6267\u884c","text":"Quote Quote <p>\u8bed\u8a00\u6ca1\u6709\u7f16\u8bd1/\u89e3\u91ca\u4e4b\u5206</p> <ul> <li> <p>\u89e3\u91ca\u578b\u8bed\u8a00\u6709 \u7279\u6b8a\u8ba1\u7b97\u80fd\u529b</p> </li> <li> <p>\u7f16\u8bd1\u578b\u8bed\u8a00\u6709 \u786e\u5b9a\u7684\u8fd0\u7b97\u6027\u80fd</p> </li> </ul>"},{"location":"C/1/#1_1","title":"\u2460\u89e3\u91ca\uff1a","text":"<ul> <li>\u501f\u52a9\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u90a3\u4e2a\u7a0b\u5e8f\u80fd\u8bd5\u56fe\u7406\u89e3\u4f60\u7684\u7a0b\u5e8f\uff0c\u7136\u540e\u6267\u884c</li> </ul>"},{"location":"C/1/#2","title":"\u2461\u7f16\u8bd1\uff1a","text":"<ul> <li>\u501f\u52a9\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7ffb\u8bd1\u6210\u673a\u5668\u8bed\u8a00\uff0c\u7136\u540e\u6267\u884c</li> </ul>"},{"location":"C/1/#121","title":"1.2.1","text":""},{"location":"C/1/#122","title":"1.2.2","text":"<p>FORTRAN\u2192BCPL\u2192B\u2192C</p>"},{"location":"C/1/#123","title":"1.2.3","text":""},{"location":"C/1/#c","title":"C\u8bed\u8a00\u7528\u5728\uff1a","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u9a71\u52a8\u7a0b\u5e8f\u3001\u5e95\u5c42\u9a71\u52a8\u3001\u56fe\u5f62\u5f15\u64ce\u3001\u56fe\u50cf\u5904\u7406\u3001\u58f0\u97f3\u6548\u679c</p> <p>\u65e5\u5e38\u5e94\u7528\u5f88\u5c11\u76f4\u63a5\u7528C\u8bed\u8a00\u7f16\u5199\uff0c\u5b66\u4e60C\u7684\u8fc7\u7a0b\u4e3b\u8981\u662f\u5199\u7ec3\u4e60\u4ee3\u7801\uff0c\u975e\u771f\u5b9e\u8f6f\u4ef6</p> <p>Tip</p> <p>C\u8bed\u8a00\u9700\u8981\u88ab\u7f16\u8bd1\u624d\u80fd\u8fd0\u884c\uff0c\u9700\u8981\uff1a</p> <ul> <li>\u7f16\u8f91\u5668</li> <li>\u7f16\u8bd1\u5668</li> <li>IDE</li> </ul>"},{"location":"C/1/#131","title":"1.3.1","text":""},{"location":"C/1/#c_1","title":"\u7b2c\u4e00\u4e2aC\u7a0b\u5e8f","text":"CC++ <pre><code>int main()\n{\n    print(\"Hello World!\\n\");\n\n    return 0;\n}\n\n//printf:\u6253\u5370\u5b57\u7b26\u4e32\n//\\n:   \u6362\u884c\n</code></pre> <pre><code>    int main()\n    {\n        cout&lt;&lt;\"Hello World!\"&lt;&lt;endl;\n\n        return 0;\n    }\n\n    //cout \u6253\u5370\u5b57\u7b26\u4e32\n    //endl: \u6362\u884c\n</code></pre>"},{"location":"C/1/#132","title":"1.3.2","text":""},{"location":"C/1/#_2","title":"\u6240\u6709\u7a0b\u5e8f\u90fd\u8981\u6709","text":"<pre><code>int main()\n{\n    return 0;\n}\n</code></pre>"},{"location":"C/1/#133","title":"1.3.3","text":""},{"location":"C/1/#_3","title":"\u70b9\u8ba1\u7b97","text":"<pre><code>int main()\n{\n    printf(\"12+34=%d\",12+34);\n    return 0;\n}\n// %d:\u628a\u540e\u9762\u4e00\u4e2a\u6574\u6570\u586b\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\uff08\u5360\u4f4d\uff09\n</code></pre>"},{"location":"C/10/","title":"10","text":"<ul> <li>10<ul> <li>10.1.1<ul> <li>\u5b57\u7b26\u4e32<ul> <li>\u5b57\u7b26\u6570\u7ec4</li> <li>\u5b57\u7b26\u4e32</li> <li>\u5b57\u7b26\u4e32\u53d8\u91cf</li> <li>\u5b57\u7b26\u4e32\u5e38\u91cf</li> </ul> </li> </ul> </li> <li>10.1.2<ul> <li>\u5b57\u7b26\u4e32\u53d8\u91cf</li> <li>\u6307\u9488\u8fd8\u662f\u6570\u7ec4\uff1f<ul> <li>char*\u662f\u5b57\u7b26\u4e32\uff1f</li> </ul> </li> </ul> </li> <li>10.1.3<ul> <li>\u5b57\u7b26\u4e32\u7684\u8f93\u5165/\u8f93\u51fa<ul> <li>\u5b89\u5168\u8f93\u5165</li> </ul> </li> <li>\u5e38\u89c1\u9519\u8bef</li> <li>\u7a7a\u5b57\u7b26\u4e32</li> </ul> </li> <li>10.1.4<ul> <li>\u5b57\u7b26\u4e32\u6570\u7ec4</li> <li>\u7a0b\u5e8f\u53c2\u6570\u2753\u2753\u2753</li> </ul> </li> <li>10.2.1<ul> <li>\u5355\u5b57\u7b26\u8f93\u5165\u8f93\u51fa\u2753\u2753\u2753<ul> <li>putchar</li> <li>getchar</li> </ul> </li> </ul> </li> <li>10.2.2<ul> <li>\u51fd\u6570strlen<ul> <li>\u81ea\u5df1\u5199\u51fastrlen</li> </ul> </li> </ul> </li> <li>10.2.3<ul> <li>\u51fd\u6570strcmp<ul> <li>\u81ea\u5df1\u5199\u51fastrcmp</li> </ul> </li> </ul> </li> <li>10.2.4<ul> <li>\u51fd\u6570strcpy</li> <li>\u590d\u5236\u4e00\u4e2a\u5b57\u7b26\u4e32</li> </ul> </li> <li>10.2.6<ul> <li>\u51fd\u6570strchr<ul> <li>e.g.\u5982\u4f55\u5bfb\u627e\u7b2c\u4e8c\u4e2a\uff1f</li> <li>e.g.\u5982\u4f55\u5c06\u627e\u5230\u7684\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d</li> <li>e.g.\u6253\u5370\u627e\u5230\u5b57\u7b26\u4e32\u524d\u9762\u7684\u4e1c\u897f</li> </ul> </li> <li>\u51fd\u6570strstr</li> <li>\u51fd\u6570strcasestr</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/10/#10","title":"10","text":""},{"location":"C/10/#1011","title":"10.1.1","text":""},{"location":"C/10/#_1","title":"\u5b57\u7b26\u4e32","text":""},{"location":"C/10/#_2","title":"\u5b57\u7b26\u6570\u7ec4","text":"<pre><code>char word[]={'H','e','l','l','o'\uff0c'!'};\n</code></pre>"},{"location":"C/10/#_3","title":"\u5b57\u7b26\u4e32","text":"<pre><code>char word[]={'H','e','l','l','o','!','\\0'};\n//\u4ee50\uff08\u6574\u65700\uff09\u7ed3\u5c3e\u7684\u4e00\u4e32\u5b57\u7b26\nchar word[]={'H','e','l','l','o','!',0};//\u53ef\u7b49\u4ef7\nchar word[]={'H','e','l','l','o','!','0'};//\u4e0d\u53ef\u7b49\u4ef7\n</code></pre> <ul> <li>\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u4e0d\u5305\u542b\u8fd9\u4e2a<code>0</code></li> <li>\u5b57\u7b26\u4e32\u4ee5==\u6570\u7ec4==\u5f62\u5f0f\u5b58\u5728\uff0c\u4ee5\u6570\u7ec4\u6216\u8005\u6307\u9488\u5f62\u5f0f\u8bbf\u95ee</li> <li><code>string.h</code>\u6709\u5f88\u591a\u5904\u7406\u5b57\u7b26\u4e32\u7684\u51fd\u6570</li> </ul> <p>Question</p> <p>\u95ee\u9898\uff1a\u5982\u679c\u6211\u60f3\u5728\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u4e00\u4e2a <code>\\0</code> \u5b57\u7b26\u800c\u4e0d\u7ec8\u6b62\u5b57\u7b26\u4e32\u600e\u4e48\u529e\u2753\u2753\u2753</p>"},{"location":"C/10/#_4","title":"\u5b57\u7b26\u4e32\u53d8\u91cf","text":"<pre><code>char *str=\"Hello\";\nchar word[]=\"Hello\";\nchar line[10]=\"Hello\";\n</code></pre>"},{"location":"C/10/#_5","title":"\u5b57\u7b26\u4e32\u5e38\u91cf","text":"<ul> <li>\u201cHello\u201d\u4f1a\u88ab\u7f16\u8bd1\u5668\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u653e\u5728\u67d0\u5904\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u662f6\uff0c\u7ed3\u5c3e\u8fd8\u6709\u8868\u793a\u7ed3\u675f\u76840</li> <li>\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u4e32\u5e38\u91cf\u4f1a\u88ab\u8fde\u5728\u4e00\u8d77</li> </ul> <p>Note</p> <ul> <li>C\u8bed\u8a00\u7684\u5b57\u7b26\u4e32\u662f\u4ee5\u5b57\u7b26\u6570\u7ec4\u7684\u5f62\u6001\u5b58\u5728\u7684</li> <li>\u4e0d\u80fd\u7528\u8fd0\u7b97\u7b26\u5bf9\u5b57\u7b26\u4e32\u505a\u8fd0\u7b97</li> <li>\u901a\u8fc7\u6570\u7ec4\u7684\u65b9\u5f0f\u53ef\u4ee5\u904d\u5386\u5b57\u7b26\u4e32</li> </ul>"},{"location":"C/10/#1012","title":"10.1.2","text":""},{"location":"C/10/#_6","title":"\u5b57\u7b26\u4e32\u53d8\u91cf","text":"<p><pre><code>int main( ) {\n\n    int i=0;\n    char *s = \"Hello World!\";\n    char *s2= \"Hello World!\";\n\n    printf(\"s= %p\\n\",s);//s= 00007ff6da3cb000\n    printf(\"s2=%p\\n\",s2);//s2=00007ff6da3cb000\n    printf(\"s3=%p\\n\",s3);//s3=0000006ed63ff7ff\n    printf(\"i=%p\\n\",&amp;i);//i=0000002d14bffb7c\n\n    return 0;\n}\n</code></pre> - \u6307\u9488s\u548cs2\u6307\u5411\u540c\u4e00\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u968f\u610f\u4fee\u6539\u6570\u7ec4\u4e2d\u5143\u7d20\uff0c\u5426\u5219\u6539\u4e86s\u4e5f\u4f1a\u5f71\u54cds2</p> <ul> <li> <p>s\u5b9e\u9645\u4e0a\u662f<code>const char *s</code>\uff0c\u53ea\u8bfb</p> </li> <li> <p>\u8981==\u4fee\u6539==\u5b57\u7b26\u4e32\uff0c\u5e94\u8be5\u7528\u6570\u7ec4</p> </li> <li> <p><code>c     char s[]=\"Hello,world!\";</code></p> </li> </ul>"},{"location":"C/10/#_7","title":"\u6307\u9488\u8fd8\u662f\u6570\u7ec4\uff1f","text":"<ul> <li> <p>\u6307\u9488\u8fd8\u662f\u6570\u7ec4\uff1f</p> <ul> <li> <p>\u6570\u7ec4</p> <ul> <li> <p>\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5728\u8fd9\u91cc</p> <ul> <li>\u4f5c\u4e3a\u672c\u5730\u53d8\u91cf\u88ab\u81ea\u52a8\u56de\u6536</li> </ul> </li> </ul> </li> <li> <p>\u6307\u9488</p> <ul> <li>\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0d\u77e5\u9053\u5728\u54ea\u91cc<ul> <li>\u5904\u7406\u53c2\u6570</li> <li>\u52a8\u6001\u5206\u914d\u5185\u5b58</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>\u6784\u9020\u5b57\u7b26\u4e32\u2192\u6570\u7ec4</p> <p>\u5904\u7406\u4e00\u4e2a\u5b57\u7b26\u4e32\u2192\u6307\u9488</p>"},{"location":"C/10/#char","title":"<code>char*</code>\u662f\u5b57\u7b26\u4e32\uff1f","text":"<ul> <li>\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f<code>char*</code>\u5f62\u5f0f</li> <li><code>char*</code>\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32</li> <li>\u672c\u610f\u662f\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\uff0c\u53ef\u80fd\u6307\u5411\u7684\u662f\u5b57\u7b26\u7684\u6570\u7ec4(\u50cfint*)</li> <li>\u53ea\u6709\u6240\u6307\u5411\u7684\u5b57\u7b26\u6570\u7ec4\u7ed3\u5c3e\u67090\uff0c\u624d\u80fd\u8bf4\u5b83\u6240\u6307\u7684\u662f\u5b57\u7b26\u4e32</li> </ul>"},{"location":"C/10/#1013","title":"10.1.3","text":""},{"location":"C/10/#_8","title":"\u5b57\u7b26\u4e32\u7684\u8f93\u5165/\u8f93\u51fa","text":"<pre><code>char *t=\"title\";\nchar *s;\ns=t;\n</code></pre> <pre><code>stateDiagram\nt--&gt;title\\0\ns--&gt;title\\0</code></pre> <p>\u5e76\u6ca1\u6709\u521b\u9020\u4e00\u4e2a\u65b0\u7684<code>s</code>\uff0c\u800c\u662f\u90fd\u6307\u5411<code>title\\0</code></p> <pre><code>int main(void) {\n    char word[8];\n    scanf(\"%s\", word);//hello world\n    printf(\"%s##\\n\", word);//hello##\n\n    return 0;\n}\n</code></pre> <pre><code>int main(void) {\n    char word[8];\n    char word2[8];\n    scanf(\"%s\", word);//hello\n    scanf(\"%s\",word2);//world\n    printf(\"%s##%s##\\n\", word,word2);//hello##world##\n\n    return 0;\n}\n</code></pre> <ul> <li><code>scanf</code>\u8bfb\u5165\u4e00\u4e2a\u5355\u8bcd\uff08\u5230\u7a7a\u683c\u3001tab\u3001\u56de\u8f66\u4e3a\u6b62\uff09</li> <li><code>scanf</code>\u4e0d\u5b89\u5168\u2192\u4e0d\u77e5\u9053\u8981\u8bfb\u5165\u7684\u5185\u5bb9\u7684\u957f\u5ea6</li> </ul> <pre><code>int main(void) {\n    char word[8];\n    char word2[8];\n    scanf(\"7%s\", word);//12345678\n    scanf(\"7%s\",word2);\n    printf(\"%s##%s##\\n\", word,word2\uff1b//1234567##8##\n\n    return 0;\n}\n</code></pre> <p>Tip</p>"},{"location":"C/10/#_9","title":"\u5b89\u5168\u8f93\u5165","text":"<p><code>%ns</code>\u9650\u5b9a\u8f93\u5165\u5b57\u7b26\u4e32\u957f\u5ea6</p>"},{"location":"C/10/#_10","title":"\u5e38\u89c1\u9519\u8bef","text":"<pre><code>char *string;\nscanf(\"%s\",string);\n</code></pre> <ul> <li>\u4ee5\u4e3a<code>char*</code>\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53d8\u91cfstring\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</li> <li>\u6ca1\u6709\u5bf9<code>string</code>\u521d\u59cb\u5316\u4e3a<code>0</code>\uff0c\u5e76\u4e0d\u4e00\u5b9a\u6bcf\u4e00\u6b21\u90fd\u51fa\u9519</li> </ul>"},{"location":"C/10/#_11","title":"\u7a7a\u5b57\u7b26\u4e32","text":"<pre><code>char buffer[100]=\"\";\n//buffer[0]=='\\0'\n</code></pre> <pre><code>char buffer[]=\"\";\n//\u8fd9\u4e2a\u6570\u7ec4\u957f\u5ea6\u5219\u4e3a1\uff0c\u56e0\u4e3a\u672a\u5b9a\u4e49\u957f\u5ea6\n</code></pre>"},{"location":"C/10/#1014","title":"10.1.4","text":""},{"location":"C/10/#_12","title":"\u5b57\u7b26\u4e32\u6570\u7ec4","text":"\u4ee3\u7801 \u542b\u4e49 \u2460<code>char **a</code> a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u90a3\u4e00\u4e2a\u6307\u9488\uff0c\u90a3\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5b57\u7b26\uff08\u4e32\uff09 \u2461<code>char a[][n]</code> \u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4 \u2462<code>char *a[]</code> \u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u6307\u9488\u6570\u7ec4\u3002\u8fd9\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488 <p>\u2461 vs \u2462\uff1a</p> <ul> <li><code>char a[][10]</code>\u9002\u7528\u4e8e\u5b58\u50a8\u56fa\u5b9a\u957f\u5ea6\u7684\u591a\u4e2a\u5b57\u7b26\u4e32\u3002</li> <li><code>char *a[]</code>\u66f4\u7075\u6d3b\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5185\u5b58\u7ba1\u7406\u3002</li> </ul> <pre><code>graph LR\n    subgraph \"pointer a\"\n    A0[\"a[0]\"]\n    A1[\"a[1]\"]\n    end\n\n    subgraph \"string\"\n    S1[\"hello\\0\"]\n    S2[\"world\\0\"]\n    end\n\n    A0 --&gt; S1\n    A1 --&gt; S2</code></pre> <pre><code>int main() {\n    const char *months[] = {\n        \"January\", \"February\", \"March\", \"April\",\n        \"May\", \"June\", \"July\", \"August\",\n        \"September\", \"October\", \"November\", \"December\"\n    };\n\n    int month;\n    printf(\"Enter month number (1-12): \");\n    scanf(\"%d\", &amp;month);\n\n    if (month &gt;= 1 &amp;&amp; month &lt;= 12) {\n        printf(\"The month is: %s\\n\", months[month - 1]);\n    } else {\n        printf(\"Invalid month number! Please enter a number between 1 and 12.\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C/10/#_13","title":"\u7a0b\u5e8f\u53c2\u6570\u2753\u2753\u2753","text":"<pre><code>int main(int argc, char const *argv[])\n</code></pre> <pre><code>int main(int argc,char const *argv[]) {\n    int i=0;\n    for(i=0;i&lt;=argc;i++) {\n        printf(\"%d:%s\\n\",i,argv[i]);\n    }\n    return 0;\n}\n/*\n0:C:\\Users\\Devlin\\CLionProjects\\untitled1\\cmake-build-debug\\untitled1.exe\n1:(null)\n*/\n</code></pre> <p><code>argc</code> \u662f \"argument count\" \u7684\u7f29\u5199\uff0c\u8868\u793a\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6570\u91cf\u3002</p> <p><code>argv</code> \u662f \"argument vector\" \u7684\u7f29\u5199\uff0c\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff08\u6307\u5411\u5b57\u7b26\u5e38\u91cf\u7684\u6307\u9488\u6570\u7ec4\uff09\uff0c\u7528\u4e8e\u5b58\u50a8\u547d\u4ee4\u884c\u53c2\u6570\u7684\u5b9e\u9645\u503c\u3002</p>"},{"location":"C/10/#1021","title":"10.2.1","text":""},{"location":"C/10/#_14","title":"\u5355\u5b57\u7b26\u8f93\u5165\u8f93\u51fa\u2753\u2753\u2753","text":""},{"location":"C/10/#putchar","title":"<code>putchar</code>","text":"<pre><code>int putchar(int c);\n</code></pre> <ul> <li>\u5411\u6807\u51c6\u8f93\u51fa\u5199\u4e00\u4e2a\u5b57\u7b26</li> <li>\u8fd4\u56de\u5199\u4e86\u51e0\u4e2a\u5b57\u7b26\uff0c<code>EOF(-1)</code>\u8868\u793a\u5199\u5931\u8d25</li> </ul>"},{"location":"C/10/#getchar","title":"<code>getchar</code>","text":"<ul> <li>\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26</li> <li>\u8fd4\u56de\u7c7b\u578b\u662f<code>int</code>\u662f\u4e3a\u4e86\u8fd4\u56de<code>EOF(-1)</code></li> <li>Windows\u2192Ctrl-Z</li> <li>Unix\u2192Ctrl-D</li> </ul> <pre><code>int main(int argc,char const *argv[]) {\n    int ch;\n\n    while((ch=getchar())!=EOF) {\n        putchar(ch);\n    }\n    printf(\"EOF\\n\");\n    return 0;\n}\n</code></pre> <pre><code>flowchart LR\n    I/O --&gt; B[Shell]\n    B --&gt; C[Program]\n    C --&gt; B\n    B --&gt; I/O</code></pre>"},{"location":"C/10/#1022","title":"10.2.2","text":""},{"location":"C/10/#strlen","title":"\u51fd\u6570<code>strlen</code>","text":"<pre><code>#include &lt;string.h&gt;\n</code></pre> <pre><code>//\u5b9e\u8d28\nsize_t strlen(const char *s)\uff1b\n</code></pre> <pre><code>int main(int argc, char const *argv[]) {\n    char line[]=\"Hello\";\n    printf(\"strlen=%lu\\n\", strlen(line));//strlen=5\n    printf(\"sizeof=%lu\\n\",sizeof(line));//sizeof=6\n\n    return 0;\n}\n</code></pre>"},{"location":"C/10/#strlen_1","title":"\u81ea\u5df1\u5199\u51fa<code>strlen</code>","text":"<pre><code>int mystrlen(const char *s) {\n    int index =0;\n    while (s[index] != '\\0') {\n        index++;\n    }\n    return index;\n}\n</code></pre>"},{"location":"C/10/#1023","title":"10.2.3","text":""},{"location":"C/10/#strcmp","title":"\u51fd\u6570<code>strcmp</code>","text":"<pre><code>int main(int argc,char const *argv[]) {\n    char s1[]=\"abc\";\n    char s2[]=\"Abc\";//a,A\u5728ASCII\u7801\u8868\u4e2d\u5dee32\n    printf(\"%d\\n\",s1==s2);\n    printf(\"%d\\n\",strcmp(s1,s2));//32  \u2192  'a'-'A'==32\n\n    return 0\uff1b\n}\n</code></pre> <pre><code>int main(int argc,char const *argv[]) {\n    char s1[]=\"abc\";\n    char s2[]=\"abc \";//\u591a\u4e00\u4e2a\u7a7a\u683c \u7a7a\u683c\u5728ASCII\u7801\u4e2d\u662f32\n    printf(\"%d\\n\",s1==s2);\n    printf(\"%d\\n\",strcmp(s1,s2));//-32 \n\n    return 0\uff1b\n}\n</code></pre>"},{"location":"C/10/#strcmp_1","title":"\u81ea\u5df1\u5199\u51fa<code>strcmp</code>","text":"<pre><code>//\u2460\u7528\u6570\u7ec4\nint mystrcmp(const char *s1, const char *s2) {\n    int index =0;\n    while(s1[index]==s2[index] &amp;&amp; s1[index] != '\\0') {\n        index++;\n    }\n    return s1[index] - s2[index];\n}\n//\u2461\u7528\u6307\u9488\nint mystrcmp(const char *s1, const char *s2) {\n    while(*s1==*s2 &amp;&amp; *s1 != '\\0') {\n        s1++;\n        s2++;\n    }\n    return *s1-*s2;\n}\n</code></pre>"},{"location":"C/10/#1024","title":"10.2.4","text":""},{"location":"C/10/#strcpy","title":"\u51fd\u6570<code>strcpy</code>","text":"<pre><code> char *strcpy(char *restrict dst,const char *restrict src);\n//\u628asrc\u5185\u5bb9\u62f7\u8d1d\u5230dst\u4e2d\n</code></pre> <p>Warning</p> <p><code>restrict</code>\u8868\u660e<code>src</code>\u548c<code>dst</code>\u4e0d\u91cd\u53e0(C99)</p> <p>\u8fd4\u56de<code>dst</code>\u2192\u4e3a\u4e86\u94fe\u8d77\u4ee3\u7801\u6765\u2753\u2753</p>"},{"location":"C/10/#_15","title":"\u590d\u5236\u4e00\u4e2a\u5b57\u7b26\u4e32","text":"<pre><code>char *dst=(char *)malloc(strlen(src)+1);\nstrcpy(dst,src);\n</code></pre> <p>\u81ea\u5df1\u5199\u51fa<code>strcpy</code></p> <pre><code>//\u2460\u7528\u6570\u7ec4\nchar *mystrcpy (char *dst, const char *src) {\n    int index =0;\n    while (src[index] != '\\0') {\n        dst[index] = src[index];\n        index++;\n    }\n    dst[index] = '\\0';\n    return dst;\n}\n//\u2461\u7528\u6307\u9488\nchar *mystrcpy (char *dst, const char *src) {\n    char *ret = dst;\n    while (*src != '\\0') {\n        *dst++ = *src++;\n    }\n    /*\n    \u53ef\u4ee5\u7cbe\u7b80while\u8bed\u53e5\n    while(*dst++=*src++);\n    \u8be5\u53e5\u9690\u542b\u5224\u65ad\u4e86*src\u662f0\n    */\n    *dst = '\\0';\n    return ret;\n}\n</code></pre>"},{"location":"C/10/#1026","title":"10.2.6","text":""},{"location":"C/10/#strchr","title":"\u51fd\u6570<code>strchr</code>","text":"<pre><code>char *strchr(const char *str, int c);//\u4ece\u5de6\u627e\nchar *strrchr(const char *str, int c);//\u4ece\u53f3\u627e\n//\u8fd4\u56deNULL\u8868\u793a\u6ca1\u627e\u5230\n</code></pre>"},{"location":"C/10/#eg","title":"e.g.\u5982\u4f55\u5bfb\u627e\u7b2c\u4e8c\u4e2a\uff1f","text":"<pre><code>int main(void) {\n    char s[]=\"Hello\";\n    char *p=strchr(s,'l');\n    p =strchr(p+1,'l');//\u5728\u5df2\u7ecf\u627e\u5230\u7684\u5b57\u7b26\u4e32\u201cllo\u201d\u4e2d\u7ee7\u7eed\u5bfb\u627e\n    printf(\"%s\\n\",p);\n    return 0;\n}\n</code></pre>"},{"location":"C/10/#eg_1","title":"e.g.\u5982\u4f55\u5c06\u627e\u5230\u7684\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d","text":"<pre><code>int main(void) {\n    char s[]=\"Hello\";\n    char *p=strchr(s,'l');\n    char *t=(char*)malloc(strlen(p)+1);\n    strcpy(t,p);\n    printf(\"%s\\n\",t);\n    free (t);\n    return 0;\n}\n</code></pre>"},{"location":"C/10/#eg_2","title":"e.g.\u6253\u5370\u627e\u5230\u5b57\u7b26\u4e32\u524d\u9762\u7684\u4e1c\u897f","text":"<pre><code>int main(void) {\n    char s[]=\"Hello\";\n    char *p=strchr(s,'l');\n    char c;\n    c=*p;\n    *p='\\0';\n    char *t=(char*)malloc(strlen(p)+1);\n    strcpy(t,s);\n    printf(\"%s\\n\",t);\n    *p=c;\n    free (t);\n    return 0;\n}\n</code></pre>"},{"location":"C/10/#strstr","title":"\u51fd\u6570<code>strstr</code>","text":"<p>\u5bfb\u627e\u5b57\u7b26\u4e32</p>"},{"location":"C/10/#strcasestr","title":"\u51fd\u6570<code>strcasestr</code>","text":"<p>\u5ffd\u7565\u5927\u5c0f\u5199\u5bfb\u627e\u5b57\u7b26\u4e32</p>"},{"location":"C/11/","title":"11","text":"<ul> <li>11<ul> <li>11.1.1<ul> <li>\u679a\u4e3e<ul> <li>\u5e38\u91cf\u7b26\u53f7\u5316</li> </ul> </li> <li>\u5957\u8def\uff1a\u81ea\u52a8\u8ba1\u6570\u7684\u679a\u4e3e</li> <li>\u679a\u4e3e\u91cf</li> </ul> </li> <li>11.1.2<ul> <li>\u7ed3\u6784\u7c7b\u578b<ul> <li>\u58f0\u660e\u7ed3\u6784\u7c7b\u578b</li> <li>\u58f0\u660e\u7ed3\u6784\u7684\u5f62\u5f0f<ul> <li>\u2460</li> <li>\u2461</li> <li>\u2462</li> </ul> </li> </ul> </li> <li>\u7ed3\u6784\u7684\u521d\u59cb\u5316</li> <li>\u7ed3\u6784\u6210\u5458</li> <li>\u7ed3\u6784\u8fd0\u7b97</li> <li>\u7ed3\u6784\u6307\u9488</li> </ul> </li> <li>11.1.3<ul> <li>\u7ed3\u6784\u4e0e\u51fd\u6570</li> <li>\u8f93\u5165\u7ed3\u6784</li> <li>\u7ed3\u6784 \u6307\u9488 \u4f5c\u4e3a\u53c2\u6570</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/11/#11","title":"11","text":""},{"location":"C/11/#1111","title":"11.1.1","text":""},{"location":"C/11/#_1","title":"\u679a\u4e3e","text":""},{"location":"C/11/#_2","title":"\u5e38\u91cf\u7b26\u53f7\u5316","text":"<pre><code>enum colors{red,yellow,green}\n</code></pre> <p>\u679a\u4e3e\u662f\u4e00\u79cd\u7528\u6237\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u5173\u952e\u5b57 <code>enum</code> \u4ee5\u5982\u4e0b\u8bed\u6cd5\u6765\u58f0\u660e\uff1a</p> <pre><code>enum \u679a\u4e3e\u7c7b\u578b\u540d\u5b57{\u540d\u5b570\uff0c\u2026\u2026\uff0c \u540d\u5b57n};\n</code></pre> <pre><code>enum color{red ,yellow,green};\nvoid f(enum color c);\nint main(void) {\n    enum color t=red;\n\n    scanf(\"%d\",&amp;t);\n    f(t);\n\n    return 0;\n}\n\nvoid f(enum color c) {\n    printf(\"%d\\n\",c);\n}\n</code></pre> <ul> <li>\u679a\u4e3e\u91cf\u53ef\u4ee5\u4f5c\u4e3a\u503c</li> <li>\u679a\u4e3e\u7c7b\u578b\u53ef\u4ee5\u8ddf\u4e0a<code>enum</code>\u4f5c\u4e3a\u7c7b\u578b</li> <li>\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u4ee5\u6574\u6570\u6765\u505a\u5185\u90e8\u8ba1\u7b97\u548c\u5916\u90e8\u8f93\u5165\u8f93\u51fa\u7684</li> </ul>"},{"location":"C/11/#_3","title":"\u5957\u8def\uff1a\u81ea\u52a8\u8ba1\u6570\u7684\u679a\u4e3e","text":"<pre><code>enum COLOR{RED,YELLOW,GREEN,NumCOLORS};\n</code></pre> <p>\u8fd9\u6837\u9700\u8981\u904d\u5386\u6240\u6709\u7684\u679a\u4e3e\u91cf\u6216\u8005\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u7528\u679a\u4e3e\u91cf\u505a\u4e0b\u6807\u7684\u6570\u7ec4\u7684\u65f6\u5019\u5c31\u5f88\u65b9\u4fbf\u4e86</p>"},{"location":"C/11/#_4","title":"\u679a\u4e3e\u91cf","text":"<p>\u58f0\u660e\u679a\u4e3e\u91cf\u65f6\u53ef\u4ee5\u6307\u5b9a\u503c</p> <pre><code>enum COLOR{RED=1,YELLOW,GREEN=5};\n</code></pre> <p>Info</p> <ul> <li>\u679a\u4e3e\u6bd4<code>const int</code>\u65b9\u4fbf</li> <li>\u679a\u4e3e\u6bd4\u5b8f\uff08macro\uff09\u597d\uff0c\u56e0\u4e3a\u679a\u4e3e\u6709<code>int</code>\u7c7b\u578b</li> </ul>"},{"location":"C/11/#1112","title":"11.1.2","text":""},{"location":"C/11/#_5","title":"\u7ed3\u6784\u7c7b\u578b","text":""},{"location":"C/11/#_6","title":"\u58f0\u660e\u7ed3\u6784\u7c7b\u578b","text":"<pre><code>struct date{\n    int month;\n    int day;\n    int year;\n};//\u5e38\u89c1\u9519\u8bef\uff1a\u6f0f\u6389\u672b\u5c3e\u7684\u5206\u53f7\n</code></pre> <p>Tip</p> <p>\u548c\u672c\u5730\u53d8\u91cf\u4e00\u6837\uff0c\u5728\u51fd\u6570\u5185\u90e8\u58f0\u660e\u7684\u7ed3\u6784\u7c7b\u578b\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u6240\u4ee5\u901a\u5e38\u5728\u51fd\u6570\u5916\u90e8\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u88ab\u591a\u4e2a\u51fd\u6570\u6240\u4f7f\u7528\u4e86</p> <pre><code>struct date {\n    int year;\n    int month;\n    int day;\n};\n\nint main(void) {\n    struct date today;//\u7c7b\u578b\u662fstruct date\uff0c\u540d\u79f0\u53ebtoday\n    today.day = 10;\n    today.month = 12;\n    today.year = 2001;\n\n    printf(\"Today's date is %i-%i-%i.\\n\",today.year,today.month,today.day);\n    return 0;\n}\n</code></pre>"},{"location":"C/11/#_7","title":"\u58f0\u660e\u7ed3\u6784\u7684\u5f62\u5f0f","text":""},{"location":"C/11/#1","title":"\u2460","text":"<pre><code>struct point{\n    int x;\n    int y;\n};\n\nstruct point p1,p2;\n//p1\u548cp2\u90fd\u662fpoint\uff0c\u91cc\u9762\u6709x\u548cy\u7684\u503c\n</code></pre>"},{"location":"C/11/#2","title":"\u2461","text":"<pre><code>struct{\n    int x;\n    int y;\n}p1,p2;\n//p1\u548cp2\u90fd\u662f\u4e00\u79cd\u65e0\u540d\u7ed3\u6784\uff0c\u91cc\u9762\u6709x\u548cy\n</code></pre>"},{"location":"C/11/#3","title":"\u2462","text":"<pre><code>struct point{\n    int x;\n    int y;\n}p1,p2;\n//p1\u548cp2\u90fd\u662fpoint\uff0c\u91cc\u9762\u6709x\u548cy\u7684\u503ct\n</code></pre> <p>Note</p> <p>\u5bf9\u4e8e\u7b2c\u4e00\u548c\u7b2c\u4e09\u79cd\u5f62\u5f0f\uff0c\u90fd\u58f0\u660e\u4e86\u7ed3\u6784point\u3002\u4f46\u662f\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u6ca1\u6709\u58f0\u660epoint,\u53ea\u662f\u5b9a\u4e49\u4e86\u4e24\u4e2a\u53d8\u91cf</p>"},{"location":"C/11/#_8","title":"\u7ed3\u6784\u7684\u521d\u59cb\u5316","text":"<pre><code>struct date today={07,31,2024};\nstruct date today2={.month=7,.year=2024}\n//\u4e0d\u8d4b\u503c\u9ed8\u8ba4\u521d\u59cb\u662f0\n</code></pre>"},{"location":"C/11/#_9","title":"\u7ed3\u6784\u6210\u5458","text":"<p>\u6570\u7ec4 vs \u7ed3\u6784</p> <ul> <li>\u6570\u7ec4\u7528<code>[]</code>\u8fd0\u7b97\u7b26\u548c\u4e0b\u6807\u8bbf\u95ee\u5176\u6210\u5458</li> <li> <p>e.g.<code>a[0]=10</code></p> </li> <li> <p>\u7ed3\u6784\u7528<code>.</code>\u8fd0\u7b97\u7b26\u548c\u540d\u5b57\u8bbf\u95ee\u5176\u6210\u5458</p> </li> <li>e.g.<code>today.day</code></li> </ul>"},{"location":"C/11/#_10","title":"\u7ed3\u6784\u8fd0\u7b97","text":"<p>\u6570\u7ec4\u65e0\u6cd5\u505a\u5230</p> <pre><code>p1 =(struct point){5,10};//p1.x=5,p1.y=10\np1 =p2;                  //p1.x=p2.x ; p1.y=p2.y\n</code></pre>"},{"location":"C/11/#_11","title":"\u7ed3\u6784\u6307\u9488","text":"<p>\u548c\u6570\u7ec4\u4e0d\u4e00\u6837\uff0c\u7ed3\u6784\u53d8\u91cf\u540d\u5b57\u5e76\u4e0d\u662f\u7ed3\u6784\u53d8\u91cf\u7684\u5730\u5740\uff0c==\u5fc5\u987b==\u4f7f\u7528<code>&amp;</code>\u8fd0\u7b97\u7b26</p> <pre><code>struct date *pDate =&amp;today;\n</code></pre>"},{"location":"C/11/#1113","title":"11.1.3","text":""},{"location":"C/11/#_12","title":"\u7ed3\u6784\u4e0e\u51fd\u6570","text":"<pre><code>int numberOfDays(struct date d);\n</code></pre> <p>\u6574\u4e2a\u7ed3\u6784\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u7684\u503c\u4f20\u5165\u51fd\u6570</p> <p>\u8fd9\u65f6\u5019\u662f\u5728\u51fd\u6570\u5185\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u53d8\u91cf\uff0c\u5e76\u590d\u5236\u8c03\u7528\u8005\u7684\u7ed3\u6784\u7684\u503c</p>"},{"location":"C/11/#_13","title":"\u8f93\u5165\u7ed3\u6784","text":"<p>\u6ca1\u6709\u76f4\u63a5\u7684\u65b9\u5f0f\u53ef\u4ee5\u4e00\u6b21scanf\u4e00\u4e2a\u7ed3\u6784</p> <p>\u2192\u5728\u8fd9\u4e2a\u8f93\u5165\u51fd\u6570\u4e2d\uff0c\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u7ed3\u6784\u53d8\u91cf\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7ed3\u6784\u8fd4\u56de\u7ed9\u8c03\u7528\u8005</p>"},{"location":"C/11/#_14","title":"\u7ed3\u6784 \u6307\u9488 \u4f5c\u4e3a\u53c2\u6570","text":"Quote <p>\"If a large structure is to be passed to a function, it is generally more efficient to pass a pointer than to copy the whole structure\"</p> <p>\u200b                                                                                       \u2013K&amp;R(p.131)</p> <pre><code>struct date *p =&amp;myday;\n\n(*p).month=12;//\u2460\np-&gt;month=12;//\u2461\n</code></pre> <p>\u7528<code>-&gt;</code>\u8868\u793a\u6307\u9488\u6240\u6307\u7684\u7ed3\u6784\u53d8\u91cf\u4e2d\u7684\u6210\u5458</p>"},{"location":"C/2/","title":"2","text":"<ul> <li>2<ul> <li>2.1.2<ul> <li>\u53d8\u91cf\u5b9a\u4e49</li> <li>\u5f62\u5f0f</li> <li>\u4fdd\u7559\u5b57</li> </ul> </li> <li>2.1.3<ul> <li>\u53d8\u91cf\u521d\u59cb\u5316\u3001\u8d4b\u503c</li> </ul> </li> <li>2.1.4<ul> <li>\u53d8\u91cf\u8f93\u5165</li> </ul> </li> <li>2.1.5<ul> <li>\u5e38\u91cf</li> </ul> </li> <li>2.1.6<ul> <li>\u6d6e\u70b9\u6570</li> <li>\u5bf9\u6bd4</li> </ul> </li> <li>2.2.1<ul> <li>\u8868\u8fbe\u5f0f</li> </ul> </li> <li>2.2.2<ul> <li>\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7</li> <li>\u4f18\u5148\u7ea7\u8868\u683c</li> </ul> </li> <li>2.2.3<ul> <li>\u4ea4\u6362\u53d8\u91cf</li> </ul> </li> <li>2.2.4<ul> <li>\u590d\u5408\u8d4b\u503c<ul> <li>\u9012\u589e/\u9012\u51cf\u8fd0\u7b97\u7b26\uff08++\uff0c--\uff09</li> <li>\u524d\u7f00/\u540e\u7f00</li> </ul> </li> </ul> </li> <li>2.2.5<ul> <li>Leetcode\u7f51\u7ad9\u4f7f\u7528</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/2/#2","title":"2","text":""},{"location":"C/2/#212","title":"2.1.2","text":""},{"location":"C/2/#_1","title":"\u53d8\u91cf\u5b9a\u4e49","text":"<p>e.g. \u9700\u6c42\uff1a\u6709\u5730\u65b9\u653e\u6570\u5b57\uff1b\u6709\u529e\u6cd5\u8f93\u5165\u6570\u5b57\uff1b\u8f93\u5165\u7684\u6570\u5b57\u80fd\u8fdb\u884c\u8fd0\u7b97</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    int change = 100-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n</code></pre>"},{"location":"C/2/#_2","title":"\u5f62\u5f0f","text":"<p>&lt;\u7c7b\u578b\u540d\u79f0&gt;&lt;\u53d8\u91cf\u540d\u79f0&gt;</p> Danger <p>\u4e0d\u80fd\u6570\u5b57\u5f00\u5934</p> <pre><code>int price\nint amount\nint change\n\u2026\u2026\u2026\u2026\n</code></pre>"},{"location":"C/2/#_3","title":"\u4fdd\u7559\u5b57","text":"<pre><code>auto, break, case, char,const,\ncontinue, default,do,double,\nelse, enum,extern,float, for,\ngoto, if, int, long, register, return,\nshort,signed, sizeof,static,\nstruct,switch,typedef,union,\nunsigned, void, volatile, while\n    \u2026\u2026\u2026\u2026\n</code></pre>"},{"location":"C/2/#213","title":"2.1.3","text":""},{"location":"C/2/#_4","title":"\u53d8\u91cf\u521d\u59cb\u5316\u3001\u8d4b\u503c","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    int change = 100-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n\n// \u5728C99\u6807\u51c6\u4e0b\u53ef\u4ee5\u968f\u5904\u5b9a\u4e49\u53d8\u91cf\uff0c ANSI-C\u5219\u4e0d\u884c\n</code></pre> <pre><code>scanf(\"%d\", &amp;price);\n#\u8bfb\u5165\u4e0b\u4e00\u4e2a\u6574\u6570\u8d4b\u503c\u7ed9price\n</code></pre> <p>Note</p> <p>a=b\u4e0eb=a\u662f\u4e0d\u540c\u7684\u8d4b\u503c\u8bed\u53e5</p> <p>\u6240\u6709\u53d8\u91cf\u90fd\u8981\u5148\u5b9a\u4e49\u521d\u59cb\u503c</p> <pre><code>int main()\n{\n    int i=0;\n    int j=0;\n    j=i+10;\n    printf(\"%d j: \\n\",j);\n\n\n    return 0;\n\n}\n</code></pre>"},{"location":"C/2/#214","title":"2.1.4","text":""},{"location":"C/2/#_5","title":"\u53d8\u91cf\u8f93\u5165","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int a=0;\n    int b=0;\n\n    scanf(\"hello%d %d\",&amp;a, &amp;b);\n    printf(\"%d %d\\n\",a,b);\n\n    return 0;\n}\n//\u51fa\u73b0\u5728scanf\u4e2d\u7684\u90e8\u5206\u5fc5\u987b\u5728\u8f93\u5165\u65f6\u8f93\u5165\n</code></pre>"},{"location":"C/2/#215","title":"2.1.5","text":""},{"location":"C/2/#_6","title":"\u5e38\u91cf","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    const int AMOUNT=100;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    int change = AMOUNT-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n//const\u662f\u4fee\u9970\u7b26\uff0c\u5728int\u524d\u9762\uff0c\u4e14\u4e00\u65e6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u4fee\u6539\n</code></pre> <p>try\uff1a\u8ba9\u7528\u6237\u53ef\u4ee5\u8f93\u5165AMOUNT\u600e\u4e48\u529e\uff1f</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    int amount=0;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    printf(\"Enter Amount:\");\n    scanf(\"%d\",&amp;amount);\n\n    int change = amount-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n</code></pre>"},{"location":"C/2/#216","title":"2.1.6","text":""},{"location":"C/2/#_7","title":"\u6d6e\u70b9\u6570","text":"<ul> <li>\u7f8e\u56fd\u4f7f\u7528\u82f1\u5236\u8ba1\u91cf\u5355\u4f4d\uff0c\u4e60\u60ef\u7528\u51e0\u5c3a\u51e0\u5bf8\uff08\u82f1\u5c3a\u82f1\u5bf8\uff09\u6765\u62a5\u81ea\u5df1\u7684\u8eab\u9ad8\u3002\u5982\u679c\u9047\u5230\u4e00\u4e2a\u7f8e\u56fd\u4eba\u544a\u8bc9\u4f60\u4ed6\u662f5\u82f1\u5c3a7\uff0c\u4ed6\u7684\u8eab\u9ad8\u5e94\u8be5\u662f\u4e00\u7c73\u51e0\u5462\uff1f\u2192\uff085+7\u00f712\uff09\u00d70.3048=1.7018\u7c73</li> </ul> <p><pre><code>int main()\n{\n    int foot=0;\n    int inch=0;\n    printf(\"Please enter the foot:\");\n    scanf(\"%d\",&amp;foot);\n\n    printf(\"PLease enter the inch:\");\n    scanf(\"%d\",&amp;inch);\n\n    printf(\"The height is:%d\\n\",(foot+inch/12)*0.3048);\n\n    return 0;\n}\n//\u6709\u95ee\u9898\u56e0\u4e3a\u7c7b\u578b\u662fint\n\n//\u6539\u6b63\u5982\u4e0b\nint main()\n{\n    double foot;\n    double inch;\n    printf(\"Please enter the foot:\");\n    scanf(\"%lf\",&amp;foot);\n\n    printf(\"PLease enter the inch:\");\n    scanf(\"%lf\",&amp;inch);\n\n    printf(\"The height is:%f\\n\",(foot+inch/12)*0.3048);\n\n    return 0;\n}\n//\u8f93\u5165\u8981\u6539\u6210scanf(\"%lf\",\u2026\u2026)\n//\u6253\u5370\u8981\u6539\u6210printf(\"%f\")\n</code></pre> \u518d\u4e3e\u4e00\u4f8b <pre><code>int main() {\n\n    printf(\"%d\\n\",10/3*3);\n    return 0;\n\n}\n//\u6539\u6b63\u5982\u4e0b\nint main() {\n\n    printf(\"%f\\n\",10/3*3);\n    return 0;\n\n}\n</code></pre></p>"},{"location":"C/2/#_8","title":"\u5bf9\u6bd4","text":"\u6574\u6570 \u6d6e\u70b9\u6570 int double/float printf(\"%d\",...) printf(\"%f\",...) scanf(\"%d\",...) scan(\"&amp;lf\",...)"},{"location":"C/2/#221","title":"2.2.1","text":""},{"location":"C/2/#_9","title":"\u8868\u8fbe\u5f0f","text":"<p>\u8fd0\u7b97\u7b26\u3001\u7b97\u5b50</p> <p>e.g.\u8ba1\u7b97\u65f6\u95f4\u5dee</p> <pre><code>//\u7b97\u6210\u5206\u949f\nint main()\n{\n    int hour1;\n    int minute1;\n    int hour2;\n    int minute2;\n\n\n    printf(\"Please enter the first hour and minute:\");\n    scanf(\"%d %d\",&amp;hour1,&amp;minute1);\n\n    printf(\"Please enter the second hour and minute:\");\n    scanf(\"%d %d\",&amp;hour2,&amp;minute2);\n\n    printf(\"%d\",(hour2-hour1)*60+(minute2-minute1));\n\n    return 0;\n}\n//\u7b97\u6210\u5c0f\u65f6\nint main()\n{\n    int hour1;\n    int minute1;\n    int hour2;\n    int minute2;\n\n\n    printf(\"Please enter the first hour and minute:\");\n    scanf(\"%d %d\",&amp;hour1,&amp;minute1);\n\n    printf(\"Please enter the second hour and minute:\");\n    scanf(\"%d %d\",&amp;hour2,&amp;minute2);\n\n    printf(\"%f\",(hour2-hour1)+(minute2-minute1)/60);\n\n    return 0;\n}\n</code></pre>"},{"location":"C/2/#222","title":"2.2.2","text":""},{"location":"C/2/#_10","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7","text":"<p>e.g. \u6c42\u5e73\u5747\u503c</p> <pre><code>int main()\n{\n    int a;\n    int b;\n    printf(\"Enter two integers:\");\n    scanf (\"%d %d\",&amp;a,&amp;b);\n    double c = (a+b)/2.0;\n    printf (\"%f\\n\",c);\n    return 0;\n}\n</code></pre>"},{"location":"C/2/#_11","title":"\u4f18\u5148\u7ea7\u8868\u683c","text":"<p>\u76ee\uff1a\u53c2\u4e0e\u4e00\u6b21\u8fd0\u7b97\u7684\u7b97\u5b50\u6570</p> <p>Info</p> <p>\u5355\u76ee\u548c\u8d4b\u503c\u662f\u81ea\u53f3\u5411\u5de6</p> \u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u8fd0\u7b97 \u7ed3\u5408\u5173\u7cfb \u4e3e\u4f8b 1 + \u5355\u76ee\u4e0d\u53d8 \u81ea\u53f3\u5411\u5de6 a*+b 1 - \u5355\u76ee\u53d6\u8d1f \u81ea\u53f3\u5411\u5de6 a*-b 2 * \u4e58 \u81ea\u5de6\u5411\u53f3 a*b 2 / \u9664 \u81ea\u5de6\u5411\u53f3 a/b 2 % \u53d6\u4f59 \u81ea\u5de6\u5411\u53f3 a%b 3 + \u52a0 \u81ea\u5de6\u5411\u53f3 a+b 3 - \u51cf \u81ea\u5de6\u5411\u53f3 a-b 4 = \u8d4b\u503c \u81ea\u53f3\u5411\u5de6 a=b <p>Note</p> <p>\u8d4b\u503c\u4e5f\u662f\u8fd0\u7b97\uff0c\u4e5f\u6709\u7ed3\u679c</p> <p>a=b=6 &gt; a=(b=6)</p> <p>Warning</p> <p>\u201c\u5d4c\u5165\u5f0f\u8d4b\u503c\u201d\u4e0d\u8981\u7528</p> <pre><code>int a;\nint b;\nint c =1 + (b=a)\n</code></pre>"},{"location":"C/2/#223","title":"2.2.3","text":""},{"location":"C/2/#_12","title":"\u4ea4\u6362\u53d8\u91cf","text":"<pre><code>int main() {\n    int a=5;\n    int b=6;\n    int c=0;\n    c=b;\n    b=a;\n    a=c;\n    printf(\"%d %d\\n\",a,b);\n\n    return 0;\n\n}\n//\u7528\u65ad\u70b9\u8c03\u8bd5\u53ef\u4ee5\u770b\u8fc7\u7a0b\n</code></pre>"},{"location":"C/2/#224","title":"2.2.4","text":""},{"location":"C/2/#_13","title":"\u590d\u5408\u8d4b\u503c","text":"<pre><code>+=\uff0c-=,*=,/=,%=\n</code></pre>"},{"location":"C/2/#-","title":"\u9012\u589e/\u9012\u51cf\u8fd0\u7b97\u7b26\uff08++\uff0c--\uff09","text":"<pre><code>  count++\n\u2192count=count+1\n</code></pre>"},{"location":"C/2/#_14","title":"\u524d\u7f00/\u540e\u7f00","text":"\u8868\u8fbe\u5f0f \u8fd0\u7b97 \u8868\u8fbe\u5f0f\u7684\u503c count++ \u7ed9count\u52a01 count\u539f\u6765\u7684\u503c ++count \u7ed9count\u52a01 count+1\u4ee5\u540e\u7684\u503c count-- \u7ed9count\u51cf1 count\u539f\u6765\u7684\u503c --count \u7ed9count\u51cf1 count-1\u4ee5\u540e\u7684\u503c <pre><code>int main() {\n    int a;\n    a=10;\n    printf(\"a++=%d\\n\",a++);\n    printf(\"a=%d\\n\",a);\n\n    ++a;\n    printf(\"++a=%d\\n\",a);\n    printf(\"a=%d\\n\",a);\n\n    return 0;\n}\n\n\u2192a++=10\n a=11\n ++a=12\n a=12\n</code></pre>"},{"location":"C/2/#225","title":"2.2.5","text":""},{"location":"C/2/#leetcode","title":"Leetcode\u7f51\u7ad9\u4f7f\u7528","text":"<p>Tip</p> <ul> <li>\u770b\u6837\u4f8b\u6570\u636e\u548c\u770b\u9898\u76ee\u4e00\u6837\u91cd\u8981</li> <li>\u4e0d\u8981\u4ea4\u4e92\u7684\u8f93\u51fa</li> <li>\u4e0d\u8981\u68c0\u67e5\u8f93\u5165</li> <li>\u4e25\u683c\u9075\u5b88\u8f93\u51fa\u7684\u683c\u5f0f</li> </ul>"},{"location":"C/3/","title":"3","text":"<ul> <li>3<ul> <li>3.1.2</li> <li>3.1.3</li> <li>3.2.1<ul> <li>\u5224\u65ad\u8bed\u53e5--if</li> <li>\u6761\u4ef6</li> <li>\u4f18\u5148\u7ea7</li> </ul> </li> <li>3.2.3<ul> <li>\u627e\u96f6\u8ba1\u7b97\u5668\uff08\u4f18\u5316\uff09</li> </ul> </li> <li>3.2.4<ul> <li>\u5426\u5219 else \uff08if\uff09</li> </ul> </li> <li>3.2.5</li> <li>3.3.1<ul> <li>\u5d4c\u5957\u7684if-else</li> </ul> </li> <li>3.3.2<ul> <li>\u7ea7\u8054\u7684if/else</li> </ul> </li> <li>3.3.4<ul> <li>\u591a\u8defif/else\u2192switch case</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/3/#3","title":"3","text":""},{"location":"C/3/#312","title":"3.1.2","text":"<p>e.g. BCD\u6570\u662f\u7528\u4e00\u4e2a\u5b57\u8282\u6765\u8868\u8fbe\u4e24\u4f4d\u5341\u8fdb\u5236\u7684\u6570\uff0c\u6bcf\u56db\u4e2a\u6bd4\u7279\u8868\u793a\u4e00\u4f4d\u3002\u6240\u4ee5\u5982\u679c\u4e00\u4e2aBCD\u6570\u662f0x12,\u5b83\u8868\u8fbe\u7684\u5c31\u662f\u5341\u8fdb\u5236\u768412\u3002 \u4f46\u662f\u5c0f\u660e\u6ca1\u5b66\u8fc7BCD,\u628a\u6240\u6709\u7684BCD\u6570\u90fd\u5f53\u4f5c\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u6210\u5341\u8fdb\u5236\u8f93\u51fa\u4e86\u3002\u4e8e\u662fBCD\u76840x12\u88ab\u8f93\u51fa\u6210\u4e86\u5341\u8fdb\u5236\u768418\u4e86\uff01 \u73b0\u5728\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u8bfb\u5165\u8fd9\u4e2a\u9519\u8bef\u7684\u5341\u8fdb\u5236\u6570\uff0c\u7136\u540e\u8f93\u51fa\u6b63\u786e\u7684\u5341\u8fdb\u5236\u6570\u3002\u63d0\u793a\uff1a\u4f60\u53ef\u4ee5\u628a18\u8f6c\u6362\u56de0\u00d712\uff0c\u7136\u540e\u518d\u8f6c\u6362\u56de12\u3002</p> <p>\u8f93\u5165\u683c\u5f0f\uff1a</p> <p>\u200b   \u8f93\u5165\u5728\u4e00\u884c\u4e2d\u7ed9\u51fa\u4e00\u4e2a[0,153]\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u4fdd\u8bc1\u80fd\u8f6c\u6362\u56de\u6709\u6548\u7684BCD\u6570\uff0c\u5c31\u662f\u8bf4\u8fd9\u4e2a\u6574\u6570\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u65f6\u4e0d\u4f1a\u51fa\u73b0A-F\u7684\u6570\u5b57\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f\uff1a</p> <p>\u200b   \u8f93\u51fa\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6570\u3002</p> <pre><code>DEC 18 \nBIN 0001 0010 \nHEX 0x12\nBCD 12\n</code></pre> <pre><code>//\u65b9\u6cd5\u4e00\uff1a\n18/16 \u21921\n18%16 \u21922\n1*10+2=12\n----------------\nint main() {\n    int a;\n    int b;\n    int c;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &amp;a);\n    b=a/16;\n    c=a%16;\n    printf(\"%d\\n\",b*10+c);\n    return 0;\n}\n</code></pre> <pre><code>//\u65b9\u6cd5\u4e8c\uff1a\nprintf(\"%x\",x)\n-----------------\nint main() {\n    int a ;\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&amp;a);\n    printf(\"The number is %x\",a);\n\n    return 0;\n}\n</code></pre> <p>Note</p> <p>%d\uff1a\u5341\u8fdb\u5236\u8f93\u51fa %x\uff1a\u5341\u516d\u8fdb\u5236\u8f93\u51fa</p>"},{"location":"C/3/#313","title":"3.1.3","text":"<pre><code>//0 O\u6709\u6240\u4e0d\u540c\n</code></pre>"},{"location":"C/3/#321","title":"3.2.1","text":""},{"location":"C/3/#-if","title":"\u5224\u65ad\u8bed\u53e5--if","text":"<pre><code>int main() {\n    int hour1,minute1,hour2,minute2;\n    printf(\"Enter the first time: \");\n    scanf(\"%d:%d\",&amp;hour1,&amp;minute1);\n    printf(\"Enter the second time: \");\n    scanf(\"%d:%d\",&amp;hour2,&amp;minute2);\n\n    int ih = hour2-hour1;\n    int im =minute2-minute1;\n    //\u5224\u65ad\u5206\u949f\u5dee\u662f\u5426\u5728\u4e00\u5c0f\u65f6\u4ee5\u5185\n    if(im&lt;0) {\n        im=60+im;\n        ih --;\n\n    }\n    printf(\"%d,%d\",ih,im);\n\n    return 0;\n}\n------------------\n//\u6539\u8fdb\uff0c\u7528\u5224\u65ad\u62d2\u7edd\u5206\u949f\u5927\u4e8e60\u7684\u8f93\u5165\n    int main() {\n    int hour1,minute1,hour2,minute2;\n    printf(\"Enter the first time: \");\n    scanf(\"%d:%d\",&amp;hour1,&amp;minute1);\n    printf(\"Enter the second time: \");\n    scanf(\"%d:%d\",&amp;hour2,&amp;minute2);\n\n    int ih = hour2-hour1;\n    int im =minute2-minute1;\n\n    if (minute1,minute2&gt;60) {\n        printf(\"Time error!!!\");\n    }\n    else if (im&lt;0) {\n\n        im=60+im;\n        ih --;\n    }\n    printf(\"%d,%d\",ih,im);\n\n\n\n    return 0;\n}\n</code></pre>"},{"location":"C/3/#_1","title":"\u6761\u4ef6","text":"\u8fd0\u7b97\u7b26 \u610f\u4e49 == \u76f8\u7b49 != \u4e0d\u76f8\u7b49 &gt; \u5927\u4e8e &gt;= \u5927\u4e8e\u6216\u7b49\u4e8e &lt; \u5c0f\u4e8e &lt;= \u5c0f\u4e8e\u6216\u7b49\u4e8e <p>Abstract</p> <ul> <li>\u5173\u7cfb\u8fd0\u7b97\u7ed3\u679c\u53ea\u67091/0</li> <li>==/!=\u8fd0\u7b97\u4f18\u5148\u7ea7\u6bd4\u5176\u4ed6\u5173\u7cfb\u8fd0\u7b97\u7b26\u66f4\u4f4e</li> </ul>"},{"location":"C/3/#_2","title":"\u4f18\u5148\u7ea7","text":"<p>\u8d4b\u503c\u8fd0\u7b97&lt;\u5173\u7cfb\u8fd0\u7b97&lt;\u7b97\u672f\u8fd0\u7b97</p> <pre><code>//\u9a8c\u8bc1\u7a0b\u5e8f\nprintf(\"%d\\n\",7&gt;=3+4)\n    \u2192[output]=1\n</code></pre>"},{"location":"C/3/#323","title":"3.2.3","text":""},{"location":"C/3/#_3","title":"\u627e\u96f6\u8ba1\u7b97\u5668\uff08\u4f18\u5316\uff09","text":"<pre><code>int main() {\n    double price;\n    double bill;\n    printf(\"Please enter your price:\");\n    scanf(\"%lf\", &amp;price);\n    printf(\"Please enter your bill:\");\n    scanf(\"%lf\", &amp;bill);\n    //\u5224\u65ad\u4ef7\u683c\u548c\u7968\u9762\n    if (price &lt; bill) {\n        printf(\"Your price is less than your bill\");\n    }\n    else if (bill&lt;price) {\n        printf(\"Your bill change: %f\", price-bill);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C/3/#324","title":"3.2.4","text":""},{"location":"C/3/#else-if","title":"\u5426\u5219 else \uff08if\uff09","text":""},{"location":"C/3/#325","title":"3.2.5","text":"<p>if\u8bed\u53e5\u903b\u8f91\uff1a\u2460if\u540e\u6709\u4e00\u4e2a\u62ec\u53f7\uff0c\u82e5\u62ec\u53f7\u5185\u6210\u7acb\u2192\u6267\u884c\u5927\u62ec\u53f7\u5185\u8bed\u53e5</p> <p>\u200b           \u2461if\u540e\u6709\u4e00\u4e2a\u62ec\u53f7\uff0c\u62ec\u53f7\u5185\u6210\u7acb\u2192\u65e0\u5927\u62ec\u53f7\u2192\u53ea\u6267\u884cif\u540e\u9762\u4e00\u53e5</p> <pre><code>//\u5b9e\u4f8b\nint main() {\n    const int PASS=60;\n    int score;\n    printf(\"Please enter your score:\\n\");\n    scanf(\"%d\",%score);\n\n    if (score&lt;PASS)\n        printf(\"You failed\\n\");\n    else\n        printf(\"You passed\\n\");\n\n    return 0;\n}\n</code></pre> <p>Note</p> <p>if\u540e\u65e0\u5927\u62ec\u53f7\u7684\u8bdd\uff0c\u672c\u53e5\u7ed3\u5c3e\u6ca1\u6709\uff1b</p>"},{"location":"C/3/#331","title":"3.3.1","text":""},{"location":"C/3/#if-else","title":"\u5d4c\u5957\u7684if-else","text":"<p>e.g. \u5224\u65ad\u4e09\u4e2a\u6570\u4e2d\u6700\u5927\u7684</p> <pre><code>int main() {\n    int a,b,c;\n    printf(\"Enter three numbers:\");\n    scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c);\n    if (a&gt;b) {\n        if (a&gt;c) {\n            printf(\"%d is max\",a);\n        }\n        else {\n            printf(\"%d is max\",c);\n        }\n    }\n\n    if (a&lt;b) {\n        if (b&gt;c) {\n            printf(\"%d is max\",b);\n        }\n        else {\n            printf(\"%d is max\",c);\n        }\n    }\n\n    return 0;\n}\n</code></pre> <p>Warning</p> <p>else\uff08\u65e0\u5927\u62ec\u53f7\u7684\u60c5\u51b5\u4e0b\uff09\u603b\u4e0e\u6700\u8fd1\u7684if\u914d\u5bf9</p> <p>C\u8bed\u8a00\u4e2d\u7f29\u8fdb\u4e0d\u8868\u793a\u540c\u4e00\u5c42\u7ea7\uff0c\u4f46\u662f\u6700\u597d\u7f16\u5199\u65f6\u6ce8\u610f\u2192\u4fbf\u4e8e\u9605\u8bfb</p> <p>\u2234\u6700\u597dif/else\u603b\u662f\u7528  { }</p>"},{"location":"C/3/#332","title":"3.3.2","text":""},{"location":"C/3/#ifelse","title":"\u7ea7\u8054\u7684if/else","text":"<pre><code>if(){\n\n}\nelse if(){\n\n}\nelse(){\n\n}\n</code></pre> <p>\u5355\u4e00\u51fa\u53e3\u7075\u6d3b\u6027</p>"},{"location":"C/3/#334","title":"3.3.4","text":""},{"location":"C/3/#ifelseswitch-case","title":"\u591a\u8defif/else\u2192switch case","text":"<pre><code>//\u683c\u5f0f\nswitch case(\u63a7\u5236\u8868\u8fbe\u5f0f){\n    case constant:\n    \u2026\u2026\n    case constant:\n    \u2026\u2026\n    default:\n    \u2026\u2026\n\n}\n//\u63a7\u5236\u8868\u8fbe\u5f0f\u7684\u8f93\u5165\u53ea\u80fd\u662f\u201c\u6574\u6570\u201d\n//const \u5fc5\u987b\u662f\u6574\u6570\uff0c\u6216\u8005\u6574\u6570\u8ba1\u7b97\u8868\u8fbe\u5f0f\n//switch-case\u5fc5\u987b\u8981\u6709\u201cbreak\u201d\uff0cif\u4e0d\u9700\u8981\n</code></pre> <pre><code>//\u7ea7\u8054\u7684\nint main() {\n\n    int type;\n    printf(\"type a number:\");\n    scanf(\"%d\",&amp;type);\n    if (type==1)\n        printf(\"Good morning!\");\n    else if (type==2)\n        printf(\"Good afternoon!\");\n    else if (type==3)\n        printf(\"Good evening!\");\n    else if (type==4)\n        printf(\"Good night!\");\n\n    return 0;\n}\n//\u591a\u8def\u7684\nint main() {\n     int type;\n\n     printf(\"Enter a number:\");\n     scanf(\"%d\", &amp;type);\n  switch (type) {\n      case 1:\n          printf(\"Good morning!\");\n      break;\n      case 2:\n          printf(\"Good afternoon!\");\n      break;\n      case 3:\n          printf(\"Good evening!\");\n      break;\n      case 4:\n          printf(\"Good night!\");\n      break;\n      default:\n          printf(\"Wrong number!\");\n      break;\n  }\n     return 0;\n }\n</code></pre> <p>e.g.\u6210\u7ee9\u4e92\u8f6c</p> <pre><code>int main() {\n    int score;\n    int grade;\n    printf(\"Enter your score: \");\n    scanf(\"%d\", &amp;score);\n    grade=score/10;\n    switch(grade) {\n        case 10:\n        case 9:\n            printf(\"A\\n\");\n        break;\n        case 8:\n            printf(\"B\\n\");\n        break;\n        case 7:\n            printf(\"C\\n\");\n        break;\n        case 6:\n            printf(\"D\\n\");\n        break;\n        default:\n            printf(\"F\\n\");\n        break;\n    }\n      return 0;\n}\n</code></pre>"},{"location":"C/4/","title":"4","text":"<ul> <li>4<ul> <li>4.1.1<ul> <li>\u5faa\u73af</li> <li>\u9a8c\u8bc1</li> </ul> </li> <li>4.1.2</li> <li>4.1.3<ul> <li>do-while\u5faa\u73af</li> </ul> </li> <li>4.2.2<ul> <li>\u731c\u6570\u6e38\u620f<ul> <li>\u751f\u6210\u968f\u673a\u6570 rand()</li> </ul> </li> </ul> </li> <li>4.2.3<ul> <li>\u7b97\u5e73\u5747\u6570</li> </ul> </li> <li>4.2.4<ul> <li>\u6574\u6570\u7684\u5206\u89e3\uff08\u9006\u5e8f\uff09</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/4/#4","title":"4","text":""},{"location":"C/4/#411","title":"4.1.1","text":""},{"location":"C/4/#_1","title":"\u5faa\u73af","text":"<p>e.g. \u6570\u4f4d\u5224\u65ad</p> <pre><code>int main() {\n   int a;\n   int digits=0;\n\n   printf(\"Enter a number:\");\n   scanf(\"%d\",&amp;a);\n//\u4ee5\u4e0b\u4e24\u53e5\u5199\u5728\u5faa\u73af\u5916\u662f\u4e3a\u4e86\u5904\u7406\u201c0\u201d\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5c06\u4f1a\u8f93\u51fa0\u4f4d\u6570\n    digits++;\n    a=a/10;\n\n   while (a&gt;0) {\n     digits++;\n       a=a/10;\n }\n printf(\"%d\",digits);\n\n    return 0;\n}\n//\u7535\u8111\u4e2d\u6709\u6570\u4f4d\u9650\u5236\uff0c\u592a\u5927\u7684\u6570\u5b57\u4e0d\u884c\n</code></pre>"},{"location":"C/4/#_2","title":"\u9a8c\u8bc1","text":"<p>\u6d4b\u8bd5\u7a0b\u5e8f\u5e38\u4f7f\u7528==\u8fb9\u754c\u6570\u636e==,\u5982\u6709\u6548\u8303\u56f4\u4e24\u7aef\u7684\u6570\u636e\u3001\u7279\u6b8a\u7684\u500d\u6570\u7b49 \u4e2a\u4f4d\u6570\uff1b \u8d1f\u6570\uff1b 10; 0\uff1b \u2026\u2026</p>"},{"location":"C/4/#412","title":"4.1.2","text":"<p>\u5faa\u73af\u4f53\u5185\u8981\u6709\u6539\u53d8\u6761\u4ef6\u7684\u673a\u4f1a\u2192\u4e0d\u7136\u4f1a\u53d8\u6210\u6b7b\u5faa\u73af</p> <p>while\u5faa\u73af\u5148\u5224\u65ad\u6761\u4ef6</p> <p>Tip</p> <p>\u2460\u53ef\u4ee5\u4f7f\u7528==\u8c03\u8bd5==\u6765\u68c0\u67e5\u4ee3\u7801</p> <p>\u2461\u53ef\u4ee5\u5728\u9002\u5f53\u7684\u5730\u65b9\u4f7f\u7528 printf</p>"},{"location":"C/4/#413","title":"4.1.3","text":""},{"location":"C/4/#do-while","title":"do-while\u5faa\u73af","text":"do-while\u5faa\u73af while\u5faa\u73af \u5148\u8fdb\u5165\u5faa\u73af\u518d\u5224\u65ad\u6761\u4ef6 \u5148\u5224\u65ad\u6761\u4ef6\u518d\u8fdb\u5165\u5faa\u73af <pre><code>int main(){\n    int a;\n    int digits=0;\n    printf(\"Enter a number:\");\n    scanf(\"%d\\n\",a);\n\n    do{\n        x=x/10;\n        digits++;\n    }while(a&gt;0);\n\n    return 0;\n}\n</code></pre>"},{"location":"C/4/#422","title":"4.2.2","text":""},{"location":"C/4/#_3","title":"\u731c\u6570\u6e38\u620f","text":""},{"location":"C/4/#rand","title":"\u751f\u6210\u968f\u673a\u6570 rand()","text":"<pre><code>int main(){\n    srand(time(0));\n    int a =rand();\n    printf(\"%d\\n\",a)\n    return 0;\n}\n---------------------&gt;\nint main(){\n    srand(time(0));\n    int a =rand();\n    //\u4fdd\u8bc1a\u5728100\u4ee5\u5185\n    a=a%100\n    printf(\"%d\\n\",a)\n    return 0;\n}\n</code></pre>"},{"location":"C/4/#423","title":"4.2.3","text":""},{"location":"C/4/#_4","title":"\u7b97\u5e73\u5747\u6570","text":"<pre><code>int main() {\n    int x;\n    int sum=0;\n    int count=0;\n    int number[100];\n\n    scanf(\"%d\",&amp;x);\n    while(x!=-1) {\n        number[count]=x;\n        sum=sum+x;\n        count++;\n        scanf(\"%d\",&amp;x);\n    }\n\n    if(count&gt;0){\n\n        printf(\"The average of all numbers is %f\\n\", 1.0*sum/count);\n        int i;\n        printf(\"%d\\t\",number[i]);\n        for(i=0;i&lt;count;i++){\n\n            if (number[i]&gt;sum/count){\n                printf(\"%d\\n\",number[i]);\n            }\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"C/4/#424","title":"4.2.4","text":""},{"location":"C/4/#_5","title":"\u6574\u6570\u7684\u5206\u89e3\uff08\u9006\u5e8f\uff09","text":"<p>\u4e00\u4e2a\u6574\u6570\u662f\u75311\u81f3\u591a\u4f4d\u6570\u5b57\u7ec4\u6210\u7684,\u5982\u4f55\u5206\u89e3\u51fa\u6574\u6570\u7684\u5404\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\uff0c\u7136\u540e\u52a0\u4ee5\u8ba1\u7b97 \u5bf9\u4e00\u4e2a\u6574\u6570\u505a%10\u7684\u64cd\u4f5c,\u5c31\u5f97\u5230\u5b83\u7684\u4e2a\u4f4d\u6570; \u5bf9\u4e00\u4e2a\u6574\u6570\u505a/10\u7684\u64cd\u4f5c\uff0c\u5c31\u53bb\u6389\u4e86\u5b83\u7684\u4e2a\u4f4d\u6570\uff1b \u7136\u540e\u518d\u5bf92\u7684\u7ed3\u679c\u505a%10\uff0c\u5c31\u5f97\u5230\u539f\u6765\u6570\u7684\u5341\u4f4d\u6570\u4e86 \u4f9d\u6b64\u7c7b\u63a8</p> <pre><code>int main(){\n    int  x;\n    int  reverse=0;\n    int  digits=0;\n    printf(\"Enter a number:\");\n    scanf(\"%d\",&amp;x);\n\n    while(x&gt;0) {\n        digits=x%10;\n        x=x/10;\n        reverse=reverse*10+digits;\n        printf(\"%d,%d,%d\\n\",digits,x,reverse);//\u6d4b\u8bd5\u8bed\u53e5\n    }\nprintf(\"The reverse is: %d\",reverse);//\u9006\u5e8f\u8f93\u51fa\nreturn 0;\n}\n</code></pre>"},{"location":"C/5/","title":"5","text":"<ul> <li>5<ul> <li>5.1.1<ul> <li>for\u5faa\u73af</li> </ul> </li> <li>5.1.2<ul> <li>\u5faa\u73af\u7684\u9009\u62e9</li> </ul> </li> <li>5.2.1<ul> <li>\u5faa\u73af\u63a7\u5236<ul> <li>break v.s. continue</li> </ul> </li> </ul> </li> <li>5.2.2<ul> <li>\u5faa\u73af\u5d4c\u5957</li> </ul> </li> <li>5.2.3<ul> <li>\u8df3\u51fa\u5faa\u73af \uff08goto\uff09</li> </ul> </li> <li>5.3.1<ul> <li>\u6c42\u524dn\u9879\u548c</li> </ul> </li> <li>5.3.2<ul> <li>\u6574\u6570\u5206\u89e3\uff08\u6b63\u5e8f\uff09</li> </ul> </li> <li>5.3.3<ul> <li>\u6700\u5927\u516c\u7ea6\u6570</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/5/#5","title":"5","text":""},{"location":"C/5/#511","title":"5.1.1","text":""},{"location":"C/5/#for","title":"for\u5faa\u73af","text":"<pre><code>//\u7528while\u8bed\u53e5\nint main() {\n    int n;\n    int count=0;\n    int factorial=1;\n    printf(\"Enter the number of factorial: \");\n    scanf(\"%d\", &amp;n);\n    while(count&lt;n) {\n        count ++;\n        factorial=factorial*count;\n    }\n\n    printf(\"The factorial is %d\",factorial);\n    return 0;\n}\n//\u7528for\u8bed\u53e5\nint main() {\n\n int n;\n int fact=1;\n int i=1;\n printf(\"Enter the number of factorial: \");\n scanf(\"%d\", &amp;n);\n//\u2460\u4ece1\u5f00\u59cb\u4e58\nfor(i=1;i&lt;=n;i++) {\n fact=fact*i;\n}\n//\u2461\u4ecen\u5f00\u59cb\u4e58\nfor(i=n;i&gt;=2;i--){\n    fact=fact*i\n}\n\n printf(\"The factorial of %d is %d\",n,fact);\n\n return 0;\n}\n</code></pre> <pre><code>for (i=1\u2460 ; i&lt;=n \u2461; i++\u2462 )\n/*\n\u2460\u521d\u59cb\u6761\u4ef6\n\u2461\u5faa\u73af\u7ee7\u7eed\u7684\u6761\u4ef6\n\u2462\u5faa\u73af\u6bcf\u8f6e\u8981\u505a\u7684\u4e8b\u60c5\n */\n</code></pre>"},{"location":"C/5/#512","title":"5.1.2","text":""},{"location":"C/5/#_1","title":"\u5faa\u73af\u7684\u9009\u62e9","text":"<p>for==while</p> <p>Warning</p> <p>for\u5faa\u73af\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u662f\u5206\u53f7\u4e0d\u80fd\u7701\u7565</p> <p>for(\uff1b\u6761\u4ef6\uff1b)==while\uff08\u6761\u4ef6\uff09</p> <ul> <li>for\u5faa\u73af</li> <li>while\u5faa\u73af</li> <li>do-while\u5faa\u73af</li> </ul> <p>Tip</p> <p>\u6709\u56fa\u5b9a\u6b21\u6570\uff0c\u7528for</p> <p>\u5fc5\u987b\u6267\u884c\u4e00\u6b21\uff0c\u7528do-while</p> <p>\u5176\u4ed6\u60c5\u51b5\uff0c\u7528while</p>"},{"location":"C/5/#521","title":"5.2.1","text":""},{"location":"C/5/#_2","title":"\u5faa\u73af\u63a7\u5236","text":"<pre><code>int main(){\n\n int x;\n int i;\n int isPrime=1;\n scanf(\"%d\",&amp;x);\n\n for(i=2;i&lt;x;i++) {\n    if(x%i==0) {\n     isPrime=0;\n     break;//\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\n    }\n }\n\nif(isPrime==1) {\n printf(\"yes\");\n}else {\n printf(\"no\");\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"C/5/#break-vs-continue","title":"break v.s. continue","text":"<ul> <li> <p>break\uff1a\u8df3\u51fa\u6574\u4e2a\u5faa\u73af</p> </li> <li> <p>continue\uff1a\u8df3\u51fa\u672c\u8f6e\u5faa\u73af\uff0c\u53bb\u4e0b\u4e00\u8f6e\u5faa\u73af</p> </li> </ul> <p>break/continue\u53ea\u80fd\u8df3\u51fa\u672c\u5c42\u5faa\u73af</p>"},{"location":"C/5/#522","title":"5.2.2","text":""},{"location":"C/5/#_3","title":"\u5faa\u73af\u5d4c\u5957","text":"<p>e.g.\u8f93\u51fa100\u4ee5\u5185\u7684\u7d20\u6570</p> <pre><code>int main(){\n\n int x;\n int i;\n\n\n\n for (x=2;x&lt;100;x++) {\n  int isPrime=1;\n       for(i=2;i&lt;x;i++) {\n          if(x%i==0) {\n           isPrime=0;\n           break;\n          }\n       }\n\n       if(isPrime==1) {\n        printf(\"%d\\n\",x);\n       }\n\n }\nreturn 0;\n}\n</code></pre>"},{"location":"C/5/#523","title":"5.2.3","text":""},{"location":"C/5/#goto","title":"\u8df3\u51fa\u5faa\u73af \uff08goto\uff09","text":"<p>e.g.\u51d1\u786c\u5e01\uff1a1\u89d2\u30012\u89d2\u30015\u89d2\u51d1\u51fa10\u5143\u4ee5\u4e0b\u91d1\u989d</p>"},{"location":"C/5/#531","title":"5.3.1","text":""},{"location":"C/5/#n","title":"\u6c42\u524dn\u9879\u548c","text":"\\[ f(n)=1+  \\frac {1}{2}  +   \\frac {1}{3}  + \\frac {1}{4}  +  \\cdots  ++  \\frac {1}{n}   \\]"},{"location":"C/5/#532","title":"5.3.2","text":""},{"location":"C/5/#_4","title":"\u6574\u6570\u5206\u89e3\uff08\u6b63\u5e8f\uff09","text":"<pre><code>/*13425/10000-&gt;1\n13425%10000-&gt;3425\n10000/10-&gt;1000\n\n3425/1000-&gt;3\n3425%1000-&gt;425\n1000/10-&gt;100\n\n^^^^\n*/\n</code></pre> <pre><code>int main() {\n    int x=13425;\n     int div=10000;\n     int n;\n     while(x&gt;0) {\n\n          n=x/div;\n          x=x%div;\n          div=div/10;\n\n          printf(\"%d \",n);\n         }\n\n return 0;\n}\n\n//////////////////////////////\n//\u6539\u8fdb\uff1a\u53ef\u8f93\u5165\u6570\u5b57\u81ea\u52a8\u5224\u65ad\u4f4d\u6570//\n/////////////////////////////\nint main() {\n\n int x;\n int count=0;\n printf(\"Enter a number: \");\n scanf(\"%d\", &amp;x);\n//\u7edf\u8ba1\u4f4d\u6570\n int num=x;\n while(x&gt;0) {\n  x=x/10;\n  count+=1;\n }\n//\u5206\u79bb\u6570\u4f4d\n int div=pow(10,count-1);\n int n=0;\n while(num&gt;0) {\n\n      n=num/div;\n      num=num%div;\n      div=div/10;\n\n  printf(\"%d \",n);\n }\n\n\n return 0;\n}\n</code></pre>"},{"location":"C/5/#533","title":"5.3.3","text":""},{"location":"C/5/#_5","title":"\u6700\u5927\u516c\u7ea6\u6570","text":"<p>\uff081\uff09\u679a\u4e3e\u6cd5</p> <pre><code>int main() {\n    int a,b;\n    int min;\n    printf(\"Enter two numbers:\");\n    scanf(\"%d%d\",&amp;a,&amp;b);\n\n    if(a&gt;b) {\n        min=b;\n    }else {min=a;}\n\n\n    int i=1;\n    int ret=0;\n    for(i=1;i&lt;min;i++) {\n        if(a%i==0) {\n            if(b%i==0) {\n                ret=i;\n            }\n        }\n        if(b%i==0) {\n        }\n\n    }\n\n    printf(\"GCS is %d\",ret);\n\n    return 0;\n}\n</code></pre> <p>\uff082\uff09\u8f97\u8f6c\u76f8\u9664\u6cd5</p> <pre><code>/*\u5982\u679cb\u7b49\u4e8e0\uff0c\u8ba1\u7b97\u7ed3\u675f\uff0ca\u5c31\u662f\u6700\u5927\u516c\u7ea6\u6570\uff1b\n\u5426\u5219\uff0c\u8ba1\u7b97a\u9664\u4ee5b\u7684\u4f59\u6570\uff0c\u8ba9a\u7b49\u4e8eb,\u800cb\u7b49\u4e8e\u90a3\u4e2a\u4f59\u6570\n\u56de\u5230\u7b2c\u4e00\u6b65*/\n</code></pre> a b t 12 18 12 18 12 6 12 6 0 6 0 <pre><code>int main() {\n\n    int a,b;\n    printf(\"Enter two numbers:\\n\");\n    scanf(\"%d %d\",&amp;a,&amp;b);\n\n    if(b==0) {\n        printf(\"%d\",a);\n    }\n    else {\n        while(b!=0) {\n\n            int t = a % b;\n            a=b;\n            b=t;\n        }\n        printf(\"%d\",a);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C/6/","title":"6","text":"<ul> <li>6<ul> <li>6.1.1-6.1.7<ul> <li>\u7f16\u7a0b\u7ec3\u4e60\u89e3\u6790\uff08\u6682\u65f6\u8df3\u8fc7\u2757\u2757\u2757\u2757\uff09</li> </ul> </li> <li>6.2.1<ul> <li>\u6570\u636e\u7c7b\u578b</li> <li>\u5de5\u5177 \uff08sizeof\uff09</li> </ul> </li> <li>6.2.2<ul> <li>\u6574\u6570\u7c7b\u578b</li> </ul> </li> <li>6.2.3<ul> <li>\u6574\u6570\u7684\u5185\u90e8\u8868\u8fbe<ul> <li>*\u4e8c\u8fdb\u5236\u8d1f\u6570</li> </ul> </li> </ul> </li> <li>6.2.4<ul> <li>\u6574\u6570\u7684\u8303\u56f4</li> </ul> </li> <li>6.2.5<ul> <li>\u6574\u6570\u7684\u8f93\u5165\u8f93\u51fa</li> </ul> </li> <li>6.2.6<ul> <li>\u9009\u62e9\u6574\u6570\u7c7b\u578b</li> </ul> </li> <li>6.2.7<ul> <li>\u6d6e\u70b9\u7c7b\u578b</li> </ul> </li> <li>6.2.8<ul> <li>\u6d6e\u70b9\u7684\u7cbe\u5ea6\u548c\u8303\u56f4</li> </ul> </li> <li>6.2.9<ul> <li>\u5b57\u7b26\u7c7b\u578b</li> <li>\u5b57\u7b26\u8ba1\u7b97</li> </ul> </li> <li>6.2.10<ul> <li>\u9003\u9038\u5b57\u7b26</li> <li>\u5236\u8868\u4f4d</li> </ul> </li> <li>6.2.11<ul> <li>\u7c7b\u578b\u8f6c\u6362<ul> <li>\u81ea\u52a8</li> <li>\u5f3a\u5236</li> </ul> </li> </ul> </li> <li>6.3.1<ul> <li>\u903b\u8f91\u7c7b\u578b</li> </ul> </li> <li>6.3.2<ul> <li>\u903b\u8f91\u8fd0\u7b97</li> <li>\u4f18\u5148\u7ea7</li> <li>\u77ed\u8def</li> </ul> </li> <li>6.3.3<ul> <li>\u6761\u4ef6\u8fd0\u7b97/\u9017\u53f7\u8fd0\u7b97<ul> <li>\u6761\u4ef6\u8fd0\u7b97\u7b26<ul> <li>\u5d4c\u5957\u6761\u4ef6\u8868\u8fbe\u5f0f</li> </ul> </li> <li>\u9017\u53f7\u8fd0\u7b97</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"C/6/#6","title":"6","text":""},{"location":"C/6/#611-617","title":"6.1.1-6.1.7","text":""},{"location":"C/6/#_1","title":"\u7f16\u7a0b\u7ec3\u4e60\u89e3\u6790\uff08\u6682\u65f6\u8df3\u8fc7\u2757\u2757\u2757\u2757\uff09","text":""},{"location":"C/6/#621","title":"6.2.1","text":""},{"location":"C/6/#_2","title":"\u6570\u636e\u7c7b\u578b","text":"<ul> <li>C\u8bed\u8a00\u53d8\u91cf\u5fc5\u987b</li> <li>\u63d0\u524d\u5b9a\u4e49</li> <li> <p>\u786e\u5b9a\u7c7b\u578b</p> </li> <li> <p>C++/Java\uff1a\u66f4\u52a0\u5f3a\u8c03\u7c7b\u578b</p> </li> <li>JS/Python/PHP\uff1a\u4e0d\u770b\u91cd\u7c7b\u578b\uff0c\u751a\u81f3\u4e0d\u7528\u4e8b\u5148\u5b9a\u4e49</li> </ul> \u6574\u6570 char\u3001short\u3001int\u3001long\u3001long long \u6d6e\u70b9\u6570 float\u3001double\u3001long double \u903b\u8f91 bool \u6307\u9488 \u81ea\u5b9a\u4e49 <p>Note</p> <p>\u7c7b\u578b\u540d\u79f0\uff1a<code>int\u3001long\u3001double</code> \u8f93\u5165\u8f93\u51fa\u65f6\u7684\u683c\u5f0f\u5316\uff1a<code>%d\u3001%ld\u3001%lf</code> \u6240\u8868\u8fbe\u7684\u6570\u7684\u8303\u56f4\uff1a<code>char &lt; short&lt; int &lt; float &lt;double</code> \u5185\u5b58\u4e2d\u6240\u5360\u636e\u7684\u5927\u5c0f\uff1a1\u4e2a\u5b57\u8282\u523016\u4e2a\u5b57\u8282 \u5185\u5b58\u4e2d\u7684\u8868\u8fbe\u5f62\u5f0f\uff1a\u4e8c\u8fdb\u5236\u6570\uff08\u8865\u7801\uff09\u3001\u7f16\u7801</p>"},{"location":"C/6/#sizeof","title":"\u5de5\u5177 \uff08sizeof\uff09","text":"<ul> <li>\u9759\u6001\u8fd0\u7b97\u7b26</li> </ul> <pre><code>int main() {\n\n int a;\n a=6;\n printf(\"%ld\",sizeof(a++));\n printf(\"%d\",a);//\u8f93\u51fa\u4ecd\u7136\u662f6\uff0c\u524d\u4e00\u53e5\u4e2d\u7684a++\u53ea\u5728\u90a3\u4e00\u53e5\u751f\u6548-&gt;\u9759\u6001\u8fd0\u7b97\n\n return 0;\n}\n</code></pre>"},{"location":"C/6/#622","title":"6.2.2","text":""},{"location":"C/6/#_3","title":"\u6574\u6570\u7c7b\u578b","text":"\u7c7b\u578b \u5927\u5c0f char 1\u5b57\u8282\uff088\u6bd4\u7279\uff09 short short: 2\u5b57\u8282 int \u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668(CPU) ,\u901a\u5e38\u7684\u610f\u4e49\u662f\u201c1\u4e2a\u5b57\u201d long \u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668(CPU) ,\u901a\u5e38\u7684\u610f\u4e49\u662f\u201c1\u4e2a\u5b57\u201d long long 8\u5b57\u8282 <p>Note</p> <p>int\u5c31\u662f\u7528\u6765\u8868\u793a\u5bc4\u5b58\u5668\uff08reg\uff09\u7684</p>"},{"location":"C/6/#623","title":"6.2.3","text":""},{"location":"C/6/#_4","title":"\u6574\u6570\u7684\u5185\u90e8\u8868\u8fbe","text":""},{"location":"C/6/#_5","title":"*\u4e8c\u8fdb\u5236\u8d1f\u6570","text":"<p>\u4e00\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u8fbe\u7684\u6570\uff1a0000 0000-1111 1111\uff080-255\uff09</p> <p>\u200b   \u4e09\u79cd\u65b9\u6848</p> <p>\u200b       1\u3001\u4eff\u7167\u5341\u8fdb\u5236\uff0c\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6807\u5fd7\u8868\u793a\u8d1f\u6570 \u200b           \u95ee\u9898\uff1a\u9700\u89811 0000 0001+ 0000 0001=0000 0000 \u200b       2\u3001\u53d6\u4e2d\u95f4\u7684\u6570\u4e3a0\uff0c\u59821000000\u8868\u793a0\uff0c\u6bd4\u5b83\u5c0f\u7684\u662f\u8d1f\u6570\uff0c\u6bd4\u5b83\u5927\u7684\u662f\u6b63\u6570 \u200b           \u95ee\u9898\uff1a\u8f93\u5165\u8f93\u51fa\u8f83\u4e3a\u590d\u6742 \u200b       3\u3001\u8865\u7801\u221a</p> <p>1111 1111+0000 0001\u21921 0000 0000\uff08\u591a\u4e00\u4f4d\uff09</p> <p>\u2235 1 0000 0000-0000 0001\u21921111 1111</p> <p>\u200b        \uff080\uff09      -      \uff081\uff09  \u2192     \uff08-1\uff09</p> <p>\u8be5\u6570\u88ab\u5f53\u4f5c==\u7eaf\u4e8c\u8fdb\u5236==\u4e3a255\uff0c\u4f5c\u4e3a==\u8865\u7801==\u65f6\u5219\u662f-1</p> <p>\u8865\u7801\u7684\u610f\u4e49\uff1a\u62ff\u8865\u7801\u548c\u6e90\u7801\u53ef\u4ee5\u52a0\u51fa\u4e00\u4e2a\u6ea2\u51fa\u7684\u96f6</p>"},{"location":"C/6/#624","title":"6.2.4","text":""},{"location":"C/6/#_6","title":"\u6574\u6570\u7684\u8303\u56f4","text":"<p>\u4e00\u4e2a\u5b57\u8282\uff088\u4f4d\uff09\u53ef\u4ee5\u8868\u793a\uff1a0000 0000 ~1111 1111</p> <p>1111 1111~1000 0000 \u2192-1~-128</p> <p>0000 0001~0111 1111 \u21921~127</p> <pre><code>int main() {\n\n    char c =255;//\u5f53\u4f5c\u8865\u7801\n    int i =255;//\u5f53\u4f5c\u6b63\u5e38\u4e8c\u8fdb\u5236\n    unsigned char e=255;//\u5f3a\u5236\u5f53\u4f5c\u6b63\u5e38\u4e8c\u8fdb\u5236\n    printf(\"c=%d,i=%d\uff0ce=%d\\n\",c,i);\n\n    return 0;\n}\n\n-------------------\n    c=-1,i=255\uff0ce=255\n</code></pre> <p>\u5982\u679c\u4e00\u4e2a\u5b57\u9762\u91cf\u5e38\u6570\u60f3\u8981\u8868\u8fbe\u81ea\u5df1\u662funsigned,\u53ef\u4ee5\u5728\u540e\u9762\u52a0u\u6216U :e.g.<code>255U</code> \u7528I\u6216L\u8868\u793a<code>long(long)</code> unsigned\u7684\u521d\u8877\u5e76\u975e\u6269\u5c55\u6570\u80fd\u8868\u8fbe\u7684\u8303\u56f4\uff0c\u800c\u662f\u4e3a\u4e86\u505a\u7eaf\u4e8c\u8fdb\u5236\u8fd0\u7b97*\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u79fb\u4f4d</p> <p>\u5b57\u9762\u91cf\uff1a\u201c123\u201d \u53d8\u91cf\uff1aa </p> <p>Tip</p> <p>\u6570\u5b57\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e2a\u5708</p> <pre><code>stateDiagram-v2\n\n0--&gt; \uff0d1\n\uff0d1--&gt;\uff0d128\n\uff0d128--&gt;127\n127--&gt;0\n\n\n\n</code></pre> <p><pre><code>stateDiagram-v2\n\n0--&gt;255\n255--&gt;0\n</code></pre> </p> <pre><code>int main() {\n\n    int a=0,b=0;\n    while (++a&gt;0);\n    printf(\"The biggest number is int is :%d\\n\",a-1);//\u4ec0\u4e48\u65f6\u5019\u8f6c\u8fc7\u4e00\u5708\u5373\u53ef\u77e5\u9053\u6700\u5927\u7684\u6570\u5b57\n\n    b++;\n\n    while((a=a/10)!=0) {\n        b++;\n    }\n\n    printf(\"The biggest digit in int is : %d\\n\",b);\n    return 0;\n}\n----------------------&gt;\nThe biggest number is int is :2147483647//\u5c31\u662f2\u768431\u6b21\u65b9-1\nThe biggest digit in int is : 10\n</code></pre> <pre><code>//\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff08\u7b80\u5355\uff09\nint main() {\n    int a = 0;\n    int bits = sizeof(int) * 8; // \u83b7\u53d6 int \u7684\u4f4d\u6570\n    printf(\"The biggest number in int is: %d\\n\", (1 &lt;&lt; (bits - 1)) - 1);\n    printf(\"The biggest digit in int is: %d\\n\", bits);\n    return 0;\n}\n</code></pre>"},{"location":"C/6/#625","title":"6.2.5","text":""},{"location":"C/6/#_7","title":"\u6574\u6570\u7684\u8f93\u5165\u8f93\u51fa","text":"<p>\u53ea\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a<code>int</code>\u6216<code>long long</code> <code>%d</code>: int     <code>%u</code>: unsigned     <code>%ld</code>: long long     <code>%lu</code>: unsigned long long</p> <p>8\u8fdb\u5236/16\u8fdb\u5236</p> <ul> <li>8\u8fdb\u5236\uff1a0\u5f00\u5934</li> <li>16\u8fdb\u5236\uff1a0x\u5f00\u5934</li> </ul> <pre><code>int main() {\n\n    char c = 012;\n    int i= 0x12;\n    printf(\"c=%d,i=%d\\n\",c,i);\n    printf(\"c=%o,i=%x\\n\",c,i);\n    return 0;\n}\n-----------------&gt;\nc=10,i=18\nc=12,i=12\n</code></pre> <p>Tip</p> <p><code>%o</code>\u8868\u793a8\u8fdb\u5236\uff1b<code>%x</code>\u8868\u793a16\u8fdb\u5236</p> <ul> <li>16\u8fdb\u5236\u5f88\u9002\u5408\u8868\u8fbe\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u56e0\u4e3a4\u4f4d\u4e8c\u8fdb\u5236\u6b63\u597d\u662f\u4e00\u4e2a16\u8fdb\u5236\u4f4d</li> <li>8\u8fdb\u5236\u7684\u4e00\u4f4d\u6570\u5b57\u6b63\u597d\u8868\u8fbe3\u4f4d\u4e8c\u8fdb\u5236<ul> <li>\u56e0\u4e3a\u65e9\u671f\u8ba1\u7b97\u673a\u7684\u5b57\u957f\u662f12\u7684\u500d\u6570\uff0c\u800c\u975e8</li> </ul> </li> </ul>"},{"location":"C/6/#626","title":"6.2.6","text":""},{"location":"C/6/#_8","title":"\u9009\u62e9\u6574\u6570\u7c7b\u578b","text":"<p>Tip</p> <p>\u6ca1\u6709\u7279\u6b8a\u9700\u8981\uff0c\u5c31\u9009\u62e9<code>int</code></p> <p><code>unsigned</code>\u4e0e\u5426\u53ea\u662f\u8f93\u51fa\u7684\u4e0d\u540c\uff0c\u5185\u90e8\u8ba1\u7b97\u662f\u4e00\u6837\u7684</p> <p>\u2460\u73b0\u5728\u7684CPU\u7684\u5b57\u957f\u666e\u904d\u662f32\u4f4d\u621664\u4f4d\uff0c\u4e00\u6b21\u5185\u5b58\u8bfb\u5199\u5c31\u662f\u4e00\u4e2aint\uff0c\u4e00\u6b21\u8ba1\u7b97\u4e5f\u662f\u4e00\u4e2aint\uff0c\u9009\u62e9\u66f4\u77ed\u7684\u7c7b\u578b\u4e0d\u4f1a\u66f4\u5feb\uff0c\u751a\u81f3\u53ef\u80fd\u66f4\u6162</p> <p>\u2461\u73b0\u4ee3\u7684\u7f16\u8bd1\u5668\u4e00\u822c\u4f1a\u8bbe\u8ba1\u5185\u5b58\u5bf9\u9f50\uff0c\u6240\u4ee5\u66f4\u77ed\u7684\u7c7b\u578b\u5b9e\u9645\u5728\u5185\u5b58\u4e2d\u6709\u53ef\u80fd\u4e5f\u5360\u636e\u4e00\u4e2aint\u7684\u5927\u5c0f\uff08\u867d\u7136sizeof\u544a\u8bc9\u4f60\u66f4\u5c0f)</p>"},{"location":"C/6/#627","title":"6.2.7","text":""},{"location":"C/6/#_9","title":"\u6d6e\u70b9\u7c7b\u578b","text":"\u7c7b\u578b \u5b57\u957f \u8303\u56f4 \u6709\u6548\u6570\u5b57 scanf printf float 32 \u00b1(1.20x10<sup>-38</sup>~3.40x10<sup>38</sup>),0,\u00b1inf,nan 7 %f %f,%e double 64 \u00b1(2.2x10<sup>-308</sup>~1.79x10<sup>308</sup>),0,\u00b1inf,nan 15 %lf %f,%e <p><code>%e</code>:\u79d1\u5b66\u8ba1\u6570\u6cd5</p> <pre><code>int main() {\n    double ff =1E-10;\n    printf(\"%E,%.16f\\n\", ff, ff);//.16\u8868\u793a\u8f93\u51fa\u4f4d\u6570\uff1a16\u4f4d\n    return 0;\n}\n</code></pre> <pre><code>int main() {\n    printf(\"%.3f\\n\", -0.0049);\n    printf(\"%.30f\\n\", -0.0049);\n    printf(\"%.3f\\n\", -0.00049);\n    return 0;\n}\n---------------------&gt;\n-0.005\n-0.004899999999999999841793218991\n-0.000\n</code></pre>"},{"location":"C/6/#628","title":"6.2.8","text":""},{"location":"C/6/#_10","title":"\u6d6e\u70b9\u7684\u7cbe\u5ea6\u548c\u8303\u56f4","text":"<pre><code>printf(\"%f\\n\",12.0/0);\nprintf(\"%f\\n\",-12.0/0);\nprintf(\"%f\\n\",0.0/0);\u3001\n-------------\ninf\n-inf\nnan\n</code></pre> <p>Warning</p> <ul> <li><code>f1 == f2</code>\u53ef\u80fd\u5931\u8d25\uff0c\u4f7f\u7528<code>fabs(f1-f2) &lt; le-12</code></li> <li><code>float</code>\u8981\u7528f/F\u540e\u7f00\u8868\u660e\u8eab\u4efd</li> <li>\u5e26\u5c0f\u6570\u70b9\u5b57\u9762\u91cf\u662f<code>double</code>\uff0c\u800c\u4e0d\u662f<code>float</code></li> </ul> <p>Tip</p> <p>\u6ca1\u6709\u7279\u6b8a\u9700\u8981\uff0c\u53ea\u4f7f\u7528<code>double</code></p>"},{"location":"C/6/#629","title":"6.2.9","text":""},{"location":"C/6/#_11","title":"\u5b57\u7b26\u7c7b\u578b","text":"<pre><code>int main() {\n    if (49=='1') {\n        printf(\"Yep!\\n\");\n    }\n    return 0;\n}\n----------&gt;\nYep!\n</code></pre>"},{"location":"C/6/#_12","title":"\u5b57\u7b26\u8ba1\u7b97","text":"<pre><code>char a='A';\na++;\nprintf(\"%d\\n\",a);\n</code></pre> <p>\u4e00\u4e2a\u5b57\u7b26\u52a0\u4e00\u4e2a\u6570\u5b57\u5f97\u5230ASCII\u7801\u8868\u4e2d\u90a3\u4e2a\u6570\u4e4b\u540e\u7684\u5b57\u7b26 \u4e24\u4e2a\u5b57\u7b26\u7684\u51cf\uff0c\u5f97\u5230\u5b83\u4eec\u5728\u8868\u4e2d\u7684\u8ddd\u79bb \u5b57\u6bcd\u5728ASCII\u8868\u4e2d\u662f\u987a\u5e8f\u6392\u5217\u7684 \u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u662f\u5206\u5f00\u6392\u5217\u7684\uff0c\u5e76\u4e0d\u5728\u4e00\u8d77</p> <pre><code>//\u5927\u5c0f\u5199\u8f6c\u6362\na+'a'-'A'//\u5927\u5199\u2192\u5c0f\u5199\na+'A'-'a'//\u5c0f\u5199\u2192\u5927\u5199\n</code></pre>"},{"location":"C/6/#6210","title":"6.2.10","text":""},{"location":"C/6/#_13","title":"\u9003\u9038\u5b57\u7b26","text":"\u5b57\u7b26 \u610f\u4e49 \\b \u56de\u9000\u4e00\u683c \\t \u5230\u4e0b\u4e00\u4e2a\u8868\u683c\u4f4d \\n \u6362\u884c \\r \u56de\u8f66 \\\" \u53cc\u5f15\u53f7 \\' \u5355\u5f15\u53f7 \\\\ \u53cd\u659c\u6760\u672c\u8eab <p><pre><code>stateDiagram\n[*]--&gt;Keyboard\nKeyboard--&gt;Shell:\u2460\nShell--&gt;Programme:\u2461\nProgramme--&gt;Shell:\u2462\nShell--&gt;Terminal:\u2463\nTerminal--&gt;[*]\n</code></pre> \u5b8c\u6574 <pre><code>graph LR\n    A[User Input] --&gt;|stdin| B[Shell]\n    B --&gt;|Parse and Execute| C[Program]\n    C --&gt;|stdout| D[Terminal Output]\n    C --&gt;|stderr| D\n    B --&gt;|Built-in Commands| D\n    E[File] -.-&gt;|Redirection| B\n    B -.-&gt;|Redirection| F[File]</code></pre></p> <p>\u6ce8\uff1a<code>\\b</code>\u4e4b\u540e\u8ddf\u4e1c\u897f\uff0c\u90a3\u4e2a\u4e1c\u897f\u4f1a\u66ff\u6362\u524d\u4e00\u4e2a\u5b57\u7b26</p>"},{"location":"C/6/#_14","title":"\u5236\u8868\u4f4d","text":"<p><code>1tab=\\t</code></p>"},{"location":"C/6/#6211","title":"6.2.11","text":""},{"location":"C/6/#_15","title":"\u7c7b\u578b\u8f6c\u6362","text":""},{"location":"C/6/#_16","title":"\u81ea\u52a8","text":"<p>\u5f53\u8fd0\u7b97\u7b26\u7684\u4e24\u8fb9\u51fa\u73b0\u4e0d\u4e00\u81f4\u7684\u7c7b\u578b\u65f6\uff0c\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u8f83\u5927\u7684\u7c7b\u578b \u5927:\u80fd\u8868\u8fbe\u7684\u6570\u7684\u8303\u56f4\u66f4\u5927 <code>char-&gt; short-&gt; int-&gt; long-&gt; long long</code> <code>int -&gt; float -&gt; double</code></p>"},{"location":"C/6/#_17","title":"\u5f3a\u5236","text":"<p>\u8981\u628a\u4e00\u4e2a\u91cf\u5f3a\u5236\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u7c7b\u578b\uff08\u901a\u5e38\u662f\u8f83\u5c0f\u7684\u7c7b\u578b)\uff0c\u9700\u8981\uff1a</p> <p>\uff08\u7c7b\u578b\uff09\u503c\uff1a</p> <pre><code>(int) 10.1;\n(short)32;\n(short)32768;//\u6ce8\u610f\u5b89\u5168\u6027\uff1a\u5c0f\u7684\u53d8\u91cf\u4e0d\u603b\u80fd\u8868\u8fbe\u5927\u7684\u91cf  --&gt; -32768\n</code></pre> <p>\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4f18\u5148\u7ea7\u9ad8\u4e8e\u56db\u5219\u8fd0\u7b97</p> <pre><code>int i= (int) a/b\nint i= (int) (a/b)\n</code></pre>"},{"location":"C/6/#631","title":"6.3.1","text":""},{"location":"C/6/#_18","title":"\u903b\u8f91\u7c7b\u578b","text":"<pre><code>#include &lt;stdbool.h&gt;\n//\u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528bool\u548ctrue\u3001false \n</code></pre> <pre><code>bool c=6&gt;5;\nbool t=true;\nt=2//\u5e03\u5c14\u91cf\u4ecd\u7136\u662f\u6574\u6570\uff0c\u8f93\u51fa\u662f0/1\n</code></pre>"},{"location":"C/6/#632","title":"6.3.2","text":""},{"location":"C/6/#_19","title":"\u903b\u8f91\u8fd0\u7b97","text":"\u903b\u8f91\u8fd0\u7b97 \u903b\u8f91\u91cf \u7ed3\u679c 0/1 true/false \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u793a\u4f8b \u7ed3\u679c \uff01 \u903b\u8f91\u975e !a \u5982\u679ca\u662ftrue\u7ed3\u679c\u5c31\u662ffalse,  \u5982\u679ca\u662ffalse\u7ed3\u679c\u5c31\u662ftrue &amp;&amp; \u903b\u8f91\u4e0e a&amp;&amp;b \u5982\u679ca\u548cb\u90fd\u662ftrue,\u7ed3\u679c\u5c31  \u662ftrue;\u5426\u5219\u5c31\u662ffalse || \u903b\u8f91\u6216 a||b \u5982\u679ca\u548cb\u6709\u4e00\u4e2a\u662ftrue,\u7ed3\u679c\u4e3atrue;  \u4e24\u4e2a\u90fd\u662ffalse,\u7ed3\u679c\u4e3afalse <p>e.g. 4&lt;x&lt;6\u274c --&gt; x&gt;4&amp;&amp;x&lt;6\u2714\ufe0f</p> <p>\u200b   \u5224\u65ad\u662f\u5426\u662f\u5927\u5199\u5b57\u6bcd\uff1ac&gt;='A'&amp;&amp;c&lt;='Z'\u2714\ufe0f</p> <p>\u200b   !age&lt;20--&gt;\u7ed3\u679c\u4e00\u5b9a\u662ftrue  \u2235\uff01age\u7ed3\u679c\u662f0/1</p>"},{"location":"C/6/#_20","title":"\u4f18\u5148\u7ea7","text":"<p>Note</p> <p><code>\uff01&gt;&amp;&amp;&gt;||</code></p> <p>e.g. <code>!done&amp;&amp;(count&gt;MAX)</code></p>"},{"location":"C/6/#_21","title":"\u77ed\u8def","text":"<p>\u903b\u8f91\u8fd0\u7b97\u662f\u81ea\u5de6\u5411\u53f3\u8fdb\u884c\u7684\uff0c\u5982\u679c\u5de6\u8fb9\u7684\u7ed3\u679c\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u7ed3\u679c\u4e86\uff0c\u5c31\u4e0d\u4f1a\u505a\u53f3\u8fb9\u7684\u8ba1\u7b97</p> <p>e.g. \u5bf9\u4e8e&amp;&amp;\uff1a\u5de6\u8fb9false--&gt;\u4e0d\u505a\u53f3\u8fb9</p> <p>\u200b   \u5bf9\u4e8e||\uff1a\u5de6\u8fb9true--&gt;\u4e0d\u505a\u53f3\u8fb9</p> <p>Bug</p> <p>\u4e0d\u8981\u628a\u8d4b\u503c\uff0c\u5305\u62ec\u590d\u5408\u8d4b\u503c\u7ec4\u5408\u8fdb\u8868\u8fbe\u5f0f</p> <p>e.g. <code>a==1&amp;&amp;b+=6</code></p>"},{"location":"C/6/#633","title":"6.3.3","text":""},{"location":"C/6/#_22","title":"\u6761\u4ef6\u8fd0\u7b97/\u9017\u53f7\u8fd0\u7b97","text":""},{"location":"C/6/#_23","title":"\u6761\u4ef6\u8fd0\u7b97\u7b26","text":"<pre><code>count=(count&gt;20)? count-10:count+10;\n//      (\u6761\u4ef6)     (\u6ee1\u8db3\u65f6) (\u4e0d\u6ee1\u8db3\u65f6)\n</code></pre> <p>\u4f18\u5148\u7ea7\uff1a\u6bd4\u8d4b\u503c\u9ad8\u4f46\u662f\u4f4e\u4e8e\u5176\u4ed6\u8fd0\u7b97\u7b26</p>"},{"location":"C/6/#_24","title":"\u5d4c\u5957\u6761\u4ef6\u8868\u8fbe\u5f0f","text":"<p><code>count = (count &gt; 20) ? (cout &lt; 50) ? count - 10 :count - 5 :(count&lt;10 ) ? count+ 10: count + 5;</code></p> <p>\u6761\u4ef6\u8ba1\u7b97\u81ea\u53f3\u5411\u5de6\uff1a\u5148\u8ba1\u7b97\u5206\u652f\uff0c\u518d\u6c47\u603b</p>"},{"location":"C/6/#_25","title":"\u9017\u53f7\u8fd0\u7b97","text":"<p>e.g. \u5728for\u4e2d\u4f7f\u7528\uff1a<code>for(i=1,j=10 ; i&lt;j ; i++,j--)</code></p>"},{"location":"C/7/","title":"7","text":"<ul> <li>7<ul> <li>7.1.1<ul> <li>\u521d\u89c1\u51fd\u6570</li> </ul> </li> <li>7.1.2<ul> <li>\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u4f7f\u7528</li> <li>\u8c03\u7528\u51fd\u6570</li> </ul> </li> <li>7.2.3<ul> <li>\u4ece\u51fd\u6570\u8fd4\u56de</li> <li>\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570</li> </ul> </li> <li>7.2.1<ul> <li>\u51fd\u6570\u539f\u578b<ul> <li>\u51fd\u6570\u5148\u540e\u5173\u7cfb</li> </ul> </li> </ul> </li> <li>7.2.2<ul> <li>\u53c2\u6570\u4f20\u9012<ul> <li>\u7c7b\u578b\u4e0d\u5339\u914d</li> <li>\u4f20\u8fc7\u53bb\u7684\u662f\u4ec0\u4e48\uff1f</li> </ul> </li> </ul> </li> <li>7.2.3<ul> <li>\u672c\u5730\u53d8\u91cf</li> </ul> </li> <li>7.2.4<ul> <li>\u6ca1\u6709\u53c2\u6570\u65f6</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/7/#7","title":"7","text":""},{"location":"C/7/#711","title":"7.1.1","text":""},{"location":"C/7/#_1","title":"\u521d\u89c1\u51fd\u6570","text":"<p>\u201c\u4ee3\u7801\u590d\u5236\u201d\u662f\u7a0b\u5e8f\u4e0d\u826f\u7684\u8868\u73b0</p> <p>\u2192\u5305\u88c5\u6210\u51fd\u6570</p>"},{"location":"C/7/#712","title":"7.1.2","text":""},{"location":"C/7/#_2","title":"\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u4f7f\u7528","text":"\\[ y=f(x) \\] <p>\u63a5\u53d7\u53c2\u6570\uff0c\u8fd4\u56de\u503c</p> <pre><code>void sum(int begin, int end)                                        //\u51fd\u6570\u5934\n{                                                                 //\u51fd\u6570\u4f53{}\n    int i;\n    int sum=0;\n    for(i=begin;i&lt;=end;i++){\n        sum+=i;\n    }\n    printf(\"The sum of %d to %d is %d : \",begin,end,sum);\n}\n</code></pre> <p><code>void</code>\uff1a\u8fd4\u56de\u7c7b\u578b</p> <p><code>sum</code>\uff1a\u51fd\u6570\u540d</p> <p><code>(int begin, int end)</code>\uff1a\u53c2\u6570\u8868</p>"},{"location":"C/7/#_3","title":"\u8c03\u7528\u51fd\u6570","text":"<ul> <li>\u51fd\u6570\u540d\uff08\u53c2\u6570\u503c\uff09</li> <li>\uff08\uff09\u8d77\u5230\u8868\u793a\u51fd\u6570\u8c03\u7528\u7684\u4f5c\u7528</li> <li>\u5373\u4f7f\u6ca1\u6709\u53c2\u6570\u4e5f\u8981\uff08\uff09</li> <li>\u5982\u679c\u6709\u53c2\u6570\uff0c\u9700\u8981\u7ed9\u51fa\u6b63\u786e\u7684\u6570\u91cf\u548c\u987a\u5e8f</li> </ul> <pre><code>void cheer() {\n    printf(\"Cheer!\");\n}\n\nint main() {\n    cheer();            //\u6ce8\u610f\u8981\u6709()\n    return 0;\n}\n</code></pre> <pre><code>int sum(int begin,int end) {\n\n    int i;\n    int sum=0;\n    for (i=begin;i&lt;=end;i++) {\n        sum+=i;\n    }\n    return sum;\n}\n\nint main() {\n\n\n    printf(\"%d\\n\",sum(1,10));\n    return 0;\n}\n</code></pre>"},{"location":"C/7/#723","title":"7.2.3","text":""},{"location":"C/7/#_4","title":"\u4ece\u51fd\u6570\u8fd4\u56de","text":"<p><code>return</code>\u505c\u6b62\u51fd\u6570\u6267\u884c\uff0c\u5e76\u9001\u56de\u4e00\u4e2a\u503c</p> <pre><code>//\u4e24\u79cd\u5199\u6cd5\nreturn;\nreturn something    //+\u8fd4\u56de\u503c\n</code></pre> <p>\u4e00\u4e2a\u51fd\u6570\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2areturn\u8bed\u53e5</p> <pre><code>int max(int a,int b) {\n    if(a&gt;b){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n//\u6b64\u5904\u51fd\u6570\u6709\u591a\u4e2a\u51fa\u53e3\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\u4f46\u4e0d\u5efa\u8bae\nint main() {\n    printf(\"The bigger one is :%d\",max(10,20));\n    return 0;\n}\n</code></pre>"},{"location":"C/7/#_5","title":"\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570","text":"<ul> <li>void \u51fd\u6570\u540d\uff08\u53c2\u6570\u8868\uff09</li> <li>\u4e0d\u80fd\u4f7f\u7528\u5e26\u503c\u7684return</li> <li>\u53ef\u4ee5\u6ca1\u6709return</li> <li>\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u80fd\u505a\u8fd4\u56de\u503c\u7684\u8d4b\u503c</li> </ul> <p>Danger</p> <p>\u5982\u679c\u51fd\u6570\u6709\u8fd4\u56de\u503c\uff0c\u5fc5\u987b\u4f7f\u7528\u5e26\u503c\u7684<code>return</code></p>"},{"location":"C/7/#721","title":"7.2.1","text":""},{"location":"C/7/#_6","title":"\u51fd\u6570\u539f\u578b","text":""},{"location":"C/7/#_7","title":"\u51fd\u6570\u5148\u540e\u5173\u7cfb","text":"<p>\u628asum()\u5199\u5728\u4e0a\u9762\uff0c\u56e0\u4e3a\uff1a</p> <ul> <li>C\u7684\u7f16\u8bd1\u5668\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u4f60\u7684\u4ee3\u7801</li> </ul> <p>Note</p> <p>\u4e00\u822c\uff1a\u51fd\u6570\u8981\u5199\u5728\u8c03\u7528\u4e4b\u524d</p> <p>\u89e3\u51b3\uff1a\u53ef\u4ee5\u5c06==\u51fd\u6570\u5934==\u642c\u5230\u7a0b\u5e8f\u524d\uff0c\u4ee5\u8fbe\u5230\u8ba9main\u7a0b\u5e8f\u4e00\u76ee\u4e86\u7136\u2192\u539f\u578b\u58f0\u660e</p> <pre><code>int max(int a,int b);         //\u58f0\u660e\nint max(int ,int );               //\u7701\u53bb\u53c2\u6570\u540d\u79f0\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u597d\u8bfb\n\nint main() {\n\n    printf(\"The bigger one is :%d\",max(10,20));\n    return 0;\n}\n\nint max(int a,int b) {            //\u5b9a\u4e49\n    if(a&gt;b){return a;}\n    else{return b;}\n}\n</code></pre>"},{"location":"C/7/#722","title":"7.2.2","text":""},{"location":"C/7/#_8","title":"\u53c2\u6570\u4f20\u9012","text":"<pre><code>int cheer(int i){\n    printf(\"cheer!%d\\n\",i);\n}\n\nint main(){\n    cheer(2.4);\n    return 0;\n}\n-----------------&gt;\ncheer 2\n</code></pre>"},{"location":"C/7/#_9","title":"\u7c7b\u578b\u4e0d\u5339\u914d","text":"<ul> <li> <p>\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u7684\u503c\u4e0e\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u5339\u914d\u662fC\u8bed\u8a00\u4f20\u7edf\u4e0a\u6700\u5927\u7684\u6f0f\u6d1e</p> </li> <li> <p>\u7f16\u8bd1\u5668\u603b\u662f\u6084\u6084\u66ff\u4f60\u628a\u7c7b\u578b\u8f6c\u6362\u597d\uff0c\u4f46\u662f\u8fd9\u5f88\u53ef\u80fd\u4e0d\u662f\u4f60\u6240\u671f\u671b\u7684</p> </li> <li> <p>\u540e\u7eed\u7684\u8bed\u8a00\uff0cC++/Java\u5728\u8fd9\u65b9\u9762\u5f88\u4e25\u683c</p> </li> </ul>"},{"location":"C/7/#_10","title":"\u4f20\u8fc7\u53bb\u7684\u662f\u4ec0\u4e48\uff1f","text":"<pre><code>void swap(int a,int b);\nint main() {\n    int a,b;\n    printf(\"Enter two numbers:\");\n    scanf(\"%d %d\",a,b);\n    swap(a,b);\n\n    printf(\"The numbers after swapping are:%d %d\",a,b);\n    return 0;\n}\n\nvoid swap(int a,int b) {\n    int t=b;\n    b=a;\n    a=t;\n}\n//\u8fd9\u6bb5\u4ee3\u7801\u5e76\u4e0d\u80fd\u8fbe\u5230\u4ea4\u6362\u4e24\u6570\u7684\u6548\u679c\u2192\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u81ea\u5df1\u7684\u53d8\u91cf\u7a7a\u95f4\n</code></pre> <p>Warning</p> <p>C\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6c38\u8fdc\u53ea\u80fd\u4f20\u503c\u7ed9\u51fd\u6570</p>"},{"location":"C/7/#723_1","title":"7.2.3","text":""},{"location":"C/7/#_11","title":"\u672c\u5730\u53d8\u91cf","text":"<ul> <li>\u51fd\u6570\u7684\u6bcf\u6b21\u8fd0\u884c\uff0c\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u53d8\u91cf\u7a7a\u95f4\uff0c\u5728\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u7684\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7684\u8fd9\u6b21\u8fd0\u884c\u6240\u72ec\u6709\u7684\uff0c\u79f0\u4f5c\u672c\u5730\u53d8\u91cf</li> <li>\u5b9a\u4e49\u5728\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\u5c31\u662f\u672c\u5730\u53d8\u91cf</li> <li>\u53c2\u6570\u4e5f\u662f\u672c\u5730\u53d8\u91cf</li> </ul> <p>\u751f\u5b58\u671f\uff1a\u4ec0\u4e48\u65f6\u5019\u8fd9\u4e2a\u53d8\u91cf\u5f00\u59cb\u51fa\u73b0\u4e86\uff0c\u5230\u4ec0\u4e48\u65f6\u5019\u5b83\u6d88\u4ea1\u4e86 \u4f5c\u7528\u57df\uff1a\u5728\uff08\u4ee3\u7801\u7684\uff09\u4ec0\u4e48\u8303\u56f4\u5185\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u53d8\u91cf\uff08\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8d77\u4f5c\u7528\uff09 \u5bf9\u4e8e\u672c\u5730\u53d8\u91cf\uff0c\u8fd9\u4e24\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f\u7edf\u4e00\u7684\uff1a\u5927\u62ec\u53f7\u5185\u2014\u2014\u5757</p> <pre><code>stateDiagram-v2\n\u5757--&gt;\u751f\u5b58\u671f:\u51b3\u5b9a\n\u751f\u5b58\u671f--&gt;\u4ec0\u4e48\u65f6\u5019\u8fd9\u4e2a\u53d8\u91cf\u5f00\u59cb\u51fa\u73b0\u4e86\uff0c\u5230\u4ec0\u4e48\u65f6\u5019\u5b83\u6d88\u4ea1\u4e86\n\u5757--&gt;\u4f5c\u7528\u57df:\u51b3\u5b9a\n\u4f5c\u7528\u57df--&gt;\u5728\uff08\u4ee3\u7801\u7684\uff09\u4ec0\u4e48\u8303\u56f4\u5185\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u53d8\u91cf\uff08\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8d77\u4f5c\u7528\uff09</code></pre> <p>Tip</p> <ul> <li>\u672c\u5730\u53d8\u91cf\u662f\u5b9a\u4e49\u5728\u5757\u5185\u7684</li> <li>\u5b83\u53ef\u4ee5\u662f\u5b9a\u4e49\u5728\u51fd\u6570\u7684\u5757\u5185</li> <li>\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u8bed\u53e5\u7684\u5757\u5185</li> <li>\u751a\u81f3\u53ef\u4ee5\u968f\u4fbf\u62c9\u4e00\u5bf9\u5927\u62ec\u53f7\u6765\u5b9a\u4e49\u53d8\u91cf</li> <li>\u7a0b\u5e8f\u8fd0\u884c\u8fdb\u5165\u8fd9\u4e2a\u5757\u4e4b\u524d\uff0c\u5176\u4e2d\u7684\u53d8\u91cf\u4e0d\u5b58\u5728\uff0c\u79bb\u5f00\u8fd9\u4e2a\u5757\uff0c\u5176\u4e2d\u7684\u53d8\u91cf\u5c31\u6d88\u5931\u4e86</li> <li>\u5757\u5916\u9762\u5b9a\u4e49\u7684\u53d8\u91cf\u5728\u91cc\u9762\u4ecd\u7136\u6709\u6548</li> <li>\u5757\u91cc\u9762\u5b9a\u4e49\u4e86\u548c\u5916\u9762\u540c\u540d\u7684\u53d8\u91cf\u5219\u63a9\u76d6\u4e86\u5916\u9762\u7684</li> <li>\u4e0d\u80fd\u5728\u4e00\u4e2a\u5757\u5185\u5b9a\u4e49\u540c\u540d\u7684\u53d8\u91cf</li> <li>\u672c\u5730\u53d8\u91cf\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316</li> <li>\u53c2\u6570\u5728\u8fdb\u5165\u51fd\u6570\u7684\u65f6\u5019\u88ab\u521d\u59cb\u5316\u4e86</li> </ul>"},{"location":"C/7/#724","title":"7.2.4","text":""},{"location":"C/7/#_12","title":"\u6ca1\u6709\u53c2\u6570\u65f6","text":"<pre><code>void f()        //\u4e0d\u5efa\u8bae\uff0c\u8868\u793a\u53c2\u6570\u672a\u77e5\nvoid f(void)    //\u8868\u793a\u6ca1\u6709\u53c2\u6570\n</code></pre> <p>C\u8bed\u8a00\u4e0d\u5141\u8bb8\u51fd\u6570\u5d4c\u5957\u5b9a\u4e49</p> <p><code>int main</code>\u4e5f\u662f\u51fd\u6570</p> <p><code>return 0;</code>\u4f5c\u7528\u2192   Windows: if errorlevel 1\u2026\u2026                 Unix Bash: echo \\(?                 Csh: echo\\)status</p>"},{"location":"C/8/","title":"8","text":"<ul> <li>8<ul> <li>8.1.1<ul> <li>\u521d\u8bd5\u6570\u7ec4</li> </ul> </li> <li>8.1.2<ul> <li>\u5b9a\u4e49\u6570\u7ec4</li> <li>\u6709\u6548\u7684\u4e0b\u6807\u8303\u56f4</li> </ul> </li> <li>8.1.3<ul> <li>e.g. \u7edf\u8ba1\u4e2a\u6570</li> </ul> </li> <li>8.2.1<ul> <li>\u6570\u7ec4\u8fd0\u7b97<ul> <li>\u6570\u7ec4\u7684\u96c6\u6210\u521d\u59cb\u5316</li> <li>\u96c6\u6210\u521d\u59cb\u5316\u7684\u5b9a\u4f4d</li> <li>\u6570\u7ec4\u7684\u5927\u5c0f</li> <li>\u6570\u7ec4\u7684\u8d4b\u503c\u548c\u904d\u5386\u6570\u7ec4</li> </ul> </li> </ul> </li> <li>8.2.2<ul> <li>e.g.\u6570\u7ec4\u4f8b\u5b50\uff1a\u7d20\u6570</li> </ul> </li> <li>8.2.3<ul> <li>\u4e8c\u7ef4\u6570\u7ec4<ul> <li>\u4e8c\u7ef4\u6570\u7ec4\u521d\u59cb\u5316</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"C/8/#8","title":"8","text":""},{"location":"C/8/#811","title":"8.1.1","text":""},{"location":"C/8/#_1","title":"\u521d\u8bd5\u6570\u7ec4","text":"<pre><code>int main() {\n    int x;\n    int sum=0;\n    int count=0;\n    int number[100];\n\n    scanf(\"%d\",&amp;x);\n    while(x!=-1) {\n        number[count]=x;\n        //\n        {\n            int i;\n            printf(\"%d\\t\",count);\n            for(i=0;i&lt;=count;i++) {\n                printf(\"%d\\t\",number[i]);\n            }\n            printf(\"\\n\");\n        }\n        //\n        sum=sum+x;\n        count++;\n        scanf(\"%d\",&amp;x);\n    }\n\n    if(count&gt;0){\n\n        printf(\"The average of all numbers is %f\\n\", 1.0*sum/count);\n        int i;\n\n        for(i=0;i&lt;count;i++){\n\n            if (number[i]&gt;sum/count){\n                printf(\"%d\\n\",number[i]);\n            }\n        }\n    }\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5b58\u5728\u5b89\u5168\u9690\u60a3\uff1a\u6570\u7ec4\u957f\u5ea6\u5927\u4e8e100</p>"},{"location":"C/8/#812","title":"8.1.2","text":""},{"location":"C/8/#_2","title":"\u5b9a\u4e49\u6570\u7ec4","text":"<pre><code>//  &lt;\u7c7b\u578b&gt; \u53d8\u91cf\u540d\u79f0 [\u5143\u7d20\u6570\u91cf]\ne.g. int grades   [100]\n    double weight [20]\n</code></pre> <p>Tip</p> <p>\u5143\u7d20\u6570\u91cf\u5fc5\u987b\u662f\u6574\u6570\uff0c\u800c\u4e14\u662f\u786e\u5b9a\u7684\u5b57\u9762\u91cf</p> <ul> <li>\u6240\u6709\u5143\u7d20\u6570\u636e\u7c7b\u578b\u76f8\u540c</li> <li>\u4e00\u65e6\u521b\u5efa\u4e0d\u80fd\u6539\u53d8\u5927\u5c0f</li> <li>*\uff08\u6570\u7ec4\u4e2d\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u4f9d\u6b21\u6392\u5217\u7684\uff09</li> </ul> <p>\u4e0b\u6807\u4ece0\u5f00\u59cb</p> <pre><code>timeline\na[0]: 1\na[1]: 2\na[2]: 3\na[3]: 4\na[4]: 5\na[5]: 6\na[6]: 7\n</code></pre> <p><code>a[2]=a[1]+6</code>\uff1a\u8d4b\u503c\u5de6\u8fb9\u7684\u53eb\u5de6\u503c</p>"},{"location":"C/8/#_3","title":"\u6709\u6548\u7684\u4e0b\u6807\u8303\u56f4","text":"<ul> <li>\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u73af\u5883\u90fd==\u4e0d\u4f1a==\u68c0\u67e5\u6570\u7ec4\u4e0b\u6807\u662f\u5426\u8d8a\u754c</li> <li>\u4e00\u65e6\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8d8a\u754c\u7684\u6570\u7ec4\u8bbf\u95ee\u53ef\u80fd\u9020\u6210\u95ee\u9898\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u2192segmentation fault</li> <li>\u957f\u5ea6\u4e3a0\u7684\u6570\u7ec4\u5b58\u5728\uff0c\u4f46\u662f\u65e0\u7528</li> </ul>"},{"location":"C/8/#813","title":"8.1.3","text":""},{"location":"C/8/#eg","title":"e.g. \u7edf\u8ba1\u4e2a\u6570","text":"<pre><code>int main(void) {\n    const int number = 10;//\u6570\u7ec4\u5927\u5c0f\n    int x;\n    int count[number];//\u5b9a\u4e49\u6570\u7ec4\n    int i;\n\n    //\u6570\u7ec4\u521d\u59cb\u5316\n    for (i = 0; i &lt; number; i++) {\n        count[i] = 0;\n    }\n\n\n    scanf(\"%d\", &amp;x);\n    while (x != -1) {\n        if (x &gt; 0 &amp;&amp; x &lt;= 9) {\n            count[x]++;//\u6570\u7ec4\u53c2\u4e0e\u8fd0\u7b97\n        }\n\n        scanf(\"%d\",&amp;x);\n    }\n    //\u904d\u5386\u6570\u7ec4\u8f93\u51fa\n    for (int i = 0; i &lt; number; i++) {\n        printf(\"%d:%d\\n\", i, count[i]);\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"C/8/#821","title":"8.2.1","text":""},{"location":"C/8/#_4","title":"\u6570\u7ec4\u8fd0\u7b97","text":""},{"location":"C/8/#_5","title":"\u6570\u7ec4\u7684\u96c6\u6210\u521d\u59cb\u5316","text":"<pre><code>int a[]={2,4,6,8,9,6,5,3};\nint a[12]={2};//\u7b2c\u4e00\u4e2a\u662f2\uff0c\u5176\u4f59\u662f0\n</code></pre>"},{"location":"C/8/#_6","title":"\u96c6\u6210\u521d\u59cb\u5316\u7684\u5b9a\u4f4d","text":"<pre><code>int a[12] = { [1]=2,4,  [5]=6};//\u7b2c2\uff0c3\u4e2a\u662f\u20182\uff0c4\u2019\uff0c\u7b2c6\u4e2a\u662f\u20186\u2019\n</code></pre>"},{"location":"C/8/#_7","title":"\u6570\u7ec4\u7684\u5927\u5c0f","text":"<p>sizeof\u7ed9\u51fa\u6574\u4e2a\u6570\u7ec4\u6240\u5360\u636e\u7684\u5185\u5bb9\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u662f\u5b57\u8282</p> <pre><code>int main(void) {\n    int a[]={4,5,6,7,8,9,10,11,12,13};\n    {\n        int i=0;\n        printf(\"%llu\",sizeof(a)/sizeof(a[0]));\n    }\n    return 0;\n}\n</code></pre> <pre><code>sizeof(a)/sizeof(a[0])\n    //\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u4e00\u65e6\u4fee\u6539\u6570\u7ec4\u4e2d\u521d\u59cb\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u904d\u5386\u7684\u4ee3\u7801\n</code></pre>"},{"location":"C/8/#_8","title":"\u6570\u7ec4\u7684\u8d4b\u503c\u548c\u904d\u5386\u6570\u7ec4","text":"<pre><code>//\u9519\u8bef\u274c\nint a[]={1,2,3,4,5,6};\nint b[]=a;\n//\u6b63\u786e\u2714\ufe0f\nint a[]={1,2,3,4,5,6};\nfor (i=0; i&lt;length; i++){\n    b[i]=a[i];\n}\n</code></pre> <p>\u901a\u5e38\u4f7f\u7528for\u5faa\u73af\uff0c\u53d8\u91cfi\u4ece0\u5230==&lt;==\u6570\u7ec4\u957f\u5ea6</p> <p>Warning</p> <p>\u5e38\u89c1\u9519\u8bef\uff1a\u274c</p> <ul> <li>\u5faa\u73af\u7ed3\u675f\u6761\u4ef6\uff1a\u7528&lt;=\u6570\u7ec4\u957f\u5ea6</li> <li>\u79bb\u5f00\u5faa\u73af\u540e\uff0c\u4ecd\u65e7\u7528i\u7684\u503c\u6765\u505a\u6570\u7ec4\u4e0b\u6807</li> </ul> <p>\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5f80\u5f80\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f</p>"},{"location":"C/8/#822","title":"8.2.2","text":""},{"location":"C/8/#eg_1","title":"e.g.\u6570\u7ec4\u4f8b\u5b50\uff1a\u7d20\u6570","text":"<ol> <li>\u904d\u53860~n</li> </ol> <pre><code>int isPrime(int x) {\n    int ret = 1;\n    for (int i = 2; i &lt; x; i++) {\n        if (x % i == 0) {\n            ret = 0;\n            break;\n        }\n    }\n\n    return ret;\n}\n\nint main() {\n    int x;\n    scanf(\"%d\", &amp;x);\n    if (isPrime(x) == 1) {\n        printf(\"YES\\n\");\n    } else {\n        printf(\"NO\\n\");\n    }\n    return 0;\n}\n</code></pre> <ol> <li>\u904d\u53860~n\uff08\u53bb\u6389\u6240\u6709\u5076\u6570\uff09</li> <li>\u904d\u53860~<code>sqrt(x)</code></li> <li>\u5224\u65ad\u662f\u5426\u80fd\u88ab\u5df2\u77e5\u7684\u7d20\u6570\u6574\u9664</li> </ol> <p><pre><code>prime [count++]=i;\n</code></pre> 5. \u6784\u9020\u7d20\u6570\u8868\uff08\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff09    \uff081\uff09\u4ee4x\u4e3a2    \uff082\uff09\u5c062x\u30013x\u30014x\u76f4\u81f3ax&lt;n\u7684\u6570\u6807\u8bb0\u4e3a\u975e\u7d20\u6570    \uff083\uff09\u4ee4x\u4e3a\u4e0b\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u975e\u7d20\u6570\u7684\u6570\uff0c\u91cd\u590d\uff082\uff09\uff1b\u76f4\u5230\u6240\u6709\u7684\u6570\u90fd\u5df2\u7ecf\u5c1d\u8bd5\u5b8c\u6bd5</p> <pre><code>st=&gt;start: Start\ne=&gt;end: End\nop1=&gt;operation: Create list 2 to n\nop2=&gt;operation: Mark smallest unmarked number as prime\nop3=&gt;operation: Cross out its multiples\ncond=&gt;condition: Unmarked numbers left?\nop4=&gt;operation: Output prime numbers\n\nst-&gt;op1-&gt;op2-&gt;op3-&gt;cond\ncond(yes)-&gt;op2\ncond(no)-&gt;op4-&gt;e\n</code></pre>"},{"location":"C/8/#823","title":"8.2.3","text":""},{"location":"C/8/#_9","title":"\u4e8c\u7ef4\u6570\u7ec4","text":"<pre><code>//3\u884c5\u5217\u7684\u77e9\u9635\nint a[3][5]\n</code></pre> <p><code>a [i][j]</code>\u662f\u4e00\u4e2a<code>int</code></p>"},{"location":"C/8/#_10","title":"\u4e8c\u7ef4\u6570\u7ec4\u521d\u59cb\u5316","text":"<pre><code>int a[][5]{\n    {0,1,2,3,4},\n    {2,3,4,5,6},\n};\n</code></pre> <ul> <li>\u5217\u6570\u5fc5\u987b\u7ed9\u51fa</li> <li>\u4e00\u884c\u4e00\u4e2a{}\uff0c\u9017\u53f7\u5206\u9694</li> <li>\u7701\u7565\u8868\u793a\u8865\u96f6</li> <li>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b9a\u4f4d</li> </ul>"},{"location":"C/9/","title":"9","text":"<ul> <li>9<ul> <li>9.1.1<ul> <li>\u53d6\u5730\u5740\u8fd0\u7b97<ul> <li>\u8fd0\u7b97\u7b26&amp;</li> </ul> </li> </ul> </li> <li>9.1.2<ul> <li>\u6307\u9488</li> <li>\u8bbf\u95ee\u5730\u5740\u4e0a\u7684\u53d8\u91cf*</li> </ul> </li> <li>9.1.3<ul> <li>\u6307\u9488\u7684\u4f7f\u7528<ul> <li>1\u3001\u4e24\u4e2a\u53d8\u91cf\u505a\u4ea4\u6362\uff08\u4e4b\u524d\u53d8\u91cf\u90fd\u6709\u9650\u5b9a\u7684\u4f5c\u7528\u57df\uff09</li> <li>2\u3001\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u67d0\u4e9b\u503c\u8981\u6307\u9488\u5e26\u56de\uff08return\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\uff09</li> </ul> </li> </ul> </li> <li>9.1.4<ul> <li>\u6307\u9488\u548c\u6570\u7ec4<ul> <li>\u4f20\u5165\u6570\u7ec4\u6210\u4e86\u4ec0\u4e48\uff1f</li> </ul> </li> <li>\u6570\u7ec4\u53d8\u91cf\u662f\u7279\u6b8a\u7684\u6307\u9488</li> </ul> </li> <li>9.1.5<ul> <li>\u6307\u9488\u4e0e\u53d8\u91cf</li> <li>const\u6570\u7ec4</li> </ul> </li> <li>9.2.1<ul> <li>\u6307\u9488\u8fd0\u7b97</li> <li>*p++</li> <li>0\u5730\u5740</li> <li>\u6307\u9488\u7c7b\u578b<ul> <li>\u6307\u9488\u7c7b\u578b\u8f6c\u6362</li> </ul> </li> </ul> </li> <li>9.2.2<ul> <li>\u52a8\u6001\u5185\u5b58\u5206\u914d</li> <li>\u6ca1\u7a7a\u95f4\u4e86\uff1f</li> <li>free()</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/9/#9","title":"9","text":""},{"location":"C/9/#911","title":"9.1.1","text":""},{"location":"C/9/#_1","title":"\u53d6\u5730\u5740\u8fd0\u7b97","text":""},{"location":"C/9/#_2","title":"\u8fd0\u7b97\u7b26<code>&amp;</code>","text":"<p>\u83b7\u5f97\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5b83\u7684\u64cd\u4f5c\u5fc5\u987b\u662f\u5730\u5740</p> <p>Bug</p> <p>\u5730\u5740\u5927\u5c0f\u662f\u5426\u4e0e<code>int</code>\u76f8\u540c\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668</p> <p><code>&amp;(a\u00b1b)</code>\u4e0d\u80fd\u53d6\u5730\u5740</p> <pre><code>printf(\"%p\",&amp;i);//&amp;i \u8868\u793a\u6253\u5370\u53d8\u91cf\u5730\u5740\n</code></pre>"},{"location":"C/9/#912","title":"9.1.2","text":""},{"location":"C/9/#_3","title":"\u6307\u9488","text":"<p>\u5c31\u662f==\u4fdd\u5b58\u5730\u5740==\u7684\u53d8\u91cf</p> <pre><code>int *p = &amp;i;\nint *p,q;//p\u662f\u6307\u9488\uff0cq\u662fint\u2192 *p\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u6ca1\u6709int*\u8fd9\u79cd\u7c7b\u578b\n</code></pre>"},{"location":"C/9/#_4","title":"\u8bbf\u95ee\u5730\u5740\u4e0a\u7684\u53d8\u91cf<code>*</code>","text":"<pre><code>flowchart LR\n    subgraph Memory\n        A[\u53d8\u91cf x\\n\u503c: 10\\n\u5730\u5740: 0x7ffd5]\n    end\n    subgraph \"\u53d6\u5730\u5740\u64cd\u4f5c &amp;x\"\n        B((\u53d6\u5730\u5740\u8fd0\u7b97\u7b26 &amp;))\n    end\n    subgraph \"\u6307\u9488 p\"\n        C[\u6307\u9488 p\\n\u5b58\u50a8\u7684\u5730\u5740: 0x7ffd5]\n    end\n    A --&gt;|\u5730\u5740| B\n    B --&gt;|\u8d4b\u503c| C\n    C -.-&gt;|\u6307\u5411| A</code></pre> <pre><code>int main(void) {\n    int *p;\n    int a=8;\n    p=&amp;a;\n    printf(\"%d\\n\",*p);//\u21928               \uff1a*p\u6307\u5411\u503c\n    printf(\"%p\\n\",p);//\u21920000005ff6bffaa4   \uff1ap\u8868\u793a\u5730\u5740\n    return 0;\n}\n</code></pre> <pre><code>void f(int *p);\nvoid g(int k);\nint main(void) {\n    int i =6;\n    printf(\"&amp;i=%p\\n\",&amp;i);\n    f(&amp;i);\n    g(i);\n    return 0;\n}\n\nvoid f(int *p) {\n    printf(\"p=%p\\n\",p);\n    printf(\"*p=%p\\n\",*p);\n    *p=26;//\u901a\u8fc7\u6307\u9488\u4fee\u6539\u503c\n}\n\nvoid g(int k) {\n    printf(\"k=%d\\n\",k);\n}\n-----------------------------&gt;\n&amp;i=000000050cfffd7c\np=000000050cfffd7c\n*p=0000000000000006\nk=26\n</code></pre>"},{"location":"C/9/#913","title":"9.1.3","text":""},{"location":"C/9/#_5","title":"\u6307\u9488\u7684\u4f7f\u7528","text":""},{"location":"C/9/#1","title":"1\u3001\u4e24\u4e2a\u53d8\u91cf\u505a\u4ea4\u6362\uff08\u4e4b\u524d\u53d8\u91cf\u90fd\u6709\u9650\u5b9a\u7684\u4f5c\u7528\u57df\uff09","text":"<pre><code>void swap(int *pa, int *pb);\n\nint main(void) {\n    int a=5;\n    int b=6;\n    swap (&amp;a,&amp;b);\n    printf(\"a=%d, b=%d\\n\",a,b);\n    return 0;\n}\nvoid swap(int *pa, int *pb) {\n    int t =*pa;\n    *pa=*pb;\n    *pb=t;\n}\n</code></pre>"},{"location":"C/9/#2return","title":"2\u3001\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u67d0\u4e9b\u503c\u8981\u6307\u9488\u5e26\u56de\uff08return\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\uff09","text":"<pre><code>void minmax(int a[],int len,int *max,int *min);\n\nint main (void) {\n    int a[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    int min,max;\n    minmax(a,sizeof(a)/sizeof(a[0]),&amp;max,&amp;min);\n    printf(\"min = %d,max = %d\\n\",min,max);\n    return 0;\n}\n\nvoid minmax(int a[],int len,int *max,int *min) {\n    int i;\n    *min =*max =a[0];\n    for (i=1;i&lt;len;i++) {\n        if (a[i]&lt;*min) {\n            *min = a[i];\n        }\n        if (a[i]&gt;*max) {\n            *max = a[i];\n        }\n    }\n\n}\n</code></pre> <p>3\u3001\u51fd\u6570\u8fd4\u56de\u8fd0\u7b97\u7684\u72b6\u6001\uff0c\u7ed3\u679c\u901a\u8fc7\u6307\u9488\u8fd4\u56de</p> <p>\u200b   \u5e38\u7528\u5957\u8def\uff1a\u8ba9\u51fd\u6570\u8fd4\u56dei\u7279\u6b8a\u7684\u4e0d\u5c5e\u4e8e\u6709\u6548\u8303\u56f4\u7684\u503c\u8868\u793a\u51fa\u9519\u2192-1/0</p> <pre><code>int divide(int a, int b,int *result);\n\nint main() {\n    int a=5;\n    int b=2;\n    int c;\n    if(divide(a,b,&amp;c)) {\n        printf(\"%d/%d=%d\\n\",a,b,c);\n    }\n    return 0;\n}\nint divide(int a, int b,int *result) {\n    int ret =1;\n    if (b==0) ret=0;\n    else {\n        *result=a/b;\n    }\n    return ret;\n}\n</code></pre> <p>Bug</p> <p>\u6307\u9488\u6ca1\u6709\u6307\u5411\u53d8\u91cf\u5730\u5740\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u6307\u9488</p>"},{"location":"C/9/#914","title":"9.1.4","text":""},{"location":"C/9/#_6","title":"\u6307\u9488\u548c\u6570\u7ec4","text":""},{"location":"C/9/#_7","title":"\u4f20\u5165\u6570\u7ec4\u6210\u4e86\u4ec0\u4e48\uff1f","text":"<pre><code>void minmax(int a[],int len,int *max,int *min);\n\nint main (void) {\n    int a[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    int min,max;\n    printf(\"main sizeof(a)=%llu\\n\",sizeof(a));//\u219260\n    printf(\"main a=%p\\n\",&amp;a);//\u219200000077c0fffe00\n    minmax(a,sizeof(a)/sizeof(a[0]),&amp;max,&amp;min);\n    printf(\"min = %d,max = %d\\n\",min,max);\n    return 0;\n}\n        //\ud83d\udc47a[]\u548c*a\u7b49\u4ef7\nvoid minmax(int a[],int len,int *max,int *min) {\n    int i;\n    printf(\"minmax sizeof(a)=%llu\\n\",sizeof(a));//\u21928\n    printf(\"minmax a=%p\\n\",&amp;a);//\u219200000077c0fffe00\n    *min =*max =a[0];\n    for (i=1;i&lt;len;i++) {\n        if (a[i]&lt;*min) {\n            *min = a[i];\n        }\n        if (a[i]&gt;*max) {\n            *max = a[i];\n        }\n    }\n}\n</code></pre> <p>Note</p> <ul> <li>\u51fd\u6570\u53c2\u6570\u8868\u4e2d\u7684\u6570\u7ec4\u5176\u5b9e\u662f\u6307\u9488</li> <li><code>sizeof(a) == sizeof(int*)</code></li> </ul>"},{"location":"C/9/#_8","title":"\u6570\u7ec4\u53d8\u91cf\u662f\u7279\u6b8a\u7684\u6307\u9488","text":"<p>\u6570\u7ec4\u672c\u8eab\u8868\u8fbe\u5730\u5740</p> <pre><code>int a[10];int *p=a;//\u65e0\u9700\u7528&amp;\u53d6\u5730\u5740\n</code></pre> <pre><code>a == &amp;a[0];       //\u6570\u7ec4\u5355\u5143\u8868\u793a\u53d8\u91cf\uff0c\u9700\u8981&amp;\u53d6\u5730\u5740\n</code></pre> <p><code>*</code>\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5bf9\u6307\u9488\u505a\u4e5f\u53ef\u4ee5\u5bf9\u6570\u7ec4\u505a</p> <pre><code> *a =25\uff1b\n</code></pre> <p>\u6570\u7ec4\u53d8\u91cf\u662f<code>const</code>\u6307\u9488\uff0c\u4e0d\u80fd\u88ab\u590d\u5236</p> <pre><code>int b[]-&gt;int *const b\n</code></pre>"},{"location":"C/9/#915","title":"9.1.5","text":""},{"location":"C/9/#_9","title":"\u6307\u9488\u4e0e\u53d8\u91cf","text":"<pre><code>int i;\nconst int* p1 = &amp;i;\nint const *p2 = &amp;i;\nint *const p3 = &amp;i;\n</code></pre> <p>Note</p> <p><code>const</code>\u5728<code>*</code>\u524d\uff1a\u6240\u6307\u7684\u4e1c\u897f\u4e0d\u80fd\u88ab\u4fee\u6539</p> <p><code>const</code>\u5728<code>*</code>\u540e\uff1a\u6307\u9488\u4e0d\u80fd\u88ab\u4fee\u6539</p>"},{"location":"C/9/#const","title":"<code>const</code>\u6570\u7ec4","text":"<pre><code>const int a[]={1,2,3,4,5,6,};\n//\u4e0d\u53ef\u4fee\u6539\uff0c\u5fc5\u987b\u521d\u59cb\u5316\n</code></pre>"},{"location":"C/9/#921","title":"9.2.1","text":""},{"location":"C/9/#_10","title":"\u6307\u9488\u8fd0\u7b97","text":"<pre><code>int main(void) {\n    //char\n    char ac[]={0,1,2,3,4,5,6,};\n    char *p =ac;\n    printf(\"p= %p\\n\",p);\n    printf(\"p+1= %p\\n\",p+1);\n\n    //int\n    int ai[]={0,1,2,3,4,5,6,};\n    int *q =ai;\n    printf(\"q= %p\\n\",q);\n    printf(\"q+1= %p\\n\",q+1);\n}\n------------------------&gt;\np= 0000006976dffbb9\np+1= 0000006976dffbba//+1\nq= 0000006976dffb90\nq+1= 0000006976dffb94//+4\n</code></pre> <pre><code>block-beta\n    columns 3\n  block:group1:3\n  %% columns auto (default)\n  1 2 3 \n end\n\n  block:group2:3\n    %% columns auto (default)\n     54 55 56 57 58 59 5a 5b 5c 5d 5e 5f\n  end\n\n</code></pre> <ul> <li><code>*p    -&gt;a[0]</code></li> <li><code>*(p+1)-&gt;a[1]</code></li> </ul> <p>\u5e76\u4e0d\u662f\u5728\u5730\u5740\u4e0a+1\uff0c\u5426\u5219\u6ca1\u6709\u610f\u4e49</p> <pre><code>int main(void) {\n    char ac[]={0,1,2,3,4,5,6,};\n    char *p =ac;//--&gt;\u7b49\u4ef7*p=&amp;ac[0]\n    char *p1=&amp;ac[5];\n    printf(\"p= %p\\n\",p);//p= 0000008992bff7c6\n    printf(\"p1= %p\\n\",p1);//p1= 0000008992bff7cb\n    printf(\"p1-p= %p\\n\",p1-p);//p1-p= 5\n\n    //0000008992bff7c6[HEX] - 0000008992bff7cb[HEX]= 5[DEC]\u2192 sizeof(char)*5\n\n    int ai[]={0,1,2,3,4,5,6,};\n    int *q =ai;\n    int *q1=&amp;ai[6];\n    printf(\"q= %p\\n\",q);//q= 00000039e4bffaf0\n    printf(\"q1= %p\\n\",q1);//q1= 00000039e4bffb08\n    printf(\"q1-q= %p\\n\",q1-q);//q1-q= 6\n\n    //00000039e4bffb08[HEX] - 00000039e4bffaf0[HEX]= 24[DEC]\u2192 sizeof(int)*6\n}\n</code></pre>"},{"location":"C/9/#p","title":"<code>*p++</code>","text":"<pre><code>int main(void) {\n    char ac[]={0,1,2,3,4,5,6,7,8,9,-1,};\n    char *p =&amp;ac[0];\n//\u7b2c\u4e00\u79cd\u904d\u5386\n    for(int i=0;i&lt;sizeof(ac)/sizeof(ac[0]);i++) {\n        printf(\"%d\\n\",ac[i]);\n    }\n//\u7b2c\u4e8c\u79cd\u904d\u5386\n    while(*p!=-1) {\n        printf(\"%d\\n\",*p++);\n    }\n}\n</code></pre>"},{"location":"C/9/#0","title":"<code>0</code>\u5730\u5740","text":"<pre><code>stateDiagram\n0\u5730\u5740\u53ef\u4ee5\u7528\u6765\u8868\u793a\u7279\u6b8a\u4e8b\u60c5--&gt;\u8fd4\u56de\u6307\u9488\u65e0\u6548\n0\u5730\u5740\u53ef\u4ee5\u7528\u6765\u8868\u793a\u7279\u6b8a\u4e8b\u60c5--&gt;\u6307\u9488\u6ca1\u6709\u88ab\u521d\u59cb\u5316</code></pre> <p>\u6307\u9488\u4e0d\u5e94\u8be5\u5177\u67090\u503c</p> <p><code>NULL</code>\u662f\u4e00\u4e2a\u9884\u5b9a\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u8868\u793a<code>0</code>\u5730\u5740</p> <ul> <li>\u6709\u7684\u7f16\u8bd1\u5668\u4e0d\u613f\u610f\u4f60\u7528<code>0</code>\u6765\u8868\u793a<code>0</code>\u5730\u5740</li> </ul>"},{"location":"C/9/#_11","title":"\u6307\u9488\u7c7b\u578b","text":"<p>\u6307\u5411\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u80fd\u4e92\u76f8\u76f4\u63a5\u8d4b\u503c\u2190\u4e3a\u907f\u514d\u7528\u9519\u6307\u9488</p>"},{"location":"C/9/#_12","title":"\u6307\u9488\u7c7b\u578b\u8f6c\u6362","text":"<p><code>void*</code> \u8868\u793a\u4e0d\u77e5\u9053\u6307\u5411\u4ec0\u4e48\u4e1c\u897f\u7684\u6307\u9488</p> <pre><code>int *p =&amp;i;\nvoid *q=(void*)p;\n//\u901a\u8fc7p\u770bi\u662fint\uff1b\u901a\u8fc7q\u770bi\u662fvoid\n</code></pre> <pre><code>stateDiagram\np--&gt;i :int\nq--&gt;i :void</code></pre>"},{"location":"C/9/#922","title":"9.2.2","text":""},{"location":"C/9/#_13","title":"\u52a8\u6001\u5185\u5b58\u5206\u914d","text":"<p>C99\u80fd\u7528\u53d8\u91cf\u505a\u6570\u7ec4\u5b9a\u4e49\u7684\u5927\u5c0f\uff0c\u4e4b\u524d\u5462\uff1f</p> <pre><code>int *a=(*int)malloc(*n*sizeof(int));\n//(int*) \u5c06 void* \u7c7b\u578b\u7684\u6307\u9488\u5f3a\u5236\u8f6c\u6362\u4e3a int* \u7c7b\u578b\u7684\u6307\u9488\uff0c\u4f7f\u5176\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\n</code></pre> <pre><code>//malloc\u6307\u4ee4\u5b9e\u8d28\nvoid *           malloc(size_t _Size);\n//\u6307\u9488\u6307\u5411\u5185\u5b58                  \u5f53\u4f5c\u6574\u6570  \n</code></pre> <pre><code>int main() {\n\n    int number;\n    int *a;\n    int i;\n    printf(\"Enter number:\");\n    scanf(\"%d\", &amp;number);//malloc \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a void* \u7c7b\u578b\u7684\u6307\u9488\n    a=(int*)malloc(number*sizeof(int));\n    for(i=0;i&lt;number;i++) {\n        scanf(\"%d\",&amp;a[i]);\n    }\n\n    for(i=number-1;i&gt;=0;i--) {\n        printf(\"%d\",a[i]);\n    }\n\n    free(a);// \u91ca\u653e\u4e4b\u524d\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\n\n    return 0;\n}\n</code></pre>"},{"location":"C/9/#_14","title":"\u6ca1\u7a7a\u95f4\u4e86\uff1f","text":"<p>\u7533\u8bf7\u5931\u8d25\u8fd4\u56de<code>NULL(0)</code></p> <pre><code>int main(void) {\n    void *p;// \u5b9a\u4e49\u4e00\u4e2a\u6307\u5411 void \u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf p\uff0c\u7528\u4e8e\u5b58\u653e malloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\n    int count=0;\n    while((p=malloc(100*1024*1024))) {//malloc \u51fd\u6570\u5c1d\u8bd5\u5206\u914d 100MB \u7684\u5185\u5b58\uff08100 * 1024 * 1024 \u5b57\u8282\uff09\n        count++;\n    }\n    printf(\"%d\\n\",count);//Given 58800MB of memory space\n    return 0;\n}\n</code></pre>"},{"location":"C/9/#free","title":"<code>free()</code>","text":"<ul> <li>\u628a\u7533\u8bf7\u8fc7\u7684\u7a7a\u95f4\u8fd8\u7ed9\u201c\u7cfb\u7edf\u201d</li> <li>\u53ea\u80fd\u8fd8\u7533\u8bf7\u6765\u7684\u7a7a\u95f4\u7684\u9996\u5730\u5740</li> </ul> <p>\u826f\u597d\u4e60\u60ef\uff1a\u5b9a\u4e49\u6307\u9488\u5c31\u521d\u59cb\u4e3a0</p>"},{"location":"C/9/#_15","title":"\u5e38\u89c1\u95ee\u9898","text":"<ul> <li>\u7533\u8bf7\u4e86\u6ca1\u6709`free\u2192\u957f\u65f6\u95f4\u8fd0\u884c\u5185\u5b58\u9010\u6e10\u4e0b\u964d</li> <li><code>free</code>\u8fc7\u4e86\u518d<code>free</code></li> <li>\u5730\u5740\u53d8\u8fc7\u4e86\uff0c\u76f4\u63a5\u53bb<code>free</code></li> </ul>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/","title":"1.\u6982\u8ff0","text":"1  <p>\u6570\u636e\u7ed3\u6784\u662f\u5728\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u3001\u7ec4\u7ec7\u6570\u636e\u7684\u65b9\u5f0f\u3002\u5c0f\u5230\u53d8\u91cf\u3001\u6570\u7ec4\uff0c\u5927\u5230\u7ebf\u6bb5\u6811\u3001\u5e73\u8861\u6811\uff0c\u90fd\u662f\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u7a0b\u5e8f\u8fd0\u884c\u79bb\u4e0d\u5f00\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\u53c8\u5404\u6709\u4f18\u52a3\uff0c\u80fd\u591f\u5904\u7406\u7684\u95ee\u9898\u5404\u4e0d\u76f8\u540c\uff0c\u800c\u6839\u636e\u5177\u4f53\u95ee\u9898\u9009\u53d6\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u5347\u7a0b\u5e8f\u7684\u6548\u7387\u3002\u6240\u4ee5\uff0c\u5b66\u4e60\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u7ed3\u6784\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002</p> <ul> <li>1<ul> <li>1.1.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5</li> <li>1.1.2 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20<ul> <li>\u903b\u8f91\u7ed3\u6784</li> <li>\u6570\u636e\u7684\u8fd0\u7b97</li> <li>\u7269\u7406\u7ed3\u6784\uff08\u5b58\u50a8\u7ed3\u6784\uff09</li> <li>*\u6570\u636e\u7c7b\u578b\u3001\u62bd\u8c61\u6570\u636e\u7c7b\u578b<ul> <li>\u6570\u636e\u7c7b\u578b</li> <li>\u62bd\u8c61\u6570\u636e\u7c7b\u578b</li> </ul> </li> </ul> </li> <li>1.2.1 \u7b97\u6cd5\u57fa\u672c\u6982\u5ff5<ul> <li>\u7b97\u6cd5\u7279\u6027</li> </ul> </li> <li>1.2.2 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> <li>1.2.3 \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6</li> <li>\u603b\u7ed3\uff08\u7b97\u6cd5\u6548\u7387\u5ea6\u91cf\uff09</li> </ul> </li> </ul>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#1","title":"1","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#111","title":"1.1.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5","text":"<p>\u6570\u636e\u2192\u6570\u636e\u5bf9\u8c61\u2192\u6570\u636e\u5143\u7d20\u2192\u6570\u636e\u9879</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#112","title":"1.1.2 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_1","title":"\u903b\u8f91\u7ed3\u6784","text":"<p>\u96c6\u5408\u3001\u7ebf\u6027\u3001\u6811\u5f62\u3001\u56fe\u72b6</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_2","title":"\u6570\u636e\u7684\u8fd0\u7b97","text":"<p>\u57fa\u672c\u8fd0\u7b97\uff1a</p> <p>\u2460\u67e5\u627e\u7b2c<code>i</code>\u4e2a\u6570\u636e\u5143\u7d20</p> <p>\u2461\u5728\u7b2c<code>i</code>\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u7684\u6570\u636e\u5143\u7d20</p> <p>\u2462\u5220\u9664\u7b2c<code>i</code>\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\u5143\u7d20</p> <p>\u2026\u2026</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_3","title":"\u7269\u7406\u7ed3\u6784\uff08\u5b58\u50a8\u7ed3\u6784\uff09","text":"<p>\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u8868\u793a\u903b\u8f91\u5173\u7cfb</p> <p>Note</p> <ul> <li> <p>\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784\u4f1a\u5f71\u54cd\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u7684\u65b9\u4fbf\u7a0b\u5ea6</p> </li> <li> <p>\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784\u4f1a\u5f71\u54cd\u5bf9\u6570\u636e\u8fd0\u7b97\u7684\u901f\u5ea6 </p> </li> </ul>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_4","title":"*\u6570\u636e\u7c7b\u578b\u3001\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>\u200b   \u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u6b64\u96c6\u5408\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0</p> <p>\u200b       1)\u539f\u5b50\u7c7b\u578b\uff1a\u5176\u503c\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u7c7b\u578b</p> <p>\u200b       2)\u7ed3\u6784\u7c7b\u578b\uff1a\u5176\u503c\u53ef\u4ee5\u518d\u5206\u89e3\u4e3a\u82e5\u5e72\u6210\u5206\uff08\u5206\u91cf\uff09\u7684\u6570\u636e\u7c7b\u578b</p> <p>\u200b   \u62bd\u8c61\u6570\u636e\u7c7b\u578b(Abstract Data Type,ADT)\u662f\u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u4e0e\u4e4b\u76f8\u5173\u7684\u64cd\u4f5c\u3002</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_5","title":"\u6570\u636e\u7c7b\u578b","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_6","title":"\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#121","title":"1.2.1 \u7b97\u6cd5\u57fa\u672c\u6982\u5ff5","text":"\\[ \u7a0b\u5e8f=\u6570\u636e\u7ed3\u6784+\u7b97\u6cd5 \\]"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_7","title":"\u7b97\u6cd5\u7279\u6027","text":"<p>\u2460\u6709\u7a77\u6027\u2192\u7a0b\u5e8f\u53ef\u4ee5\u662f\u65e0\u7a77\u7684\u7684</p> <p>\u2461\u786e\u5b9a\u6027\uff1a\u76f8\u540c\u8f93\u5165\u5f97\u5230\u76f8\u540c\u8f93\u51fa</p> <p>\u2462\u53ef\u884c\u6027\uff1a0/\u591a\u4e2a \u8f93\u5165 \u200b         1/\u591a\u4e2a \u8f93\u51fa</p> <p>\u2463\u8f93\u5165</p> <p>\u2464\u8f93\u51fa</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#122","title":"1.2.2 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#123","title":"1.2.3 \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<p>[!TIP]</p> <p>\u7b97\u6cd5\u539f\u5730\u5de5\u4f5c\uff1a\u7b97\u6cd5\u6240\u9700\u5185\u5b58\u7a7a\u95f4\u4e3a\u5e38\u91cf</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_8","title":"\u603b\u7ed3\uff08\u7b97\u6cd5\u6548\u7387\u5ea6\u91cf\uff09","text":""},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/","title":"2.\u94fe\u8868","text":"Linked List\ud83d\udcc3   <ul> <li>List</li> <li>Linked List</li> <li>Array vs Linked List</li> <li>Implementation in C/C++(singly-linked list)<ul> <li>\u203c\ufe0fBasics\uff1aTraversal of the list</li> <li>1\uff09Insert in the beginning</li> <li>2\uff09Insert in the middle</li> <li>3\uff09Delete in a list</li> <li>4\uff09Reverse a linked list<ul> <li>\u2460Iteration way</li> <li>\u2461Recursion way to print</li> <li>\u2462Recursion way</li> </ul> </li> </ul> </li> <li>Doubly Linked List</li> <li>Implementation in C/C++(doubly-linked list)</li> </ul>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#list","title":"List","text":"<p>question: can\u2019t I do it with arrays?</p> <ul> <li>empty list has size 0</li> <li>insert/remove/count</li> <li>read/modify</li> <li>specify data-type</li> </ul> <p>When array is full, create a new larger array ,copy previous array into the new array.</p> <p>free the memory of the previous array</p> <ol> <li>Access-read/write \u2013O(1)</li> <li>Insert/remove/add \u2013 O(n)</li> </ol>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#linked-list","title":"Linked List","text":"<pre><code>struct Node{\n    int data;   //4 bytes\n    Node *next; //4 bytes\n}\n</code></pre> <p>address of the head node gives us the access to the complete list</p> <ol> <li>Access to element \u2013O(n)</li> <li>Insert/remove/add \u2013 O(n)</li> </ol>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#array-vs-linked-list","title":"Array vs Linked List","text":"<ul> <li> Array Linked List 1)Cost of accessing an element constant time\u2013O(1) Average case\u2013O(n) 2)Memory usage fixed size no unused memory memory may not be available as a large block extra memory for pointer variables memory may be available as multiple small blocks 3)Cost of inserting/deleting an element a) at beginning -O(n) a)-O(1) b)at end -O(1) b)-O(n) 4)Easy to use \u2714\ufe0f \u274c </li> </ul>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#implementation-in-ccsingly-linked-list","title":"Implementation in C/C++(singly-linked list)","text":"<pre><code>Node *A;\nA=NULL;//empty list\nNode *temp=(*Node)malloc(sizeof(Node));//C\nNode *temp=new Node();//C++\n(*temp).data=2;\n//OR\ntemp-&gt;data=2;\n\n(*temp).link=NULL;\n//OR\ntemp-&gt;link=NULL;\nA=temp;\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#basicstraversal-of-the-list","title":"\u203c\ufe0fBasics\uff1aTraversal of the list","text":"<pre><code>while(temp1-&gt;link!=NULL){\n    temp1=temp1-&gt;link;\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#1insert-in-the-beginning","title":"1\uff09Insert in the beginning","text":"<pre><code>//Insert in the beginning\nstruct Node {\n    int data;\n    Node* next;\n};\n\n\nstruct Node*head;//global variable\n\n\nvoid Insert(int x) {\n    struct Node *temp=(Node*)malloc(sizeof(struct Node));\n    //or---------\n    Node *temp=new Node();//C++\n    //-------------\n    temp-&gt;data=x;\n    temp-&gt;next=head;\n    head=temp;\n}\nvoid Print() {\n    struct Node* temp=head;\n    printf(\"List is:\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nint main(){\n    head=NULL;//empty list\n    printf(\"How many numbers?\");\n    int n,i,x;\n    scanf(\"%d\",&amp;n);\n    for(i=0;i&lt;n;i++) {\n        printf(\"Enter number:\");\n        scanf(\"%d\",&amp;x);\n        Insert(x);\n        Print();\n    }\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#2insert-in-the-middle","title":"2\uff09Insert in the middle","text":"<pre><code>struct Node {\n    int data;\n    Node*next;\n};\n\nstruct Node*head;//pointer to the head\n\nvoid Insert(int data,int n);\nvoid Print();\n\nint main() {\n    head=NULL;      //empty list\n    Insert(2,1);    //List:2\n    Insert(3,2);    //List:2,3\n    Insert(4,1);    //list:4,2,3\n    Insert(5,2);    //List:4,5,2,3\n    Print();\n}\n//-------------------------------------------------------------------------------------------\nvoid Insert(int data,int n) {\n    Node *temp1=new Node();\n    temp1-&gt;data=data;\n    temp1-&gt;next=NULL;\n    if(n==1) {//in case to insert in the beginning\n        temp1-&gt;next=head;\n        head=temp1;\n        return;\n    }\n    Node *temp2=head;//temp2 is an aid for finding the position\n    for(int i=0;i&lt;n-2;i++) {\n        temp2=temp2-&gt;next;\n    }//go to the n-1 node\n    temp1-&gt;next=temp2-&gt;next;\n    temp2-&gt;next=temp1;\n}\n//-------------------------------------------------------------------------------------------\nvoid Print() {\n    Node *temp=head;\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#3delete-in-a-list","title":"3\uff09Delete in a list","text":"<ul> <li>fix the links</li> <li>free the space from memory</li> </ul> <pre><code>struct Node {\n    int data;\n    Node*next;\n};\nstruct Node*head;                  //global\n\nvoid Insert(int data);              //insert at the end of the list\nvoid Print();                       //print all the elements in the list\nvoid Delete(int n);                 //delete node at position n\n\nint main() {\n    head = NULL;\n    Insert(2);\n    Insert(4);\n    Insert(6);\n    Insert(5);          //List:5,6,4,2\n    int n;\n    printf(\"Enter a position:\\n\");\n    scanf(\"%d\", &amp;n);\n    Delete(n);\n    Print();\n}\n\n//-------------------------------------------------------------------------------------------\n\nvoid Delete(int n) {\n    Node*temp1=head;\n    int i;\n    if(n==1) {\n        head=temp1-&gt;next;\n        free(temp1);\n        return;\n    }\n\n    for(i=0;i&lt;n-2;i++) {\n        temp1=temp1-&gt;next;\n    }                               //temp1 points to the (n-1)th node\n    struct Node*temp2=temp1-&gt;next;\n    temp1-&gt;next=temp2-&gt;next;\n    free(temp2);                    //delete temp2\n}\n//-------------------------------------------------------------------------------------------\n\nvoid Insert(int x) {\n    struct Node *temp=new Node();\n    temp-&gt;data=x;\n    temp-&gt;next=head;\n    head=temp;\n}\nvoid Print() {\n    Node*temp=head;\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#4reverse-a-linked-list","title":"4\uff09Reverse a linked list","text":""},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#1iteration-way","title":"\u2460Iteration way","text":"<pre><code>void Reverse() {\n    Node *next,*prev,*current;\n    current=head;\n    prev=NULL;\n    while(current!=NULL) {\n        next=current-&gt;next;\n        current-&gt;next=prev;\n        prev=current;\n        current=next;\n    }\n    head=prev;\n}\n</code></pre> <p>e.g.</p> <pre><code>struct Node {\n    int data;\n    Node* next;\n};\n\nstruct Node* head;\n\nstruct Node* Insert(Node* head, int data);\nvoid Print(Node* head);\nstruct Node* Reverse(Node* head);\n\nint main() {\n    head = NULL;\n    head = Insert(head, 2);\n    head = Insert(head, 4);\n    head = Insert(head, 6);\n    head = Insert(head, 8);\n    head = Reverse(head);\n    Print(head);\n}\n\nstruct Node* Insert(Node* head, int data) {\n    Node* temp = new Node();\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n\n    if (head == NULL) {\n        head = temp;\n    } else {\n        Node* current = head;\n        while (current-&gt;next != NULL) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = temp;\n    }\n    return head;\n}\n\nvoid Print(Node* head) {\n    while (head != NULL) {\n        std::cout &lt;&lt; head-&gt;data &lt;&lt; \" \";\n        head = head-&gt;next;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nstruct Node* Reverse(Node* head) {\n    Node* next = NULL;\n    Node* prev = NULL;\n    Node* current = head;\n\n    while (current != NULL) {\n        next = current-&gt;next;\n        current-&gt;next = prev;\n        prev = current;\n        current = next;\n    }\n    head = prev;\n    return head;\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#2recursion-way-to-print","title":"\u2461Recursion way to print","text":"<p>Tip</p> <p>Recursion is like calling or using itself in the function</p>      Normal print  <pre><code>void Print(struct Node* p) {\n    //recursion\n    //2 6 5 4\n    if(p==NULL) return;           //Exit Recursion, prevent dead loop\n    printf(\"%d \",p-&gt;data);  //First print the value int the node\n    Print(p-&gt;next);               //Recursive call\n}\n</code></pre> Reverse print <pre><code>void ReversePrint(struct Node* q) {\n    //recursion\n    //4 5 6 2\n    if(q==NULL) return;           //Exit Recursion\n    ReversePrint(q-&gt;next);               //First do a Recursive call\n    printf(\"%d \",q-&gt;data);  //print the value int the node\n}\n</code></pre> <p>e.g.</p> <pre><code>struct Node {\n    int data;\n    Node*next;\n};\n\nstruct Node* Insert(Node* head, int data) {\n    Node *temp=new Node;\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n    if (head == NULL) {\n        head = temp;\n    } else {\n        Node *current = head;\n        while (current-&gt;next != NULL) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = temp;\n    }\n    return head;\n}\n\n\nvoid Print(struct Node* p) {\n    //recursion\n    //2 6 5 4\n    if(p==NULL) return;           //Exit Recursion\n    printf(\"%d \",p-&gt;data);  //First print the value int the node\n    Print(p-&gt;next);               //Recursive call\n}\n\nvoid ReversePrint(struct Node* q) {\n    //recursion\n    //4 5 6 2\n    if(q==NULL) return;           //Exit Recursion\n    ReversePrint(q-&gt;next);               //First do a Recursive call\n    printf(\"%d \",q-&gt;data);  //print the value int the node\n}\n\nint main() {\n    struct Node* head = NULL;//local variable,empty list \n    head = Insert(head,2);\n    head = Insert(head,4);\n    head = Insert(head,6);\n    head = Insert(head,5);\n    Print(head);\n    printf(\"\\n\");\n    ReversePrint(head);\n}\n</code></pre> <p></p> Recursion tree"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#3recursion-way","title":"\u2462Recursion  way","text":"<pre><code>struct Node*head;//global\nvoid Reverse(struct Node*p) {\n    if(p-&gt;next==NULL) {             //exit condition\n        head=p;\n        return;\n    }\n    Reverse(p-&gt;next);\n    //make reverse link\n    Node *q=p-&gt;next;\n    q-&gt;next=p;\n    p-&gt;next=NULL;\n}\n</code></pre> <p>Tip</p> C++ <pre><code>Node *q=p-&gt;next;\nq-&gt;next=p;\n//can also be written as \np-&gt;next-&gt;next=p\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#doubly-linked-list","title":"Doubly Linked List","text":"singly linked list  <p>Doubly linked list</p> <ul> <li>one link to the previous and one link to the next</li> </ul> <p><pre><code>struct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n</code></pre> </p>      doubly linked list  <p>Important</p> pros cons Reverse look-up Extra memory for pointer to the previous node"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#implementation-in-ccdoubly-linked-list","title":"Implementation in C/C++(doubly-linked list)","text":"wrong way <ul> <li> <p>The problem with using the  \u201c&amp;\u201d operator: The stack frame of GNN will be reclaimed and even if you have the address of e.g. 50, you won't be able to get it.-&gt;It doesn't create anything in the heap.</p> </li> <li> <p>The only way to access something in heap is through a pointer.</p> </li> </ul> <p></p> right way <p>Create new Node</p> <pre><code>struct Node *GetNewNode(int x) {\n    Node *newNode=new Node;\n    newNode-&gt;data=x;\n    newNode-&gt;prev=NULL;\n    newNode-&gt;next=head;\n    return newNode;\n}\n</code></pre> <p>Insert Ahead</p> <pre><code>void InsertAhead(int x) {\n    struct Node *newNode = GetNewNode(x);   //the newNode here is a local variable different from the one in the function GetNewNode,just share the same name\n    if(head==NULL) {//when list is empty\n        head=newNode;\n        return;\n    }\n    head-&gt;prev=newNode;\n    newNode-&gt;next=head;\n    head=newNode;\n}\n</code></pre> <p>Normal print/Reverse print</p> <pre><code>void Print() {\n    Node* temp=head;\n    printf(\"Forward:\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nvoid ReversePrint() {\n    Node *temp=head;\n    if(temp==NULL) return;//empty list,exit\n    //Going to last node\n    while(temp-&gt;next!=NULL) {\n        temp=temp-&gt;next;\n    }\n    //traversing backward using prev pointer\n    printf(\"Reverse :\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;prev;\n    }\n    printf(\"\\n\");\n}\n</code></pre> <p>e.g.</p> <pre><code>//using the functions upon\u2026\u2026 \nint main() {\n    head=NULL;\n    InsertAhead(2);Print();ReversePrint();\n    InsertAhead(3);Print();ReversePrint();\n    InsertAhead(4);Print();ReversePrint();\n    InsertAhead(5);Print();ReversePrint();\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/","title":"3.\u6808","text":"Stacks\ud83d\udd73\ufe0f   <ul> <li>Stack ADT</li> <li>Implementation in C/C++<ul> <li>1) Array implementation</li> <li>2) Linked List Implementation</li> </ul> </li> <li>Using stack to reverse<ul> <li>1) Reverse a string</li> <li>2) Reverse a linked list<ul> <li>explicit way</li> </ul> </li> </ul> </li> <li>Check for balanced parentheses</li> <li>Infix,Postfix,Prefix<ul> <li>1\uff09Intro<ul> <li>\u2460Infix</li> <li>\u2461Prefix</li> <li>\u2462Postfix</li> </ul> </li> <li>2\uff09Evaluation of Prefix and Postfix expressions</li> <li>3\uff09Infix to Postfix</li> </ul> </li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#stack-adt","title":"Stack ADT","text":"<p>ADT:</p> <ul> <li>only talk about features/operations\u2714\ufe0f</li> <li>no implementation\u274c</li> </ul> <p></p> <p>Tip</p> <p>You can only get access to the one on top\u2192     Last In First Out (LIFO)</p> <ul> <li>Definition: A list with the restriction that insertion and deletion can be performed only from one end, called the top.</li> </ul> operations O(1) (1)<code>Push</code> push x into the stack (2)<code>Pop</code> Remove the latest element from stack (3)<code>Top</code> return element at the top (4)<code>IsEmpty</code> return T/F Info <p>Application</p> <ul> <li>Function calls/Recursion</li> <li>undo in an editor</li> <li>balanced parentheses<code>(){}[]</code></li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#implementation-in-cc","title":"Implementation in C/C++","text":"<p>We can implement stacks in :</p> <p>\u200b   a) arrays</p> <p>\u200b   b) linked list</p>"},{"location":"DataStruct/3.%E6%A0%88/#1-array-implementation","title":"1)  Array implementation","text":"logical diagram <p>Warning</p> <ul> <li> <p>Only be done when an overflow doesn\u2019t happen</p> </li> <li> <p>Solution: create a larger array.(twice the size of the smaller array) Copy all element in the new array </p> </li> <li> Push O(1)\u2013Best O(n)\u2013Worst O(1)\u2013Average O(n) for n pushes </li> </ul> <pre><code>#define MAX_SIZE 101\nint A[MAX_SIZE];\nint top=-1;\nvoid Push(int x) {\n    if(top==MAX_SIZE-1) {\n        printf(\"Stack Overflow\\n\");\n    }\n    A[++top]=x;\n}\nvoid Pop() {\n    if(top==-1) {\n        printf(\"Stack Underflow\\n\");\n    }\n    top--;\n}\nint Top() {\n    return A[top];\n}\n\nvoid Print() {\n    int i;\n    printf(\"Stack:\\n\");\n    for(i=top;i&gt;=0;i--) {\n        printf(\"%d\\n\",A[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Push(2);Print();\n    Push(5);Print();\n    Push(10);Print();\n    Pop();Print();\n    Push(12);Print();\n\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/#2-linked-list-implementation","title":"2)  Linked List Implementation","text":"<p>insert a new in the linked list </p> <ul> <li>create a new node</li> <li>insert /delete</li> <li>at the end(tail)\u2013<code>O(n)</code></li> <li>at beginning\u2013<code>O(1)</code></li> </ul> <p> <pre><code>struct Node {\n    int data;\n    Node *link;\n};\n\nstruct Node *top=NULL;//it means the same as Node *head=NULL;\n\nvoid Push(int x) {\n    Node *temp=new Node;\n    temp-&gt;data=x;\n    temp-&gt;link=top;\n    top=temp;\n}\n\nvoid Pop() {\n    Node *temp;\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    temp=top;\n    top=top-&gt;link;                  //making top point to the second node\n    delete temp;                    //in C++ use new/delete instead of malloc/free in C\n}\n\nvoid Top() {\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    printf(\"%d\\n\",top-&gt;data);\n}\n\nvoid IsEmpty() {\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }else {\n        printf(\"Stack is not empty\\n\");\n    }\n}\n\nvoid Print() {\n    Node *temp=top;\n    printf(\"Stack is : \");\n    while(temp!=NULL) {                     //traversal of the linked list\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;link;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Push(5);Print();IsEmpty();\n    Pop();Print();IsEmpty();\n    Push(6);Print();IsEmpty();\n    Push(7);Print();IsEmpty();\n    Push(8);Print();IsEmpty();\n    return 0;\n}\n</code></pre></p> <p>Note</p> <ul> <li>Don't need to worry about overflow</li> <li>use memory only when needed -&gt;more graceful</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#using-stack-to-reverse","title":"Using stack to reverse","text":"<ul> <li>1) Reverse a string   2) Reverse a linked list</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#1-reverse-a-string","title":"1)  Reverse a string","text":"<p>use the characteristics of Stack \u2013(LIFO)</p> <p> <pre><code>#include &lt;stack&gt;                        //stack from standard template library\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid Reverse(char C[],int n) {\n    stack&lt;char&gt; S;                      //create a stack\n    //loop for push\n    for(int i=0;i&lt;n;i++) {\n        S.push(C[i]);\n    }\n    //loop for pop\n    for(int i=0;i&lt;n;i++) {\n        C[i]=S.top();                   //overwrite the character at index i\n        S.pop();                        //perform pop\n    }\n\n}\n\nint main(){\n    char C[51];\n    printf(\"Eneter a string: \");\n    gets(C);\n    Reverse(C,strlen(C));\n    printf(\"Output is %s\",C);\n}\n</code></pre></p> <p>Note</p> <ul> <li>Time-Complexity=<code>O(n)</code></li> <li>Space-Complexity=<code>O(n)</code></li> </ul> <p></p> <ul> <li>easier way</li> </ul> <ul> <li>swap char[i] and char[j] while i&lt;j;</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#2-reverse-a-linked-list","title":"2)  Reverse a linked list","text":"Iterative solution(Explicit Stack) Recursive solution(Implicit Stack) time\u2013O(n) time\u2013O(n) Space\u2013O(1) Space\u2013O(n)"},{"location":"DataStruct/3.%E6%A0%88/#explicit-way","title":"explicit way","text":"<pre><code>void Reverse() {\n    if(head==NULL) return;\n    stack&lt;Node*&gt;S;\n    while (temp!=NULL) {\n        //To push all references (traversal)\n        S.push(temp);\n        temp=temp-&gt;next;\n    }\n    Node *temp=S.top();\n    head=temp;\n    S.pop;\n    while(!S.empty()) {\n        temp-&gt;next=S.top();\n        S.pop();\n        temp=temp-&gt;next;\n    }\n    temp-&gt;next=NULL;\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/#check-for-balanced-parentheses","title":"Check for balanced parentheses","text":"<p>solution:</p> <ul> <li>scan from left to right</li> <li>if opening symbol, add it to a list(Push it in a stack)</li> <li>if closing symbol, remove last opening symbol in list(Pop it from a stack)</li> <li>should end with an empty list</li> </ul> <pre><code>Check for balanced Parentheses(exp){\n    n\u2190length(exp)\n    Create a stack S;\n    for i from 0 to n-1{\n        if (exp[i] is \"(\" or\"[\" or \"{\"){\n            Push(exp[i])\n            }else if(exp[i] is \")\" or\"]\" or \"}\")\n                if(S is empty){\n                    return false;\n                }else{\n                    Pop()\n                }\n            }\n\n    }\n}\nif S is empty true\nelse:  false\n</code></pre> <pre><code>#include &lt;string.h&gt;\n#include &lt;stdbool.h&gt;\n\nbool CheckforParentheses(char* expression) {\n    int n = strlen(expression);\n    char S[100];\n    int top = -1;// Stack to store the parentheses\n\n    for (int i = 0; i &lt; n; i++) {\n        if (expression[i] == '(' ||\n            expression[i] == '[' ||\n            expression[i] == '{'    ) {\n            S[++top] = expression[i];\n            } else if (expression[i] == ')' ||\n                       expression[i] == ']'||\n                       expression[i]=='}') {\n                if (top == -1) {\n                    return false;\n                } if (\n                    (expression[i] == ')' &amp;&amp; S[top] == '(') ||\n                    (expression[i] == ']' &amp;&amp; S[top] == '[') ||\n                    (expression[i] == '}' &amp;&amp; S[top] == '{')) {\n                    top--;\n                    }else {\n                        return false;\n                    }\n                       }\n    }\n    return top==-1;//return true if all parentheses are matched\n}\n\nint main() {\n    char expression[100];\n    printf(\"Enter an expression: \");\n    fgets(expression, sizeof(expression), stdin);\n    expression[strcspn(expression, \"\\n\")] = '\\0'; //Remove \\n from string\n    CheckforParentheses(expression);\n    if (CheckforParentheses(expression)) {\n        printf(\" The expression is valid\\n\");\n    } else {\n        printf(\"The expression is invalid\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/#infixpostfixprefix","title":"Infix,Postfix,Prefix","text":""},{"location":"DataStruct/3.%E6%A0%88/#1intro","title":"1\uff09Intro","text":""},{"location":"DataStruct/3.%E6%A0%88/#1infix","title":"\u2460Infix","text":""},{"location":"DataStruct/3.%E6%A0%88/#2prefix","title":"\u2461Prefix","text":""},{"location":"DataStruct/3.%E6%A0%88/#3postfix","title":"\u2462Postfix","text":""},{"location":"DataStruct/3.%E6%A0%88/#2evaluation-of-prefix-and-postfix-expressions","title":"2\uff09Evaluation of  Prefix and Postfix expressions","text":"<p>Success</p> <p>Postfix\uff1a</p> <ul> <li> <p>Look for pattern <code>&lt;num&gt;&lt;num&gt;&lt;operator&gt;</code>(from left to right)</p> </li> <li> <p></p> </li> </ul> <pre><code>//Sudo code\nEvaluatePostfix(exp){\n   create a stack S;\n   for i to lenngth(exp)-1{\n       if(exp[i] is operand){\n           Push(exp[i])\n       }else if(exp[i] is operator){\n           op2 Pop;\n           op1 Pop;\n           res=Preform(exp[i],op1,op2);\n           Push(res)\n       }\n   }\n   return top of stack\n}\n</code></pre> <p>Prefix\uff1a</p> <ul> <li>Look for pattern <code>&lt;num&gt;&lt;num&gt;&lt;operator&gt;</code></li> <li>Difference from Postfix: scan from right to left</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#3infix-to-postfix","title":"3\uff09Infix to Postfix","text":"<pre><code>//Sudo code\nInfixToPostfix(exp){\n    create a stack s;\n    res-&gt;empty string;\n    for i from 0 to length (exp)-1{\n        if exp[i] is operand {\n            res&lt;-res+exp[i];\n        }\n        else if exp[i] is operator{\n            while(!=s.empty()&amp;&amp;HasHigherPrec(s.top(),exp[i])){\n                res&lt;-res+s.top();\n                s.Pop()\n            }\n            s.Push(exp[i]);\n        }\n        while(!s.empty()){\n            res&lt;-res+s.top();\n            s.pop();\n        }\n    }\n    return res;\n}\n</code></pre>"},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/","title":"4.\u961f\u5217","text":"Queues  <ul> <li>Queue ADT</li> <li>Implementation of Queues<ul> <li>1 \uff09Array Implementation</li> </ul> </li> </ul>"},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/#queue-adt","title":"Queue ADT","text":"<p>A list or collection that its insertion can be performed from at one end(rear) and deletion can be performed at other end(front)</p> <p>Note</p> <p>Operations</p> <ul> <li><code>EnQueue(x)</code> or<code>Push(x)</code></li> <li><code>Dequeue()</code>or<code>Pop()</code></li> <li><code>front()</code>or<code>Peek()</code></li> <li><code>IsEmpty()</code></li> </ul> <pre><code>void EnQueue(int x);\nint Dequeue;\n</code></pre> <p></p>"},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/#implementation-of-queues","title":"Implementation of Queues","text":""},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/#1-array-implementation","title":"1 \uff09Array Implementation","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/","title":"\u7efc\u5408","text":"Code Practice  <ul> <li>\u4e00\u3001STL<ul> <li>1\u3001vector<ul> <li>e.g.1# \u3010\u6df1\u57fa15.\u4f8b2\u3011\u5bc4\u5305\u67dc</li> </ul> </li> <li>2\u3001 \u961f\u5217<ul> <li>e.g.2# \u7ea6\u745f\u592b\u95ee\u9898</li> <li>e.g.3[NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1</li> </ul> </li> <li>3\u3001Stack \u6808<ul> <li>e.g.4\u62ec\u53f7\u5e8f\u5217</li> </ul> </li> <li>4\u3001\u6742\u9898\uff08\u5b57\u5178\u5e8f\uff09<ul> <li>e.g.5#String Minimization</li> </ul> </li> </ul> </li> <li>\u4e8c\u3001\u4e8c\u53c9\u6811<ul> <li>1\u3001\u5206\u7c7b<ul> <li>\uff081\uff09\u6ee1\u4e8c\u53c9\u6811</li> <li>\uff082\uff09\u5b8c\u5168\u4e8c\u53c9\u6811</li> <li>\uff083\uff09\u9000\u5316\u4e8c\u53c9\u6811</li> <li>\uff084\uff09\u5b8c\u7f8e\u4e8c\u53c9\u6811</li> </ul> </li> <li>2\u3001\u9759\u6001\u5199\u6cd5</li> <li>3\u3001\u4e09\u79cd\u904d\u5386\u65b9\u5f0f<ul> <li>e.g.6\u4e8c\u53c9\u6811\u7684\u904d\u5386</li> <li>e.g.7[NOIP2004 \u666e\u53ca\u7ec4] FBI \u6811</li> </ul> </li> </ul> </li> <li>\u4e09\u3001DFS<ul> <li>e.g.8[NOIP1998 \u666e\u53ca\u7ec4] \u5e42\u6b21\u65b9</li> </ul> </li> <li>\u56db\u3001\u5e76\u67e5\u96c6<ul> <li>\u67e5\u8be2</li> <li>\u2192\u65b9\u6cd5\uff1a\u8def\u5f84\u538b\u7f29<ul> <li>e.g.9\u4eb2\u621a\uff08\u6a21\u677f\uff09</li> <li>e.g.10[\u84dd\u6865\u676f 2017 \u56fd C] \u5408\u6839\u690d\u7269</li> <li>e.g.11[USACO16OPEN] Closing the Farm S</li> </ul> </li> </ul> </li> </ul>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_1","title":"\u7efc\u5408","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#stl","title":"\u4e00\u3001STL","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#1vector","title":"1\u3001vector","text":"Tip <p>\u987a\u5e8f\u5bb9\u5668\uff0c\u4efb\u610f\u7c7b\u578b\u52a8\u6001\u6570\u7ec4</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt; v(n);\n    for(int i=0;i&lt;n;i++) {\n        cin&gt;&gt;v[i];\n    }\n    for(int i=0;i&lt;n;i++) {\n        cout&lt;&lt;v[i]+1&lt;&lt;\" \";\n    }\n}\n</code></pre> <pre><code>v.resize(2*n);\ncout&lt;&lt;v.size()&lt;&lt;endl;\n</code></pre> <pre><code> insert /pushback\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg1-152","title":"e.g.1# \u3010\u6df1\u57fa15.\u4f8b2\u3011\u5bc4\u5305\u67dc","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8d85\u5e02\u91cc\u6709 \\(n(1\\le n\\le10^5)\\) \u4e2a\u5bc4\u5305\u67dc\u3002\u6bcf\u4e2a\u5bc4\u5305\u67dc\u683c\u5b50\u6570\u91cf\u4e0d\u4e00\uff0c\u7b2c \\(i\\) \u4e2a\u5bc4\u5305\u67dc\u6709 \\(a_i(1\\le a_i\\le10^5)\\) \u4e2a\u683c\u5b50\uff0c\u4e0d\u8fc7\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5404\u4e2a \\(a_i\\) \u7684\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5bc4\u5305\u67dc\uff0c\u683c\u5b50\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u4e00\u76f4\u5230 \\(a_i\\)\u3002\u73b0\u5728\u6709 \\(q(1 \\le q\\le10^5)\\) \u6b21\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 i j k</code>\uff1a\u5728\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u5b58\u5165\u7269\u54c1 \\(k(0\\le k\\le 10^9)\\)\u3002\u5f53 \\(k=0\\) \u65f6\u8bf4\u660e\u6e05\u7a7a\u8be5\u683c\u5b50\u3002</li> <li><code>2 i j</code>\uff1a\u67e5\u8be2\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u4e2d\u7684\u7269\u54c1\u662f\u4ec0\u4e48\uff0c\u4fdd\u8bc1\u67e5\u8be2\u7684\u67dc\u5b50\u6709\u5b58\u8fc7\u4e1c\u897f\u3002</li> </ul> <p>\u5df2\u77e5\u8d85\u5e02\u91cc\u5171\u8ba1\u4e0d\u4f1a\u8d85\u8fc7 \\(10^7\\) \u4e2a\u5bc4\u5305\u683c\u5b50\uff0c\\(a_i\\) \u662f\u786e\u5b9a\u7136\u800c\u672a\u77e5\u7684\uff0c\u4f46\u662f\u4fdd\u8bc1\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u8be5\u67dc\u5b50\u5b58\u7269\u54c1\u8bf7\u6c42\u7684\u683c\u5b50\u7f16\u53f7\u7684\u6700\u5927\u503c\u3002\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u67d0\u4e9b\u5bc4\u5305\u67dc\u4e2d\u4e00\u4e2a\u683c\u5b50\u90fd\u6ca1\u6709\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c 2 \u4e2a\u6574\u6570 \\(n\\) \u548c \\(q\\)\uff0c\u5bc4\u5305\u67dc\u4e2a\u6570\u548c\u8be2\u95ee\u6b21\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(q\\) \u4e2a\u884c\uff0c\u6bcf\u884c\u6709\u82e5\u5e72\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u6b21\u64cd\u4f5c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u65f6\uff0c\u8f93\u51fa\u7b54\u6848\uff0c\u4ee5\u6362\u884c\u9694\u5f00\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>5 4\n1 3 10000 118014\n1 1 1 1\n2 3 10000\n2 1 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>118014\n1\n</code></pre> <p>\u63d0\u793a</p> <p>\\(\\text{upd 2022.7.26}\\)\uff1a\u65b0\u589e\u52a0\u4e00\u7ec4 Hack \u6570\u636e\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;vector&lt;int&gt; &gt; A(n + 1);\n    for (int i = 1; i &lt;= q; i++) {\n        int op;\n        cin &gt;&gt; op;\n        if (op == 1) {\n            int I, j, k;\n            cin &gt;&gt; I &gt;&gt; j &gt;&gt; k;\n            if (A[I].size() &lt; j + 1) {//in case there is no 'j'\n                A[I].resize(j + 1);//resize the 'j'\n            }\n            A[I][j] = k;\n        }\n        if (op == 2) {\n            int I, j;\n            cin &gt;&gt; I &gt;&gt; j;\n            cout &lt;&lt; A[I][j] &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#2","title":"2\u3001 \u961f\u5217","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg2","title":"e.g.2# \u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\\(n\\) \u4e2a\u4eba\u56f4\u6210\u4e00\u5708\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570,\u6570\u5230 \\(m\\) \u7684\u4eba\u51fa\u5217\uff0c\u518d\u7531\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u4ece \\(1\\) \u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230 \\(m\\) \u7684\u4eba\u518d\u51fa\u5708\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u7684\u4eba\u90fd\u51fa\u5708\uff0c\u8bf7\u8f93\u51fa\u4f9d\u6b21\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\(n,m\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>10 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>3 6 9 2 7 1 8 5 10 4\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1 \\le m, n \\le 100\\)</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n   int n, m;            // n\u662f\u4eba\u6570\uff0cm\u662f\u62a5\u6570\u5230\u51e0\u51fa\u5217\n   cin &gt;&gt; n &gt;&gt; m;\n\n   queue&lt;int&gt; q;        // \u521b\u5efa\u961f\u5217\u6a21\u62df\u5706\u5708\u4e2d\u7684\u4eba\n   for (int i = 1; i &lt;= n; i++) {  // \u5c061\u5230n\u7684\u6570\u5b57\u653e\u5165\u961f\u5217\n       q.push(i);       // \u6570\u5b57\u4ee3\u8868\u6bcf\u4e2a\u4eba\u7684\u7f16\u53f7\n   }\n\n   for (int i = 1; i &lt;= n; i++) {   // \u4e00\u5171\u8981\u51fa\u5217n\u4e2a\u4eba\n       for (int j = 1; j &lt; m; j++) { // \u6bcf\u6b21\u62a5\u6570\u5230m-1\n           int f = q.front();        // \u53d6\u51fa\u961f\u9996\u7684\u4eba\n           q.pop();                  // \u79fb\u9664\u961f\u9996\n           q.push(f);               // \u5c06\u8fd9\u4e2a\u4eba\u653e\u5230\u961f\u5c3e(\u56e0\u4e3a\u6ca1\u62a5\u5230m\uff0c\u4e0d\u7528\u51fa\u5217)\n       }\n       cout &lt;&lt; q.front() &lt;&lt; ' ';    // \u8f93\u51fa\u62a5\u6570\u4e3am\u7684\u4eba(\u5373\u51fa\u5217\u7684\u4eba)\n       q.pop();                     // \u79fb\u9664\u8fd9\u4e2a\u4eba(\u51fa\u5217)\n   }\n}\n</code></pre> \\[ \u7528\u6570\u5b66\u65b9\u6cd5\\\\ f(n,k)=(f(n\u22121,k)+k)\\mod n  \\] <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint josephus(int n, int k) {\n    if (n == 1) return 0;\n    return (josephus(n - 1, k) + k) % n;\n}\n\nint main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int result = josephus(n, k);\n    cout &lt;&lt; result + 1 &lt;&lt; ' '; // \u8f93\u51fa\u7ed3\u679c\u52a01\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7684\u4f4d\u7f6e\u662f\u4ece1\u5f00\u59cb\u7684\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg3noip2010","title":"e.g.3[NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>NOIP2010 \u63d0\u9ad8\u7ec4 T1</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u6668\u7684\u7535\u8111\u4e0a\u5b89\u88c5\u4e86\u4e00\u4e2a\u673a\u5668\u7ffb\u8bd1\u8f6f\u4ef6\uff0c\u4ed6\u7ecf\u5e38\u7528\u8fd9\u4e2a\u8f6f\u4ef6\u6765\u7ffb\u8bd1\u82f1\u8bed\u6587\u7ae0\u3002</p> <p>\u8fd9\u4e2a\u7ffb\u8bd1\u8f6f\u4ef6\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5b83\u53ea\u662f\u4ece\u5934\u5230\u5c3e\uff0c\u4f9d\u6b21\u5c06\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\u7528\u5bf9\u5e94\u7684\u4e2d\u6587\u542b\u4e49\u6765\u66ff\u6362\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u5148\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u8fd9\u4e2a\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\uff0c\u5982\u679c\u5185\u5b58\u4e2d\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u7528\u5b83\u8fdb\u884c\u7ffb\u8bd1\uff1b\u5982\u679c\u5185\u5b58\u4e2d\u6ca1\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u5728\u5916\u5b58\u4e2d\u7684\u8bcd\u5178\u5185\u67e5\u627e\uff0c\u67e5\u51fa\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\u7136\u540e\u7ffb\u8bd1\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u653e\u5165\u5185\u5b58\uff0c\u4ee5\u5907\u540e\u7eed\u7684\u67e5\u627e\u548c\u7ffb\u8bd1\u3002</p> <p>\u5047\u8bbe\u5185\u5b58\u4e2d\u6709 \\(M\\) \u4e2a\u5355\u5143\uff0c\u6bcf\u5355\u5143\u80fd\u5b58\u653e\u4e00\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u3002\u6bcf\u5f53\u8f6f\u4ef6\u5c06\u4e00\u4e2a\u65b0\u5355\u8bcd\u5b58\u5165\u5185\u5b58\u524d\uff0c\u5982\u679c\u5f53\u524d\u5185\u5b58\u4e2d\u5df2\u5b58\u5165\u7684\u5355\u8bcd\u6570\u4e0d\u8d85\u8fc7 \\(M-1\\)\uff0c\u8f6f\u4ef6\u4f1a\u5c06\u65b0\u5355\u8bcd\u5b58\u5165\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5185\u5b58\u5355\u5143\uff1b\u82e5\u5185\u5b58\u4e2d\u5df2\u5b58\u5165 \\(M\\) \u4e2a\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u6e05\u7a7a\u6700\u65e9\u8fdb\u5165\u5185\u5b58\u7684\u90a3\u4e2a\u5355\u8bcd\uff0c\u817e\u51fa\u5355\u5143\u6765\uff0c\u5b58\u653e\u65b0\u5355\u8bcd\u3002</p> <p>\u5047\u8bbe\u4e00\u7bc7\u82f1\u8bed\u6587\u7ae0\u7684\u957f\u5ea6\u4e3a \\(N\\) \u4e2a\u5355\u8bcd\u3002\u7ed9\u5b9a\u8fd9\u7bc7\u5f85\u8bd1\u6587\u7ae0\uff0c\u7ffb\u8bd1\u8f6f\u4ef6\u9700\u8981\u53bb\u5916\u5b58\u67e5\u627e\u591a\u5c11\u6b21\u8bcd\u5178\uff1f\u5047\u8bbe\u5728\u7ffb\u8bd1\u5f00\u59cb\u524d\uff0c\u5185\u5b58\u4e2d\u6ca1\u6709\u4efb\u4f55\u5355\u8bcd\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u5171 \\(2\\) \u884c\u3002\u6bcf\u884c\u4e2d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 \\(M,N\\)\uff0c\u4ee3\u8868\u5185\u5b58\u5bb9\u91cf\u548c\u6587\u7ae0\u7684\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(N\\) \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u6309\u7167\u6587\u7ae0\u7684\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6570\uff08\u5927\u5c0f\u4e0d\u8d85\u8fc7 \\(1000\\)\uff09\u4ee3\u8868\u4e00\u4e2a\u82f1\u6587\u5355\u8bcd\u3002\u6587\u7ae0\u4e2d\u4e24\u4e2a\u5355\u8bcd\u662f\u540c\u4e00\u4e2a\u5355\u8bcd\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5bf9\u5e94\u7684\u975e\u8d1f\u6574\u6570\u76f8\u540c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u8f6f\u4ef6\u9700\u8981\u67e5\u8bcd\u5178\u7684\u6b21\u6570\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>3 7\n1 2 1 5 4 4 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p>\u6574\u4e2a\u67e5\u5b57\u5178\u8fc7\u7a0b\u5982\u4e0b\uff1a\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u7684\u7ffb\u8bd1\uff0c\u5192\u53f7\u524d\u4e3a\u672c\u6b21\u7ffb\u8bd1\u540e\u7684\u5185\u5b58\u72b6\u51b5\uff1a</p> <ol> <li><code>1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u67e5\u627e\u5355\u8bcd 2 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 1\u3002</li> <li><code>1 2 5</code>\uff1a\u67e5\u627e\u5355\u8bcd 5 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>2 5 4</code>\uff1a\u67e5\u627e\u5355\u8bcd 4 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 1\u3002</li> <li><code>2 5 4</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 4\u3002</li> <li><code>5 4 1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 2\u3002</li> </ol> <p>\u5171\u8ba1\u67e5\u4e86 \\(5\\) \u6b21\u8bcd\u5178\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <ul> <li>\u5bf9\u4e8e \\(10\\%\\) \u7684\u6570\u636e\u6709 \\(M=1\\)\uff0c\\(N \\leq 5\\)\uff1b</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\u6709 \\(1 \\leq M \\leq 100\\)\uff0c\\(1 \\leq N \\leq 1000\\)\u3002</li> </ul> <pre><code>#include&lt;bits/stdc++.h&gt; \nusing namespace std;     \n\nint main() {\n    int M, N;           \n    cin &gt;&gt; M &gt;&gt; N;     \n    int count = 0;     \n\n    queue&lt;int&gt; Q;       // \u521b\u5efa\u961f\u5217Q\n    set&lt;int&gt; seen;      // \u521b\u5efa\u96c6\u5408seen\uff0c\u7528\u4e8e\u5feb\u901f\u5224\u65ad\u67d0\u4e2a\u6570\u662f\u5426\u5728\u7f13\u5b58\u4e2d\n\n    for (int i = 0; i &lt; N; i++) {          \n        if (seen.find(i) == seen.end()) {  // \u5982\u679c\u6570\u5b57i\u4e0d\u5728seen\u96c6\u5408\u4e2d\n                                          // seen.find()\u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd4\u56deseen.end()\n            Q.push(i);                    // \u5c06i\u52a0\u5165\u961f\u5217\n            seen.insert(i);               // \u5c06i\u52a0\u5165seen\u96c6\u5408\n            count++;                      // \u7f13\u5b58\u672a\u547d\u4e2d\u6b21\u6570\u52a01\n        }\n\n        if (Q.size() &gt; M) {              // \u5982\u679c\u961f\u5217\u5927\u5c0f\u8d85\u8fc7\u4e86\u9650\u5236M\n            int removed = Q.front();      // \u83b7\u53d6\u961f\u5217\u6700\u524d\u9762\u7684\u5143\u7d20\n            Q.pop();                      // \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5143\u7d20\n            seen.erase(removed);          // \u4eceseen\u96c6\u5408\u4e2d\u4e5f\u79fb\u9664\u8fd9\u4e2a\u5143\u7d20\n        }\n    }\n\n    cout &lt;&lt; count;      \n    return 0;\n}\n</code></pre> queue name \u521b\u5efa push \u961f\u5c3e\u63d2\u5165 pop \u961f\u9996\u5f39\u51fa size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 front() \u961f\u9996\u5143\u7d20 back() \u961f\u5c3e\u5143\u7d20"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#3stack","title":"3\u3001Stack \u6808","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg4","title":"e.g.4\u62ec\u53f7\u5e8f\u5217","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5b9a\u4e49\u5982\u4e0b\u89c4\u5219\uff1a</p> <ol> <li>\u7a7a\u4e32\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d</li> <li>\u82e5\u5b57\u7b26\u4e32 \\(S\\) \u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\uff0c\u90a3\u4e48 \\(\\texttt{[}S\\texttt]\\) \u548c \\(\\texttt{(}S\\texttt)\\) \u4e5f\u90fd\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d</li> <li>\u82e5\u5b57\u7b26\u4e32 \\(A\\) \u548c \\(B\\) \u90fd\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\uff0c\u90a3\u4e48 \\(AB\\)\uff08\u4e24\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\uff09\u4e5f\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\u3002</li> </ol> <p>\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\uff1a</p> <ul> <li><code>()</code>\uff0c<code>[]</code>\uff0c<code>(())</code>\uff0c<code>([])</code>\uff0c<code>()[]</code>\uff0c<code>()[()]</code></li> </ul> <p>\u800c\u4ee5\u4e0b\u51e0\u4e2a\u5219\u4e0d\u662f\uff1a</p> <ul> <li><code>(</code>\uff0c<code>[</code>\uff0c<code>]</code>\uff0c<code>)(</code>\uff0c<code>())</code>\uff0c<code>([()</code></li> </ul> <p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u7531 <code>(</code>\uff0c<code>)</code>\uff0c<code>[</code>\uff0c<code>]</code>\u6784\u6210\u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u8bf7\u4f60\u6309\u7167\u5982\u4e0b\u7684\u65b9\u5f0f\u7ed9\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u914d\u5bf9\uff1a 1. \u4ece\u5de6\u5230\u53f3\u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 2. \u5bf9\u4e8e\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u8003\u5bdf\u5b83\u4e0e\u5b83\u5de6\u4fa7\u79bb\u5b83\u6700\u8fd1\u7684\u672a\u5339\u914d\u7684\u7684\u5de6\u62ec\u53f7\u3002\u5982\u679c\u8be5\u62ec\u53f7\u4e0e\u4e4b\u5bf9\u5e94\uff08\u5373\u5c0f\u62ec\u53f7\u5339\u914d\u5c0f\u62ec\u53f7\uff0c\u4e2d\u62ec\u53f7\u5339\u914d\u4e2d\u62ec\u53f7\uff09\uff0c\u5219\u5c06\u4e8c\u8005\u914d\u5bf9\u3002\u5982\u679c\u5de6\u4fa7\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u4e0d\u5b58\u5728\u6216\u4e0e\u4e4b\u4e0d\u5bf9\u5e94\uff0c\u5219\u5176\u914d\u5bf9\u5931\u8d25\u3002</p> <p>\u914d\u5bf9\u7ed3\u675f\u540e\uff0c\u5bf9\u4e8e \\(s\\) \u4e2d\u5168\u90e8\u672a\u914d\u5bf9\u7684\u62ec\u53f7\uff0c\u8bf7\u4f60\u5728\u5176\u65c1\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u8be5\u62ec\u53f7\u548c\u65b0\u52a0\u7684\u62ec\u53f7\u5339\u914d\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a \\(s\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u4f60\u7684\u7b54\u6848\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>([()\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>()[]()\n</code></pre> <p>\u6837\u4f8b #2</p> <p>\u6837\u4f8b\u8f93\u5165 #2</p> <pre><code>([)\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #2</p> <pre><code>()[]()\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(s\\) \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(100\\)\uff0c\u4e14\u53ea\u542b  <code>(</code>\uff0c<code>)</code>\uff0c<code>[</code>\uff0c<code>]</code> \u56db\u79cd\u5b57\u7b26\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string input;\n    stack&lt;int&gt; st;  // Stack will store indices instead of characters\n    vector&lt;bool&gt; matched;  // Track which positions are properly matched\n    string answer;\n\n    cin &gt;&gt; input;\n\n    // Initialize matched vector with same size as input\n    matched.resize(input.length(), false);\n\n    // First pass: Find all matching pairs\n    for (int i = 0; i &lt; input.length(); ++i) {\n        if (input[i] == '(' || input[i] == '[') {\n            st.push(i);  // Push index onto stack\n        } \n        else if (input[i] == ')' || input[i] == ']') {\n            if (!st.empty()) {\n                char opening = input[st.top()];\n                // Check if brackets match\n                if ((input[i] == ')' &amp;&amp; opening == '(') ||\n                    (input[i] == ']' &amp;&amp; opening == '[')) {\n                    // Mark both positions as matched\n                    matched[i] = true;\n                    matched[st.top()] = true;\n                    st.pop();\n                }\n            }\n        }\n    }\n\n    // Second pass: Build answer string\n    for (int i = 0; i &lt; input.length(); ++i) {\n        if (!matched[i]) {\n            // Replace unmatched brackets with their complete pairs\n            if (input[i] == '(' || input[i] == ')') {\n                answer += \"()\";\n            } else {\n                answer += \"[]\";\n            }\n        } else {\n            // Keep matched brackets as they are\n            answer += input[i];\n        }\n    }\n\n    cout &lt;&lt; answer &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#4","title":"4\u3001\u6742\u9898\uff08\u5b57\u5178\u5e8f\uff09","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg5string-minimization","title":"e.g.5#String Minimization","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4f60\u6709\u56db\u4e2a\u957f \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(a,b,c,d\\)\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u591a\u6b21\u5982\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u9009\u62e9\u4e00\u4e2a \\(i\\)\uff0c\u4ea4\u6362 \\(a_i,c_i\\)\uff0c\u7136\u540e\u4ea4\u6362 \\(b_i,d_i\\)\u3002</li> </ul> <p>\u6c42\u5728 \\(a\\) \u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u7684\u524d\u63d0\u4e0b\uff0c\\(b\\) \u5b57\u5178\u5e8f\u6700\u5c0f\u662f\u4ec0\u4e48\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5b57\u5178\u5e8f\uff0c\u770b\u8fd9\u91cc\uff1a</p> <p>\u5bf9\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(p,q\\)\uff0c\u79f0 \\(p\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e \\(q\\)\uff08\u8bb0\u4e3a \\(p&lt;q\\)\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u81ea\u7136\u6570 \\(k\\) \u4f7f \\(p,q\\) \u7684\u524d \\(k\\) \u4e2a\u5b57\u7b26\u76f8\u540c\u4e14 \\(p_{k+1}\\) \u7684 ASCII \u7801\u5c0f\u4e8e \\(q_{k+1}\\) \u7684 ASCII \u7801\u3002</p> <p>\u4f8b\u5982\uff1a - \\(\\texttt{abc}&lt;\\texttt{baa}\\)\uff08\u5f53 \\(k=0\\)\uff09 - \\(\\texttt{bae}&lt;\\texttt{bbb}\\)\uff08\u5f53 \\(k=1\\)\uff09</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u5b57\u7b26\u4e32 \\(a,b,c,d\\) \u957f\u5ea6\u3002</p> <p>\u4e4b\u540e\u56db\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u522b\u8868\u793a \\(a,b,c,d\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9898\u76ee\u8981\u6c42\u7684\u5b57\u7b26\u4e32 \\(b\\)\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>8\nwestlake\nyummyqaq\nweabzzke\nazazazaq\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>auazyqaq\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u89e3\u91ca\u3011</p> <p>\u9009\u62e9 \\(i\\) \u4e3a \\(1,3,4\\) \u53ef\u4ee5\u8ba9 \\(a\\) \u53d6\u5230\u6700\u5c0f\u7684\u5b57\u5178\u5e8f \\(\\texttt{weablake}\\)\uff0c\u6b64\u65f6\u5b57\u7b26\u4e32 \\(b\\) \u4e5f\u5f97\u5230\u6ee1\u8db3\u9898\u610f\u6700\u5c0f\u7684\u5b57\u5178\u5e8f \\(\\texttt{auazyqaq}\\)\u3002</p> <p>\u4e8b\u5b9e\u4e0a\u5982\u679c \\(i=1\\) \u65f6\u4e0d\u64cd\u4f5c \\(a\\) \u7684\u5b57\u5178\u5e8f\u4e5f\u662f\u6700\u5c0f\u7684\uff0c\u4f46\u662f\u6b64\u65f6\u5b57\u7b26\u4e32 \\(b\\) \u5c31\u662f \\(\\texttt{yuazyqaq}\\)\uff0c\u4e0d\u591f\u5c0f\u3002</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u672c\u9898\u5171 \\(10\\) \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9 \\(10\\) \u5206\u3002</p> \u6d4b\u8bd5\u70b9\u7f16\u53f7 \\(n\\le\\) \u7279\u6b8a\u6027\u8d28 \\(1\\sim 2\\) \\(15\\) \\(3\\) \\(10^5\\) \\(a_i&gt;c_i\\) \\(4\\sim 5\\) \\(10^5\\) \\(a_i\\ne c_i\\) \\(6\\sim 7\\) \\(10^5\\) \\(b_i\\ge d_i\\) \\(8\\sim 10\\) \\(10^5\\) <p>\u5bf9\u4e8e\u5168\u4f53\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1\\le n\\le 10^5\\)\uff0c\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n  int len;\n  cin &gt;&gt; len;\n  string a, b, c, d;\n  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n\n  for(int i = 0; i &lt; len; i++) {\n    // \u5982\u679c\u4ea4\u6362\u540e\u80fd\u8ba9a\u6216b\u53d8\u5f97\u66f4\u5c0f\uff0c\u5c31\u8fdb\u884c\u4ea4\u6362\n    if(min(a[i], c[i]) != a[i] ||\n       (a[i] == c[i] &amp;&amp; min(b[i], d[i]) != b[i])) {\n      swap(a[i], c[i]);\n      swap(b[i], d[i]);\n       }\n  }\n\n  cout &lt;&lt; b &lt;&lt; endl;\n  return 0;\n}\n/*\n    \u6b64\u9898\u4e2d\uff0c\u6bd4\u8f83\u6574\u4f53\u5b57\u5178\u5e8f\uff1a\u6bcf\u4f4d\u6bd4\u8f83\u5373\u53ef\n    min(a[i], c[i]) != a[i]\uff1a\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u8ba9a\u53d8\u5f97\u66f4\u5c0f\n    (a[i] == c[i] &amp;&amp; min(b[i], d[i]) != b[i])\uff1a\u5f53a\u4e0d\u80fd\u518d\u53d8\u5c0f\u65f6\uff0c\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u8ba9b\u53d8\u5f97\u66f4\u5c0f\n*/\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_2","title":"\u4e8c\u3001\u4e8c\u53c9\u6811","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#1","title":"1\u3001\u5206\u7c7b","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#1_1","title":"\uff081\uff09\u6ee1\u4e8c\u53c9\u6811","text":"<p>\u6bcf\u4e00\u5c42\u8282\u70b9\u90fd\u662f\u6ee1\u7684</p>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#2_1","title":"\uff082\uff09\u5b8c\u5168\u4e8c\u53c9\u6811","text":"<p>\u6700\u540e\u4e00\u5c42\u6709\u7f3a\u5931</p>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#3","title":"\uff083\uff09\u9000\u5316\u4e8c\u53c9\u6811","text":"<p>\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9</p>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#4_1","title":"\uff084\uff09\u5b8c\u7f8e\u4e8c\u53c9\u6811","text":"<p>\u6240\u6709\u53f6\u7ed3\u70b9\u7684\u6df1\u5ea6\u5747\u76f8\u540c\uff0c\u4e14\u6240\u6709\u975e\u53f6\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e3a 2 \u7684\u4e8c\u53c9\u6811\u79f0\u4e3a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002</p> <p></p>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#2_2","title":"2\u3001\u9759\u6001\u5199\u6cd5","text":"<p>Tip</p> C++ <pre><code>struct tree {\n    int v;\n    int l, r;\n} tree[N];\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#3_1","title":"3\u3001\u4e09\u79cd\u904d\u5386\u65b9\u5f0f","text":"<ul> <li>\u5148\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u6839\u8282\u70b9\uff0c\u518d\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811</li> <li></li> <li>\u4e2d\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9\uff0c\u518d\u53f3\u5b50\u6811</li> <li></li> <li>\u540e\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9</li> <li></li> </ul>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg6","title":"e.g.6\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709\u4e00\u4e2a \\(n(n \\le 10^6)\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u7ed9\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7f16\u53f7\uff08\u5747\u4e0d\u8d85\u8fc7 \\(n\\)\uff09\uff0c\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u6839\u8282\u70b9\u7684\u7f16\u53f7\u4e3a \\(1\\)\uff09\uff0c\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u5165 <code>0 0</code>\u3002</p> <p>\u5efa\u597d\u6811\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u4f9d\u6b21\u6c42\u51fa\u5b83\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u5217\u904d\u5386\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u7ed3\u70b9\u6570\u3002</p> <p>\u4e4b\u540e \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(l\\)\u3001\\(r\\)\uff0c\u5206\u522b\u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\u82e5 \\(l=0\\) \u5219\u8868\u793a\u65e0\u5de6\u5b50\u7ed3\u70b9\uff0c\\(r=0\\) \u540c\u7406\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e09\u884c\uff0c\u6bcf\u884c \\(n\\) \u4e2a\u6570\u5b57\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e8c\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e09\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>7\n2 7\n4 0\n0 0\n0 3\n0 0\n0 5\n6 0\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>1 2 4 3 7 6 5\n4 3 2 1 6 5 7\n3 4 2 5 6 7 1\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10;\n\nstruct tree {\n    int value;//\u8282\u70b9\u503c\n    int left, right;//\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n} tr[N];\n\nvoid Preorder(int u) {\n    if (u == 0)\n        return;//\u5982\u679c\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\n    cout &lt;&lt; u &lt;&lt; \" \";//\u8f93\u51fa\u8282\u70b9\u503c\n    Preorder(tr[u].left);//\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\n    Preorder(tr[u].right);//\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\n}\n\nvoid Inorder(int u) {\n    if (u == 0)\n        return;\n    Inorder(tr[u].left);\n    cout &lt;&lt; u &lt;&lt; \" \";\n    Inorder(tr[u].right);\n}\n\nvoid Postorder(int u) {\n    if (u == 0)\n        return;\n    Postorder(tr[u].left);\n    Postorder(tr[u].right);\n    cout &lt;&lt; u &lt;&lt; \" \";\n}\n\nint main() {\n    int n;\n    cin&gt;&gt;n;\n\n    for (int i = 1; i &lt;= n; i++) {//\u6ce8\u610f\u56e0\u4e3a\u6811\u7684\u6700\u5c0f\u503c\u4ece1\u5f00\u59cb\uff0ci\u4e5f\u9700\u8981\u4ece1-&gt;n\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;//\u8f93\u5165\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n        tr[i].value = i;//\u8282\u70b9\u503c\n        tr[i].left = a;//\u5de6\u5b50\u6811\n        tr[i].right = b;//\u53f3\u5b50\u6811\n    }\n\n    Preorder(1);//\u5148\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n    Inorder(1);//\u4e2d\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n    Postorder(1);//\u540e\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg7noip2004-fbi","title":"e.g.7[NOIP2004 \u666e\u53ca\u7ec4] FBI \u6811","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5206\u4e3a\u4e09\u7c7b\uff1a\u5168 0 \u4e32\u79f0\u4e3a B \u4e32\uff0c\u5168 1 \u4e32\u79f0\u4e3a I \u4e32\uff0c\u65e2\u542b 0 \u53c8\u542b 1 \u7684\u4e32\u5219\u79f0\u4e3a F \u4e32\u3002</p> <p>FBI \u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u7ed3\u70b9\u7c7b\u578b\u4e5f\u5305\u62ec F \u7ed3\u70b9\uff0cB \u7ed3\u70b9\u548c I \u7ed3\u70b9\u4e09\u79cd\u3002\u7531\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32 \\(S\\) \u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u68f5 FBI \u6811 \\(T\\)\uff0c\u9012\u5f52\u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li>\\(T\\) \u7684\u6839\u7ed3\u70b9\u4e3a \\(R\\)\uff0c\u5176\u7c7b\u578b\u4e0e\u4e32 \\(S\\) \u7684\u7c7b\u578b\u76f8\u540c\uff1b</li> <li>\u82e5\u4e32 \\(S\\) \u7684\u957f\u5ea6\u5927\u4e8e \\(1\\)\uff0c\u5c06\u4e32 \\(S\\) \u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u5206\u4e3a\u7b49\u957f\u7684\u5de6\u53f3\u5b50\u4e32 \\(S_1\\) \u548c \\(S_2\\)\uff1b\u7531\u5de6\u5b50\u4e32 \\(S_1\\) \u6784\u9020 \\(R\\) \u7684\u5de6\u5b50\u6811 \\(T_1\\)\uff0c\u7531\u53f3\u5b50\u4e32 \\(S_2\\) \u6784\u9020 \\(R\\) \u7684\u53f3\u5b50\u6811 \\(T_2\\)\u3002</li> </ol> <p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32\uff0c\u8bf7\u7528\u4e0a\u8ff0\u6784\u9020\u65b9\u6cd5\u6784\u9020\u51fa\u4e00\u68f5 FBI \u6811\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(N(0 \\le N \\le 10)\\)\uff0c  </p> <p>\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373 FBI \u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>3\n10001011\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>IBFBBBFIBFIIIFF\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\\(N \\le 2\\)\uff1b</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\\(N \\le 10\\)\u3002</p> <p>noip2004\u666e\u53ca\u7ec4\u7b2c3\u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e4 + 10;\nint n;\nstring s;\nint Ls(int p) { return 2 * p; }     // \u5de6\u513f\u5b50\nint Rs(int p) { return 2 * p + 1; } // \u53f3\u513f\u5b50\n\nstruct tree {\n    char ch;\n    int l, r;\n} tr[N];\n\nvoid build(int p, int l, int r) {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (l == r) {\n        if (s[l - 1] == '0') {\n            tr[p].ch = 'B';\n        } else {\n            tr[p].ch = 'I';\n        }\n        return;\n    }\n    int mid = (l + r) / 2; // \u5207\u5272\u5b57\u7b26\u4e32\n    // \u5de6\u53f3\u5b57\u7b26\u4e32\n    tr[p].l = Ls(p);\n    tr[p].r = Rs(p);\n    // \u9012\u5f52\n    build(Ls(p), l, mid);\n    build(Rs(p), mid + 1, r);\n    if (tr[Ls(p)].ch == 'B' &amp;&amp; tr[Rs(p)].ch == 'B') {\n        tr[p].ch = 'B';\n    } else if (tr[Ls(p)].ch == 'I' &amp;&amp; tr[Rs(p)].ch == 'I') {\n        tr[p].ch = 'I';\n    } else {\n        tr[p].ch = 'F';\n    }\n}\n// \u540e\u5e8f\u904d\u5386\nvoid post(int p) {\n    if(p==0) return;\n    if (tr[p].l)\n        post(tr[p].l);\n    if (tr[p].r)\n        post(tr[p].r);\n    cout &lt;&lt; tr[p].ch;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; s;\n    int len = pow(2, n);\n    build(1, 1, len);\n\n    post(1);\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#dfs","title":"\u4e09\u3001DFS","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg8noip1998","title":"e.g.8[NOIP1998 \u666e\u53ca\u7ec4] \u5e42\u6b21\u65b9","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4efb\u4f55\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u7528 \\(2\\) \u7684\u5e42\u6b21\u65b9\u8868\u793a\u3002\u4f8b\u5982 $137=2<sup>7+2</sup>3+2^0 $\u3002</p> <p>\u540c\u65f6\u7ea6\u5b9a\u6b21\u65b9\u7528\u62ec\u53f7\u6765\u8868\u793a\uff0c\u5373 \\(a^b\\) \u53ef\u8868\u793a\u4e3a \\(a(b)\\)\u3002</p> <p>\u7531\u6b64\u53ef\u77e5\uff0c\\(137\\) \u53ef\u8868\u793a\u4e3a \\(2(7)+2(3)+2(0)\\)</p> <p>\u8fdb\u4e00\u6b65\uff1a</p> <p>\\(7= 2^2+2+2^0\\)  ( \\(2^1\\) \u7528 \\(2\\) \u8868\u793a)\uff0c\u5e76\u4e14 \\(3=2+2^0\\)\u3002</p> <p>\u6240\u4ee5\u6700\u540e \\(137\\) \u53ef\u8868\u793a\u4e3a \\(2(2(2)+2+2(0))+2(2+2(0))+2(0)\\)\u3002</p> <p>\u53c8\u5982 \\(1315=2^{10} +2^8 +2^5 +2+1\\)</p> <p>\u6240\u4ee5 \\(1315\\) \u6700\u540e\u53ef\u8868\u793a\u4e3a \\(2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u7b26\u5408\u7ea6\u5b9a\u7684 \\(n\\) \u7684 \\(0, 2\\) \u8868\u793a\uff08\u5728\u8868\u793a\u4e2d\u4e0d\u80fd\u6709\u7a7a\u683c\uff09\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>1315\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u5bf9\u4e8e \\(0100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 2 \\times {10}^4\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid divide(int x)\n{\n    bool flag = false; \n    while (x != 0)\n    {\n        int t = int(log2(x));\n\n        if (flag) cout &lt;&lt; \"+\"; \n        if (t == 1) cout &lt;&lt; \"2\"; \n        else if (t == 0) cout &lt;&lt; \"2(0)\"; \n        else\n        {\n            cout &lt;&lt; \"2(\";\n            divide(t); \n            cout &lt;&lt; \")\";\n        }\n        x -= pow(2,t); \n        flag = true;\n    }\n}\nint main() {\n    int x;\n    cin &gt;&gt; x;\n    divide(x);\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_3","title":"\u56db\u3001\u5e76\u67e5\u96c6","text":"<p>\u987e\u540d\u601d\u4e49\uff0c\u5e76\u67e5\u96c6\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u5408\u5e76\uff08Union\uff09\uff1a\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u5408\u5e76\u5bf9\u5e94\u7684\u6811\uff09</li> <li>\u67e5\u8be2\uff08Find\uff09\uff1a\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u67e5\u8be2\u5bf9\u5e94\u7684\u6811\u7684\u6839\u8282\u70b9\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408</li> </ul>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_4","title":"\u67e5\u8be2","text":"<p>\u5b9e\u73b0</p> <pre><code>    return x=s[x]? x:find_set(s[x]);\n</code></pre> <p>\u8be5\u51fd\u6570\u7528\u4e8e\u67e5\u627e\u5143\u7d20 x \u6240\u5728\u7684\u96c6\u5408\u7684\u6839\u8282\u70b9\u3002\u6839\u8282\u70b9\u662f\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff0c\u901a\u5e38\u662f\u96c6\u5408\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6216\u88ab\u6307\u5b9a\u4e3a \"\u7236\" \u7684\u5143\u7d20\u3002</p> <p>\u9012\u5f52\u67e5\u627e\uff1a</p> <ul> <li> <p>\u5982\u679c <code>s[x] == x</code>\uff0c\u8bf4\u660e x \u662f\u81ea\u5df1\u7684\u7236\u8282\u70b9\uff0c\u5373 x \u662f\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u6216\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de x\u3002</p> </li> <li> <p>\u5982\u679c <code>s[x] != x</code>\uff0c\u8bf4\u660e x \u7684\u7236\u8282\u70b9\u4e0d\u662f\u81ea\u5df1\uff08x \u4e0d\u662f\u6839\u8282\u70b9\uff09\uff0c\u90a3\u4e48\u901a\u8fc7\u9012\u5f52\u67e5\u627e s[x] \u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230\u627e\u5230\u6839\u8282\u70b9\u4e3a\u6b62\u3002</p> </li> </ul> <p>Danger</p> <p>\u95ee\u9898\uff1a\u627e\u5230\u7956\u5148\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8</p>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_5","title":"\u2192\u65b9\u6cd5\uff1a\u8def\u5f84\u538b\u7f29","text":"Tip <p>\u5728\u9012\u5f52\u67e5\u627e\u8fc7\u7a0b\u4e2d\uff0c\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u90fd\u76f4\u63a5\u6307\u5411\u6839\u8282\u70b9<code>s[x] = find_set(s[x])</code>\u3002\u8fd9\u6837\u53ef\u4ee5\u52a0\u901f\u540e\u7eed\u7684\u67e5\u627e\u64cd\u4f5c\uff0c\u51cf\u5c11\u6811\u7684\u9ad8\u5ea6\uff0c\u4ece\u800c\u4f18\u5316\u67e5\u8be2\u6548\u7387\u3002</p> <p></p> <p>Success</p> <pre><code>int find_set(int x){\n    if(x!=s[x]) s[x]=find_set(s[x]); //\u8def\u5f84\u538b\u7f29\n    return s[x];\n}\n</code></pre> <pre><code>int find_set(int x) {\n    return s[x] == x ? x : s[x] = find_set(s[x]);\n}\n\nint merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)];\n}  // (1)\n</code></pre> <ol> <li> <p>\u8be5\u51fd\u6570\u7528\u4e8e\u5c06 x \u548c y \u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002</p> <ul> <li> <p>\u67e5\u627e\u6839\u8282\u70b9\uff1a\u9996\u5148\u5206\u522b\u67e5\u627e x \u548c y \u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\uff0c\u4f7f\u7528 <code>find_set(x)</code> \u548c <code>find_set(y)</code>\u3002</p> </li> <li> <p>\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06 y \u96c6\u5408\u7684\u6839\u8282\u70b9\u6307\u5411 x \u96c6\u5408\u7684\u6839\u8282\u70b9\uff0c\u5373 <code>s[find_set(x)] = s[find_set(y)]</code>\u3002\u8fd9\u6837\uff0cx \u548c y \u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\u5c31\u88ab\u5408\u5e76\u6210\u4e86\u4e00\u4e2a\u96c6\u5408\u3002</p> </li> </ul> </li> </ol>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg9","title":"e.g.9\u4eb2\u621a\uff08\u6a21\u677f\uff09","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u82e5\u67d0\u4e2a\u5bb6\u65cf\u4eba\u5458\u8fc7\u4e8e\u5e9e\u5927\uff0c\u8981\u5224\u65ad\u4e24\u4e2a\u662f\u5426\u662f\u4eb2\u621a\uff0c\u786e\u5b9e\u8fd8\u5f88\u4e0d\u5bb9\u6613\uff0c\u73b0\u5728\u7ed9\u51fa\u67d0\u4e2a\u4eb2\u621a\u5173\u7cfb\u56fe\uff0c\u6c42\u4efb\u610f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4eba\u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u89c4\u5b9a\uff1a\\(x\\) \u548c \\(y\\) \u662f\u4eb2\u621a\uff0c\\(y\\) \u548c \\(z\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u548c \\(z\\) \u4e5f\u662f\u4eb2\u621a\u3002\u5982\u679c \\(x\\)\uff0c\\(y\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u7684\u4eb2\u621a\u90fd\u662f \\(y\\) \u7684\u4eb2\u621a\uff0c\\(y\\) \u7684\u4eb2\u621a\u4e5f\u90fd\u662f \\(x\\) \u7684\u4eb2\u621a\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff1a\u4e09\u4e2a\u6574\u6570 \\(n,m,p\\)\uff0c\uff08\\(n,m,p \\le 5000\\)\uff09\uff0c\u5206\u522b\u8868\u793a\u6709 \\(n\\) \u4e2a\u4eba\uff0c\\(m\\) \u4e2a\u4eb2\u621a\u5173\u7cfb\uff0c\u8be2\u95ee \\(p\\) \u5bf9\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u4ee5\u4e0b \\(m\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(M_i\\)\uff0c\\(M_j\\)\uff0c\\(1 \\le M_i,~M_j\\le n\\)\uff0c\u8868\u793a \\(M_i\\) \u548c \\(M_j\\) \u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u63a5\u4e0b\u6765 \\(p\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(P_i,P_j\\)\uff0c\u8be2\u95ee \\(P_i\\) \u548c \\(P_j\\) \u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\\(p\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a <code>Yes</code> \u6216 <code>No</code>\u3002\u8868\u793a\u7b2c \\(i\\) \u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e3a\u201c\u5177\u6709\u201d\u6216\u201c\u4e0d\u5177\u6709\u201d\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>6 5 3\n1 2\n1 5\n3 4\n5 2\n1 3\n1 4\n2 3\n5 6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>Yes\nYes\nNo\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 5e3 + 10; // \u5b9a\u4e49\u6700\u5927\u8282\u70b9\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a5001\nint n, m, p, s[N];      // n\u4e3a\u8282\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cp\u4e3a\u67e5\u8be2\u6b21\u6570\uff0cs\u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u5e76\u67e5\u96c6\u4fe1\u606f\n\n// \u5e76\u67e5\u96c6\u7684\u67e5\u627e\u51fd\u6570\uff0c\u7528\u4e8e\u627e\u5230\u5143\u7d20k\u6240\u5728\u7684\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff08\u6839\u8282\u70b9\uff09\nint find_set(int k) {\n    if (k != s[k]) {           // \u5982\u679ck\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5219\u9012\u5f52\u67e5\u627e\u5176\u6839\u8282\u70b9\n        s[k] = find_set(s[k]); // \u8def\u5f84\u538b\u7f29\uff0c\u51cf\u5c11\u67e5\u627e\u65f6\u95f4\n    }\n    return s[k]; // \u8fd4\u56de\u6839\u8282\u70b9\n}\n\n// \u5e76\u67e5\u96c6\u7684\u5408\u5e76\u51fd\u6570\uff0c\u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u5143\u7d20x\u548cy\u6240\u5728\u7684\u96c6\u5408\nvoid merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)]; // \u5c06x\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\u6307\u5411y\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p; // \u8f93\u5165\u8282\u70b9\u6570n\uff0c\u8fb9\u6570m\uff0c\u67e5\u8be2\u6b21\u6570p\n    for (int i = 1; i &lt;= n; i++)\n        s[i] = i; // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u90fd\u662f\u81ea\u5df1\n\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y; // \u8f93\u5165\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\n        merge(x, y);   // \u5408\u5e76\u8fd9\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u7684\u96c6\u5408\n    }\n\n    while (p--) { // \u8fdb\u884cp\u6b21\u67e5\u8be2\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;                  // \u8f93\u5165\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u8282\u70b9\n        if (find_set(x) == find_set(y)) // \u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n            cout &lt;&lt; \"Yes\\n\";            // \u8f93\u51fa\"Yes\"\n        else\n            cout &lt;&lt; \"No\\n\"; // \u5426\u5219\u8f93\u51fa\"No\"\n    }\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg10-2017-c","title":"e.g.10[\u84dd\u6865\u676f 2017 \u56fd C] \u5408\u6839\u690d\u7269","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>w \u661f\u7403\u7684\u4e00\u4e2a\u79cd\u690d\u56ed\uff0c\u88ab\u5206\u6210 \\(m \\times n\\) \u4e2a\u5c0f\u683c\u5b50\uff08\u4e1c\u897f\u65b9\u5411 \\(m\\) \u884c\uff0c\u5357\u5317\u65b9\u5411 \\(n\\) \u5217\uff09\u3002\u6bcf\u4e2a\u683c\u5b50\u91cc\u79cd\u4e86\u4e00\u682a\u5408\u6839\u690d\u7269\u3002</p> <p>\u8fd9\u79cd\u690d\u7269\u6709\u4e2a\u7279\u70b9\uff0c\u5b83\u7684\u6839\u53ef\u80fd\u4f1a\u6cbf\u7740\u5357\u5317\u6216\u4e1c\u897f\u65b9\u5411\u4f38\u5c55\uff0c\u4ece\u800c\u4e0e\u53e6\u4e00\u4e2a\u683c\u5b50\u7684\u690d\u7269\u5408\u6210\u4e3a\u4e00\u4f53\u3002</p> <p>\u5982\u679c\u6211\u4eec\u544a\u8bc9\u4f60\u54ea\u4e9b\u5c0f\u683c\u5b50\u95f4\u51fa\u73b0\u4e86\u8fde\u6839\u73b0\u8c61\uff0c\u4f60\u80fd\u8bf4\u51fa\u8fd9\u4e2a\u56ed\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u682a\u5408\u6839\u690d\u7269\u5417\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 \\(m\\)\uff0c\\(n\\)\uff0c\u7528\u7a7a\u683c\u5206\u5f00\uff0c\u8868\u793a\u683c\u5b50\u7684\u884c\u6570\u3001\u5217\u6570\uff08\\(1&lt;m,n&lt;1000\\)\uff09\u3002</p> <p>\u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 \\(k\\)\uff0c\u8868\u793a\u4e0b\u9762\u8fd8\u6709 \\(k\\) \u884c\u6570\u636e \\((0&lt;k&lt;10^5)\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(k\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(a\\)\uff0c\\(b\\)\uff0c\u8868\u793a\u7f16\u53f7\u4e3a \\(a\\) \u7684\u5c0f\u683c\u5b50\u548c\u7f16\u53f7\u4e3a \\(b\\) \u7684\u5c0f\u683c\u5b50\u5408\u6839\u4e86\u3002</p> <p>\u683c\u5b50\u7684\u7f16\u53f7\u4e00\u884c\u4e00\u884c\uff0c\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u3002</p> <p>\u6bd4\u5982\uff1a\\(5 \\times 4\\) \u7684\u5c0f\u683c\u5b50\uff0c\u7f16\u53f7\uff1a</p> <pre><code>1  2  3  4\n5  6  7  8\n9  10 11 12\n13 14 15 16\n17 18 19 20\n</code></pre> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b54\u6848</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>5 4\n16\n2 3\n1 5\n5 9\n4 8\n7 8\n9 10\n10 11\n11 12\n10 14\n12 16\n14 18\n17 18\n15 19\n19 20\n9 13\n13 17\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p></p> <p>\u65f6\u9650 1 \u79d2, 256M\u3002\u84dd\u6865\u676f 2017 \u5e74\u7b2c\u516b\u5c4a\u56fd\u8d5b</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10;\nint n, m, p, s[N];\n// \u5e76\u67e5\u96c6\nint find_set(int k) {\n    if (k != s[k]) {\n        s[k] = find_set(s[k]);\n    }\n    return s[k];\n}\nvoid merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)];\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n * m; i++)\n        s[i] = i;\n\n    for (int i = 1; i &lt;= p; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        merge(x, y);\n    }\n    int ans = 0;\n    for (int i = 1; i &lt;= n * m; i++) {\n        if (s[i] == i) {\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg11usaco16open-closing-the-farm-s","title":"e.g.11[USACO16OPEN] Closing the Farm S","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>FJ \u548c\u4ed6\u7684\u5976\u725b\u4eec\u6b63\u5728\u8ba1\u5212\u79bb\u5f00\u5c0f\u9547\u505a\u4e00\u6b21\u957f\u7684\u65c5\u884c\uff0c\u540c\u65f6 FJ \u60f3\u4e34\u65f6\u5730\u5173\u6389\u4ed6\u7684\u519c\u573a\u4ee5\u8282\u7701\u4e00\u4e9b\u91d1\u94b1\u3002</p> <p>\u8fd9\u4e2a\u519c\u573a\u4e00\u5171\u6709\u88ab\u7528 \\(M\\) \u6761\u53cc\u5411\u9053\u8def\u8fde\u63a5\u7684 \\(N\\) \u4e2a\u8c37\u4ed3\uff08\\(1 \\leq N,M \\leq 3000\\)\uff09\u3002\u4e3a\u4e86\u5173\u95ed\u6574\u4e2a\u519c\u573a\uff0cFJ \u8ba1\u5212\u6bcf\u4e00\u6b21\u5173\u95ed\u6389\u4e00\u4e2a\u8c37\u4ed3\u3002\u5f53\u4e00\u4e2a\u8c37\u4ed3\u88ab\u5173\u95ed\u4e86\uff0c\u6240\u6709\u7684\u8fde\u63a5\u5230\u8fd9\u4e2a\u8c37\u4ed3\u7684\u9053\u8def\u90fd\u4f1a\u88ab\u5173\u95ed\uff0c\u800c\u4e14\u518d\u4e5f\u4e0d\u80fd\u591f\u88ab\u4f7f\u7528\u3002</p> <p>FJ \u73b0\u5728\u6b63\u611f\u5174\u8da3\u4e8e\u77e5\u9053\u5728\u6bcf\u4e00\u4e2a\u65f6\u95f4\uff08\u8fd9\u91cc\u7684\u201c\u65f6\u95f4\u201d\u6307\u5728\u6bcf\u4e00\u6b21\u5173\u95ed\u8c37\u4ed3\u4e4b\u524d\u7684\u65f6\u95f4\uff09\u65f6\u4ed6\u7684\u519c\u573a\u662f\u5426\u662f\u201c\u5168\u8fde\u901a\u7684\u201d\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\u4ece\u4efb\u610f\u7684\u4e00\u4e2a\u5f00\u7740\u7684\u8c37\u4ed3\u5f00\u59cb\uff0c\u80fd\u591f\u5230\u8fbe\u53e6\u5916\u7684\u4e00\u4e2a\u8c37\u4ed3\u3002\u6ce8\u610f\u81ea\u4ece\u67d0\u4e00\u4e2a\u65f6\u95f4\u4e4b\u540e\uff0c\u53ef\u80fd\u6574\u4e2a\u519c\u573a\u90fd\u5f00\u59cb\u4e0d\u4f1a\u662f\u201c\u5168\u8fde\u901a\u7684\u201d\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(N,M\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(M\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(u,v\\)\uff08\\(1 \\leq u,v \\leq N\\)\uff09\uff0c\u63cf\u8ff0\u4e00\u6761\u8fde\u63a5 \\(u,v\\) \u4e24\u4e2a\u519c\u573a\u7684\u8def\u3002</p> <p>\u6700\u540e \\(N\\) \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4e2a\u88ab\u5173\u95ed\u7684\u519c\u573a\u7f16\u53f7\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa \\(N\\) \u884c\uff0c\u6bcf\u884c\u5305\u542b <code>YES</code> \u6216 <code>NO</code>\uff0c\u8868\u793a\u67d0\u4e2a\u65f6\u523b\u519c\u573a\u662f\u5426\u662f\u5168\u8fde\u901a\u7684\u3002</p> <p>\u7b2c\u4e00\u884c\u8f93\u51fa\u6700\u521d\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u884c\uff08\\(2 \\leq i \\leq N\\)\uff09\u8f93\u51fa\u7b2c \\(i-1\\) \u4e2a\u519c\u573a\u88ab\u5173\u95ed\u540e\u7684\u72b6\u6001\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>YES\nNO\nYES\nYES\n</code></pre>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","title":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf","text":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf  <ul> <li>\u4e00\u3001\u6982\u8ff0</li> <li>\u4e8c\u3001\u53d1\u5c55<ul> <li>1\u3001\u771f\u7a7a\u7ba1\uff0c\u63d2\u63a5\u677f\uff0c\u65e0\u64cd\u4f5c\u7cfb\u7edf</li> <li>2\u3001\u6676\u4f53\u7ba1\uff0c\u6279\u5904\u7406</li> <li>3\u3001\u96c6\u6210\u7535\u8def</li> <li>4\u3001\u7f51\u7edc\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf</li> </ul> </li> <li>\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784<ul> <li>1\u3001\u6574\u4f53\u5f0f\u7ed3\u6784</li> <li>2\u3001\u6a21\u5757\u5316\u7ed3\u6784</li> <li>3\u3001\u5206\u5c42\u5f0f\u7ed3\u6784</li> <li>4\u3001\u5fae\u5185\u6838\u7ed3\u6784</li> </ul> </li> <li>\u56db\u3001\u529f\u80fd\u548c\u57fa\u672c\u7279\u5f81<ul> <li>\u529f\u80fd</li> <li>\u7279\u5f81</li> </ul> </li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","title":"\u4e00\u3001\u6982\u8ff0","text":"<ul> <li>\u5185\u6838\uff1a\u786e\u5b9a\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\uff08</li> <li>\u8bbe\u5907\u5904\u7406\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5728\u56fa\u4ef6\u4e2d\uff0c\u5982ROM\uff0cBIOS</li> <li>\u90e8\u5206\u5728\u786c\u4ef6\u4e2d\uff08\u903b\u8f91\u5730\u5740\u5230\u7269\u7406\u5730\u5740</li> <li>\u786c\u4ef6\u548c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u95f4\u7684\u8f6f\u4ef6\u5c42</li> <li>\u8d44\u6e90\u7ba1\u7406\u8005</li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_2","title":"\u4e8c\u3001\u53d1\u5c55","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1","title":"1\u3001\u771f\u7a7a\u7ba1\uff0c\u63d2\u63a5\u677f\uff0c\u65e0\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2","title":"2\u3001\u6676\u4f53\u7ba1\uff0c\u6279\u5904\u7406","text":"<p>\u6c47\u7f16\u8bed\u8a00\u5f00\u53d1 \u5355\u9053\u6027\uff0c\u81ea\u52a8\u6027\uff0c\u987a\u5e8f\u6027</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3","title":"3\u3001\u96c6\u6210\u7535\u8def","text":"<p>\u591a\u9053\u6279\u5904\u7406\uff0c\u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf</p> Success <p>\u73b0\u4ee3\u5316\u64cd\u4f5c\u7cfb\u7edf\u540c\u65f6\u6709\u6279\u5904\u7406\uff0c\u5206\u65f6\uff0c\u5b9e\u65f6\u529f\u80fd\uff08\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf)</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#4","title":"4\u3001\u7f51\u7edc\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_3","title":"\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1_1","title":"1\u3001\u6574\u4f53\u5f0f\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2_1","title":"2\u3001\u6a21\u5757\u5316\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3_1","title":"3\u3001\u5206\u5c42\u5f0f\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#4_1","title":"4\u3001\u5fae\u5185\u6838\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_4","title":"\u56db\u3001\u529f\u80fd\u548c\u57fa\u672c\u7279\u5f81","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_5","title":"\u529f\u80fd","text":"<ol> <li>\u5904\u7406\u673a\u7ba1\u7406</li> <li>\u50a8\u5b58\u5668\u7ba1\u7406</li> <li>IO\u7ba1\u7406</li> <li>\u6587\u4ef6\u7ba1\u7406</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_6","title":"\u7279\u5f81","text":"<ol> <li>\u5e76\u53d1\u6027</li> <li>\u5171\u4eab\u6027</li> <li>\u865a\u62df\u6027</li> <li>\u5f02\u6b65\u6027</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","title":"\u8ba1\u7b97\u673a\u7f51\u7edc","text":"\u8ba1\u7b97\u673a\u7f51\u7edc  <ul> <li>\u4e00\u3001\u5206\u7c7b<ul> <li>\u4f20\u8f93\u6280\u672f</li> <li>\u8986\u76d6\u8303\u56f4</li> </ul> </li> <li>\u4e8c\u3001\u7ec4\u6210\u4e0e\u7ed3\u6784<ul> <li>\u65e9\u671f\uff1a\u8d44\u6e90\u5b50\u7f51\uff0c\u901a\u4fe1\u5b50\u7f51</li> <li>\u73b0\u4ee3\uff1a\u591a\u5c42ISP</li> </ul> </li> <li>\u4e09\u3001\u53c2\u8003\u6a21\u578b<ul> <li>ISO/OSI\uff087\u5c42\uff09</li> <li>TCP/IP\uff084\u5c42\uff09</li> </ul> </li> <li>\u56db\u3001\u786c\u4ef6</li> <li>\u4e94\u3001\u5b50\u7f51\u5212\u5206<ul> <li>1\u3001\u5730\u5740\u5206\u7c7b</li> <li>2\u3001\u5b50\u7f51\u63a9\u7801</li> </ul> </li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_1","title":"\u8ba1\u7b97\u673a\u7f51\u7edc","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_2","title":"\u4e00\u3001\u5206\u7c7b","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_3","title":"\u4f20\u8f93\u6280\u672f","text":"<ol> <li>\u5e7f\u64ad\u5f0f</li> <li>\u70b9\u5bf9\u70b9</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_4","title":"\u8986\u76d6\u8303\u56f4","text":"<ol> <li>\u5c40\u57df\u7f51</li> <li>\u57ce\u57df\u7f51</li> <li>\u5e7f\u57df\u7f51</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_5","title":"\u4e8c\u3001\u7ec4\u6210\u4e0e\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_6","title":"\u65e9\u671f\uff1a\u8d44\u6e90\u5b50\u7f51\uff0c\u901a\u4fe1\u5b50\u7f51","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#isp","title":"\u73b0\u4ee3\uff1a\u591a\u5c42ISP","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_7","title":"\u4e09\u3001\u53c2\u8003\u6a21\u578b","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#isoosi7","title":"ISO/OSI\uff087\u5c42\uff09","text":"<p>\u5e94\u7528\u5c42\uff08\u62a5\u6587\uff0c\u8868\u793a\u5c42\uff0c\u4f1a\u8bdd\u5c42\uff08\u62a5\u6587 \u4f20\u8f93\u5c42\uff08\u62a5\u6587     \u7aef\u5230\u7aef \u7f51\u7edc\u5c42\uff08\u5206\u7ec4     \u8def\u7531\u9009\u62e9 \u6570\u636e\u94fe\u8def\u5c42\uff08frame\uff0c\u7269\u7406\u5c42\uff08bit</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#tcpip4","title":"TCP/IP\uff084\u5c42\uff09","text":"<p>\u5e94\u7528\u5c42     \u4f17\u591a\u534f\u8bae \u4f20\u8f93\u5c42     TCP \u57fa\u4e8e\u8fde\u63a5\u7684\u4f20\u8f93\u5c42\u534f\u8bae     UDP \u57fa\u4e8e\u65e0\u8fde\u63a5\u7684\u534f\u8bae \u4e92\u8054\u7f51\u5c42     IP\uff08ARP\uff0cRARP\u7b49\uff09\uff1a\u4e0d\u53ef\u9760 \u65e0\u8fde\u63a5 \u7f51\u7edc\u63a5\u53e3\u5c42\uff08802.3\u7b49\u7269\u7406\u534f\u8bae</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_8","title":"\u56db\u3001\u786c\u4ef6","text":"<ul> <li> <p>\u7269\u7406\u5c42\uff1a\u4e2d\u7ee7\u5668\uff0c\u96c6\u7ebf\u5668</p> </li> <li> <p>\u7f51\u5361\uff1a\u6570\u636e\u94fe\u8def\u5c42\uff08\u652f\u6301CSMA/CD\u534f\u8bae</p> </li> <li> <p>\u7f51\u6865\uff1a\u6570\u636e\u94fe\u8def\u5c42\uff08\u6839\u636e\u8f6c\u53d1\u8868\u8fdb\u884c\u5e27\u8f6c\u53d1</p> </li> <li> <p>\u4ea4\u6362\u673a\uff1a</p> <ul> <li> <p>\u4e8c\u5c42\u4ea4\u6362\u673a\uff1a\u6570\u636e\u94fe\u8def\u5c42</p> </li> <li> <p>\u4e09\u5c42\u4ea4\u6362\u673a\uff1a\u7f51\u7edc\u5c42</p> </li> </ul> </li> <li> <p>\u8def\u7531\u5668\uff1a\u7f51\u7edc</p> </li> <li> <p>Modem\uff1a\u7269\u7406\u5c42\uff08\u8109\u51b2\u4fe1\u53f7</p> </li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_9","title":"\u4e94\u3001\u5b50\u7f51\u5212\u5206","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#1","title":"1\u3001\u5730\u5740\u5206\u7c7b","text":"<p>A\uff0cB\uff0cC\uff0cD</p> <p>A\uff1a1-127\uff0824\u4f4d\u7f51\u7edc\u53f7)</p> <p>B\uff1a128-191\uff0816\u4f4d\u7f51\u7edc\u53f7)</p> <p>C\uff1a192-223\uff088\u4f4d\u7f51\u7edc\u53f7)</p> Tip <p>ipv4\uff1a32\u4f4d</p> <p>ipv6\uff1a128\u4f4d</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#2","title":"2\u3001\u5b50\u7f51\u63a9\u7801","text":"<p>\u7528\u6765\u5212\u5206\u7f51\u7edc\uff0c\u957f\u5ea6\uff1a\u7f51\u7edc\u53f7+\u5b50\u7f51\u53f7</p> <p>\u8868\u793a\u65b9\u6cd51\uff1aip/\u7f51\u7edc\u53f7\u4f4d\u6570+\u5b50\u7f51\u4f4d\u6570</p> Question <p>E.g.200.120.23.0/23\u7684\u5b50\u7f51\u63a9\u7801\u662f\uff1a   23\u4e2a1\u4e3a\u63a9\u7801\uff0c\u5373\u5728\u70b9\u5206\u5341\u8fdb\u5236\u4e2d\u8868\u793a\u4e3a255.255.254.0</p> Question <p>E.g.200.120.23.129\uff0c\u5b50\u7f51\u63a9\u7801\u662f255.255.255.0\uff0c\u7f51\u7edc\u5730\u5740\u662f\u4ec0\u4e48\uff1f</p> <p>\u7f51\u7edc\u5730\u5740\u5373\u63a9\u7801\u63a9\u6389\u540e\u9762\u5168\u96f6\uff0c\u5373200.120.23.129\uff08\u4e5f\u53ef\u7406\u89e3\u4e3a\u539f\u5730\u5740\u548c255.255.255.0\u505aAND\u8fd0\u7b97</p> Quote <p>1.<code>arp</code>\uff1a     \u5730\u5740\u89e3\u6790\u534f\u8bae\uff08Address Resolution Protocol\uff09\uff1a\u7528\u4e8e\u5c06\u7f51\u7edc\u5c42\u7684IP\u5730\u5740\u89e3\u6790\u4e3a\u6570\u636e\u94fe\u8def\u5c42\u7684MAC\u5730\u5740\u3002\u5728\u7f51\u7edc\u8bca\u65ad\u4e2d\uff0c <code>arp</code> \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u67e5\u770bARP\u7f13\u5b58\u8868\uff0c\u4e86\u89e3IP\u5730\u5740\u4e0eMAC\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\u3002</p> <p>2.<code>ipconfig</code>\uff08\u5728Windows\u7cfb\u7edf\u4e2d\uff09\uff1a     \u7528\u4e8e\u663e\u793a\u548c\u914d\u7f6e\u7f51\u7edc\u9002\u914d\u5668\u7684TCP/IP\u8bbe\u7f6e\u3002\u5b83\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u7684IP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u3001\u9ed8\u8ba4\u7f51\u5173\u3001DNS\u670d\u52a1\u5668\u7b49\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u91ca\u653e\u548c\u66f4\u65b0DHCP\u5206\u914d\u7684IP\u5730\u5740\u3002</p> <p>3.<code>route</code>\uff1a     \u7528\u4e8e\u663e\u793a\u548c\u4fee\u6539IP\u8def\u7531\u8868\u4e2d\u7684\u6761\u76ee\u3002 route \u547d\u4ee4\u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u6216\u4fee\u6539\u8def\u7531\u8868\u4e2d\u7684\u8def\u7531\u4fe1\u606f\uff0c\u4ece\u800c\u63a7\u5236\u6570\u636e\u5305\u7684\u8f6c\u53d1\u8def\u5f84\u3002</p> <p>4.<code>ping</code>\uff1a     \u7528\u4e8e\u6d4b\u8bd5\u7f51\u7edc\u8fde\u63a5\u7684\u8fde\u901a\u6027\u3002 <code>ping</code> \u547d\u4ee4\u53d1\u9001ICMP\uff08Internet Control Message Protocol\uff09\u56de\u663e\u8bf7\u6c42\u6d88\u606f\u7ed9\u76ee\u6807\u4e3b\u673a\uff0c\u5e76\u7b49\u5f85\u56de\u663e\u5e94\u7b54\uff0c\u4ee5\u6b64\u6765\u68c0\u67e5\u7f51\u7edc\u7684\u8fde\u901a\u6027\u548c\u5ef6\u8fdf\u3002</p>"}]}